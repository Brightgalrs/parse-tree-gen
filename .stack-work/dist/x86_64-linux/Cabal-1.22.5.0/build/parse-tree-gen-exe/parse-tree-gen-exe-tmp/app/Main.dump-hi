
==================== FINAL INTERFACE ====================
2016-09-10 01:26:15.284443 UTC

interface main@main:Main 7103
  interface hash: c5237492e721fe7b31c050bab87cd143
  ABI hash: 91bdf83eb18be1a26e24315266c32c76
  export-list hash: 506386a07ec19466c3999f6c0db24b82
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 09d4a21fc1d94ed623d7214f309e6bca
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: MonadPrompt-1.0.0.5@Monad_5vpMHuuRBzi4bKjpRN3A9L
                      MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      erf-2.0.0.0@erf_6l78BnvLL4b2mWYp3HJJxX
                      flexible-defaults-0.0.1.2@flexi_70LqvhG3vbS8bRvV8pHtMk
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      math-functions-0.1.7.0@mathf_BN6S7j0ar3LC4TsnYu0us5
                      mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI
                      monad-loops-0.4.3@monad_LQiHRUYhFhYBU7nOOWDOrb
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk
                      old-locale-1.0.0.7@oldlo_7h2Gx6mVPJ5Gheca8j9Mpe
                      old-time-1.1.0.3@oldti_JVjJvknZJ0JKghfag2Jw2L
                      parse-tree-gen-0.1.0.0@parse_Iaj1kxNSeaZ4PQxYHNqcNV
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L
                      random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      random-shuffle-0.0.4@rando_9kOz9tEn1526ShtWz8x59X
                      random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr
                      rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG
                      stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE template-haskell-2.10.0.0
                      th-extras-0.0.0.4@thext_LRY1RUMy7ShLl2tqhMyHdO
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
orphans: MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz:Control.Monad.Random
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI:System.Random.Mersenne.Pure64
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.IO
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.MWC
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.PureMT
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.StdGen
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances.STM
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE:Data.Generics.Instances
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk:System.Random.MWC
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0248c1e850b7ea124cf7a2e1669ebf67
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  parse-tree-gen-0.1.0.0@parse_Iaj1kxNSeaZ4PQxYHNqcNV:ParseTreeGen 488e3041134793ab7ac16118c2354d14
import  -/  parse-tree-gen-0.1.0.0@parse_Iaj1kxNSeaZ4PQxYHNqcNV:ParseTreeParseIntoSentence cae19b244df678a70b0668dfda4ee8d0
import  -/  parse-tree-gen-0.1.0.0@parse_Iaj1kxNSeaZ4PQxYHNqcNV:ParseTreeParseIntoTree 3dfe8b41605894b3142ee5483ad681e1
import  -/  random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr:Data.Random 355d6844bb1b3189cb19ec0007f6f130
import  -/  rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG:Data.RVar 9b7fbdb5f1778e76b8a65f45a17cccb1
b09a31f50ae05eaf7ad7c740270b41f1
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
df5d96fa94b20d7550b2b1ce57dfc7d7
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ParseTreeGen.loadInputData1 s of ds1 { (#,#) ipv ipv1 ->
                 case ((ParseTreeGen.$wmakeTenseP ipv1 6)
                         `cast`
                       (Trans
                            (Trans
                                 (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                 (Control.Monad.Prompt.NTCo:PromptT[0]
                                      <Data.Random.Source.Internal.Prim.Prim>_R
                                      <Data.Functor.Identity.Identity>_R) <XBarType.TenseP>_N)
                            (Control.Monad.Prompt.NTCo:Prompt[0]
                                 <Control.Monad.Prompt.Lift
                                    Data.Random.Source.Internal.Prim.Prim
                                    Data.Functor.Identity.Identity>_R
                                 <XBarType.TenseP>_R))
                         @ (GHC.Types.IO XBarType.TenseP)
                         (GHC.Base.returnIO1 @ XBarType.TenseP)
                           `cast`
                         (<XBarType.TenseP>_R
                          ->_R Sym (GHC.Types.NTCo:IO[0] <XBarType.TenseP>_R))
                         Main.main5
                           `cast`
                         (forall a2.
                          <Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a2>_R
                          ->_R <a2 -> GHC.Types.IO XBarType.TenseP>_R
                          ->_R Sym (GHC.Types.NTCo:IO[0] <XBarType.TenseP>_R)))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <XBarType.TenseP>_R)
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 Control.Exception.Base.bracket1
                   @ GHC.IO.Handle.Types.Handle
                   @ ()
                   @ ()
                   Main.main3
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0] <GHC.IO.Handle.Types.Handle>_R))
                   GHC.IO.Handle.hClose1
                     `cast`
                   (<GHC.IO.Handle.Types.Handle>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                   (\ hdl :: GHC.IO.Handle.Types.Handle[OneShot]
                      eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                    GHC.IO.Handle.Text.hPutStr2
                      hdl
                      (GHC.Base.++
                         @ GHC.Types.Char
                         (XBarType.$w$cshowsPrec8 0 ipv3 (GHC.Types.[] @ GHC.Types.Char))
                         (GHC.CString.unpackAppendCString#
                            "\n"#
                            (GHC.Base.++
                               @ GHC.Types.Char
                               (ParseTreeParseIntoSentence.parseTenseP ipv3)
                               (GHC.CString.unpackAppendCString#
                                  "\n"#
                                  (ParseTreeParseIntoTree.parseToTreeTenseP ipv3 Main.main2)))))
                      GHC.Types.False
                      eta)
                     `cast`
                   (<GHC.IO.Handle.Types.Handle>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                   ipv2 } }) -}
9464ac6b1ec928aa0f84fd3cd0bffe0a
  main2 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 0) -}
02d508f27e6d0680549d4594b8a0b2c8
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.IO.Handle.Types.Handle #)
  {- Arity: 1,
     Unfolding: (GHC.IO.Handle.FD.openFile1
                   Main.main4
                   GHC.IO.IOMode.WriteMode) -}
75c88f50cbebec66283b2dd22c751a87
  main4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "treeoutput.txt"#) -}
a25945fa7a0afa63efc5b98209618021
  main5 ::
    Control.Monad.Prompt.Lift
      Data.Random.Source.Internal.Prim.Prim
      Data.Functor.Identity.Identity
      a2
    -> (a2 -> GHC.Types.IO XBarType.TenseP)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, XBarType.TenseP #)
  {- Arity: 3,
     Unfolding: (\ @ a2
                   ds :: Control.Monad.Prompt.Lift
                           Data.Random.Source.Internal.Prim.Prim
                           Data.Functor.Identity.Identity
                           a2
                   eta2 :: a2 -> GHC.Types.IO XBarType.TenseP
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ds of wild {
                   Control.Monad.Prompt.Effect e
                   -> case Data.Random.Source.DevRandom.$fRandomSourceIODevRandom10
                             @ a2
                             Data.Random.Source.DevRandom.DevURandom
                             e
                             eta of ds1 { (#,#) ipv ipv1 ->
                      (eta2 ipv1) `cast` (GHC.Types.NTCo:IO[0] <XBarType.TenseP>_R) ipv }
                   Control.Monad.Prompt.Lift a3
                   -> (eta2 a3 `cast` (Data.Functor.Identity.NTCo:Identity[0] <a2>_R))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <XBarType.TenseP>_R)
                        eta }) -}
c799aa152b7bfdfe600104070b255982
  main6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

