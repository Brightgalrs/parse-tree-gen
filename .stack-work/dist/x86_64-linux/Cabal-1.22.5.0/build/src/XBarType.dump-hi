
==================== FINAL INTERFACE ====================
2016-09-11 05:42:06.508075 UTC

interface parse_Iaj1kxNSeaZ4PQxYHNqcNV:XBarType 7103
  interface hash: 6bc62d7dc7c3fe0ed84c23a0fa597ead
  ABI hash: 062c9e4ebaa139a6c095ffd2821d1f05
  export-list hash: e1340c03bd196911d4dc43e5ad444a4b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  XBarType.Adj{XBarType.Adj}
  XBarType.AdjBar{XBarType.AdjBar1 XBarType.AdjBar2 XBarType.AdjBar3 XBarType.AdjBar4}
  XBarType.AdjP{XBarType.AdjP}
  XBarType.Adv{XBarType.Adv}
  XBarType.AdvBar{XBarType.AdvBar}
  XBarType.AdvP{XBarType.AdvP}
  XBarType.AgrO{XBarType.AgrO}
  XBarType.AgrOBar{XBarType.AgrOBar}
  XBarType.AgrOP{XBarType.AgrOP}
  XBarType.AgrS{XBarType.AgrS}
  XBarType.AgrSBar{XBarType.AgrSBar}
  XBarType.AgrSP{XBarType.AgrSP}
  XBarType.Comp{XBarType.Comp}
  XBarType.CompBar{XBarType.CompBar}
  XBarType.CompP{XBarType.CompP}
  XBarType.Conj{XBarType.Conj}
  XBarType.ConjBar{XBarType.ConjBar}
  XBarType.ConjP{XBarType.ConjP}
  XBarType.Det{XBarType.Det}
  XBarType.DetBar{XBarType.DetBar}
  XBarType.DetP{XBarType.DetP}
  XBarType.Noun{XBarType.Noun}
  XBarType.NounBar{XBarType.NounBar1 XBarType.NounBar2 XBarType.NounBar3}
  XBarType.NounP{XBarType.NounP}
  XBarType.Optional{XBarType.NoOpt XBarType.YesOpt}
  XBarType.Prep{XBarType.Prep}
  XBarType.PrepBar{XBarType.PrepBar1 XBarType.PrepBar2}
  XBarType.PrepP{XBarType.PrepP}
  XBarType.Tense{XBarType.Tense}
  XBarType.TenseBar{XBarType.TenseBar}
  XBarType.TenseP{XBarType.TenseP1 XBarType.TenseP2}
  XBarType.Verb{XBarType.Verb}
  XBarType.VerbBar{XBarType.VerbBar1 XBarType.VerbBar2 XBarType.VerbBar3 XBarType.VerbBar4 XBarType.VerbBar5}
  XBarType.VerbP{XBarType.VerbP}
module dependencies:
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Read b423b4506a014855edbd329b567629f3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.ParserCombinators.ReadPrec 2590e0e0a57a86ac7c62727f4d868dd2
import  -/  base-4.8.2.0:Text.Read.Lex 724ca44ddd38ddc5f47a501d62736c26
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
b930bb16c92db62a8ecc6836bda6646d
  $fReadAdj :: GHC.Read.Read XBarType.Adj
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Adj
                  XBarType.$fReadAdj_$s$dmreadsPrec
                  XBarType.$fReadAdj_$sreadListDefault
                  XBarType.$fReadAdj_$creadPrec
                  XBarType.$fReadAdj_$creadListPrec -}
b930bb16c92db62a8ecc6836bda6646d
  $fReadAdj1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.Adj] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.Adj] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.Adj
                   XBarType.$fReadAdj2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.Adj>_R))
                   @ b
                   eta1) -}
b930bb16c92db62a8ecc6836bda6646d
  $fReadAdj2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.Adj
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.Adj
                   XBarType.$fReadAdj3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.Adj>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.Adj>_R)))) -}
b930bb16c92db62a8ecc6836bda6646d
  $fReadAdj3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.Adj -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.Adj -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa ww1 @ b w1 }) -}
11ba7cfba6acd23bc6a1642c617141e0
  $fReadAdj4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adj"#) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAdjBar :: GHC.Read.Read XBarType.AdjBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AdjBar
                  XBarType.$fReadAdjBar_$creadsPrec
                  XBarType.$fReadAdjBar_$sreadListDefault
                  XBarType.$fReadAdjBar_$creadPrec
                  XBarType.$fReadAdjBar_$creadListPrec -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAdjBar1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.AdjBar] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.AdjBar] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.AdjBar
                   XBarType.$fReadAdjBar2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.AdjBar>_R))
                   @ b
                   eta1) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAdjBar2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.AdjBar
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.AdjBar
                   XBarType.$fReadAdjBar3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.AdjBar>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.AdjBar>_R)))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAdjBar3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.AdjBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.AdjBar -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa1 ww1 @ b w1 }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAdjBar_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.AdjBar]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAdjBar1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.AdjBar]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.AdjBar]>_R))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAdjBar_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.AdjBar
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAdjBar2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.AdjBar>_R)) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAdjBar_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.AdjBar
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.AdjBar
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.AdjBar
                       XBarType.$fReadAdjBar3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.AdjBar>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.AdjBar>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.AdjBar>_R)
                      @ XBarType.AdjBar
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.AdjBar))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAdjBar_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.AdjBar]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.AdjBar]
                   ((XBarType.$fReadAdjBar_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.AdjBar]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.AdjBar]>_R)
                      @ [XBarType.AdjBar]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.AdjBar]))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAdjP :: GHC.Read.Read XBarType.AdjP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AdjP
                  XBarType.$fReadAdjP_$creadsPrec
                  XBarType.$fReadAdjP_$creadList
                  XBarType.$fReadAdjP_$creadPrec
                  XBarType.$fReadAdjP_$creadListPrec -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAdjP1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.AdjP] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.AdjP] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.AdjP
                   XBarType.$fReadAdjP2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.AdjP>_R))
                   @ b
                   eta1) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAdjP2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.AdjP
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.AdjP
                   XBarType.$fReadAdjP3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.AdjP>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.AdjP>_R)))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAdjP3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.AdjP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.AdjP -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa2 ww1 @ b w1 }) -}
bfb365fb8529029f6655e28dfe692b5a
  $fReadAdjP4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AdjP"#) -}
6d1d7fd2f9fd60320629f558080f9e97
  $fReadAdjP5 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 11) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAdjP6 :: Text.ParserCombinators.ReadP.P [XBarType.AdjP]
  {- Unfolding: (GHC.Read.$wa
                   @ XBarType.AdjP
                   XBarType.$fReadAdjP2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.AdjP>_R))
                   @ [XBarType.AdjP]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [XBarType.AdjP])) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAdjP_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.AdjP]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [XBarType.AdjP]
                   XBarType.$fReadAdjP6) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAdjP_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.AdjP]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAdjP1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.AdjP]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.AdjP]>_R))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAdjP_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.AdjP
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAdjP2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.AdjP>_R)) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAdjP_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.AdjP
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.AdjP
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.AdjP
                       XBarType.$fReadAdjP3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.AdjP>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.AdjP>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.AdjP>_R)
                      @ XBarType.AdjP
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.AdjP))) -}
b930bb16c92db62a8ecc6836bda6646d
  $fReadAdj_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.Adj]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAdj1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.Adj]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.Adj]>_R))) -}
b930bb16c92db62a8ecc6836bda6646d
  $fReadAdj_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.Adj
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAdj2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.Adj>_R)) -}
b930bb16c92db62a8ecc6836bda6646d
  $fReadAdj_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.Adj
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.Adj
                   XBarType.$fReadAdj_$creadPrec
                   eta) -}
b930bb16c92db62a8ecc6836bda6646d
  $fReadAdj_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.Adj]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.Adj]
                   ((XBarType.$fReadAdj_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.Adj]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.Adj]>_R)
                      @ [XBarType.Adj]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.Adj]))) -}
abc87d81459d612929b421018965d66d
  $fReadAdv :: GHC.Read.Read XBarType.Adv
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Adv
                  XBarType.$fReadAdv_$s$dmreadsPrec
                  XBarType.$fReadAdv_$sreadListDefault
                  XBarType.$fReadAdv_$creadPrec
                  XBarType.$fReadAdv_$creadListPrec -}
abc87d81459d612929b421018965d66d
  $fReadAdv1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.Adv] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.Adv] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.Adv
                   XBarType.$fReadAdv2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.Adv>_R))
                   @ b
                   eta1) -}
abc87d81459d612929b421018965d66d
  $fReadAdv2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.Adv
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.Adv
                   XBarType.$fReadAdv3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.Adv>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.Adv>_R)))) -}
abc87d81459d612929b421018965d66d
  $fReadAdv3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.Adv -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.Adv -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa3 ww1 @ b w1 }) -}
b742c3b6f978e91b00dbb19d553fc2d2
  $fReadAdv4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adv"#) -}
aa3898ead2316a60824e4128d8112d4f
  $fReadAdvBar :: GHC.Read.Read XBarType.AdvBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AdvBar
                  XBarType.$fReadAdvBar_$s$dmreadsPrec
                  XBarType.$fReadAdvBar_$sreadListDefault
                  XBarType.$fReadAdvBar_$creadPrec
                  XBarType.$fReadAdvBar_$creadListPrec -}
aa3898ead2316a60824e4128d8112d4f
  $fReadAdvBar1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.AdvBar] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.AdvBar] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.AdvBar
                   XBarType.$fReadAdvBar2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.AdvBar>_R))
                   @ b
                   eta1) -}
aa3898ead2316a60824e4128d8112d4f
  $fReadAdvBar2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.AdvBar
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.AdvBar
                   XBarType.$fReadAdvBar3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.AdvBar>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.AdvBar>_R)))) -}
aa3898ead2316a60824e4128d8112d4f
  $fReadAdvBar3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.AdvBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.AdvBar -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa4 ww1 @ b w1 }) -}
e7f2c774fab4159596abc70c9fc479a6
  $fReadAdvBar4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AdvBar"#) -}
aa3898ead2316a60824e4128d8112d4f
  $fReadAdvBar_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.AdvBar]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAdvBar1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.AdvBar]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.AdvBar]>_R))) -}
aa3898ead2316a60824e4128d8112d4f
  $fReadAdvBar_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.AdvBar
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAdvBar2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.AdvBar>_R)) -}
aa3898ead2316a60824e4128d8112d4f
  $fReadAdvBar_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.AdvBar
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.AdvBar
                   XBarType.$fReadAdvBar_$creadPrec
                   eta) -}
aa3898ead2316a60824e4128d8112d4f
  $fReadAdvBar_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.AdvBar]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.AdvBar]
                   ((XBarType.$fReadAdvBar_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.AdvBar]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.AdvBar]>_R)
                      @ [XBarType.AdvBar]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.AdvBar]))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAdvP :: GHC.Read.Read XBarType.AdvP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AdvP
                  XBarType.$fReadAdvP_$creadsPrec
                  XBarType.$fReadAdvP_$creadList
                  XBarType.$fReadAdvP_$creadPrec
                  XBarType.$fReadAdvP_$creadListPrec -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAdvP1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.AdvP] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: [XBarType.AdvP] -> Text.ParserCombinators.ReadP.P b ->
                 XBarType.$wa5 @ b w1) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAdvP2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.AdvP
  {- Arity: 1 -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAdvP_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.AdvP]
  {- Arity: 1 -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAdvP_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.AdvP]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAdvP1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.AdvP]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.AdvP]>_R))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAdvP_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.AdvP
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAdvP2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.AdvP>_R)) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAdvP_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.AdvP
  {- Arity: 1, Strictness: <L,U> -}
abc87d81459d612929b421018965d66d
  $fReadAdv_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.Adv]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAdv1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.Adv]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.Adv]>_R))) -}
abc87d81459d612929b421018965d66d
  $fReadAdv_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.Adv
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAdv2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.Adv>_R)) -}
abc87d81459d612929b421018965d66d
  $fReadAdv_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.Adv
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.Adv
                   XBarType.$fReadAdv_$creadPrec
                   eta) -}
abc87d81459d612929b421018965d66d
  $fReadAdv_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.Adv]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.Adv]
                   ((XBarType.$fReadAdv_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.Adv]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.Adv]>_R)
                      @ [XBarType.Adv]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.Adv]))) -}
470a8d576531504529865b40f33fb438
  $fReadAgrO :: GHC.Read.Read XBarType.AgrO
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AgrO
                  XBarType.$fReadAgrO_$s$dmreadsPrec
                  XBarType.$fReadAgrO_$sreadListDefault
                  XBarType.$fReadAgrO_$creadPrec
                  XBarType.$fReadAgrO_$creadListPrec -}
470a8d576531504529865b40f33fb438
  $fReadAgrO1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.AgrO] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.AgrO] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.AgrO
                   XBarType.$fReadAgrO2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.AgrO>_R))
                   @ b
                   eta1) -}
470a8d576531504529865b40f33fb438
  $fReadAgrO2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.AgrO
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.AgrO
                   XBarType.$fReadAgrO3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.AgrO>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.AgrO>_R)))) -}
470a8d576531504529865b40f33fb438
  $fReadAgrO3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.AgrO -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.AgrO -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa6 ww1 @ b w1 }) -}
3de7140d37e34178050ead6e2663abe5
  $fReadAgrO4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AgrO"#) -}
65bfbcd54eddeb9f45ca13209bfbf0f7
  $fReadAgrOBar :: GHC.Read.Read XBarType.AgrOBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AgrOBar
                  XBarType.$fReadAgrOBar_$creadsPrec
                  XBarType.$fReadAgrOBar_$sreadListDefault
                  XBarType.$fReadAgrOBar_$creadPrec
                  XBarType.$fReadAgrOBar_$creadListPrec -}
65bfbcd54eddeb9f45ca13209bfbf0f7
  $fReadAgrOBar1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.AgrOBar] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.AgrOBar] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.AgrOBar
                   XBarType.$fReadAgrOBar2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.AgrOBar>_R))
                   @ b
                   eta1) -}
2b70eec5857c552995bfad73601453c3
  $fReadAgrOBar10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DetBar"#) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAgrOBar11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.NounP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.NounP -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa11 ww1 @ b w1 }) -}
c653b48291daf76cd60bc24338fb6344
  $fReadAgrOBar12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NounP"#) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAgrOBar13 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.NounBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.NounBar -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa12 ww1 @ b w1 }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAgrOBar14 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP (XBarType.Optional a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: (\ @ a26
                   $dRead :: GHC.Read.Read a26
                   eta :: Text.ParserCombinators.ReadPrec.Prec ->
                 GHC.Read.$fReadDouble10
                   @ (XBarType.Optional a26)
                   (let {
                      ds :: Text.ParserCombinators.ReadPrec.ReadPrec a26
                      = GHC.Read.readPrec @ a26 $dRead
                    } in
                    (\ n :: Text.ParserCombinators.ReadPrec.Prec
                       @ b
                       eta1 :: XBarType.Optional a26
                               -> Text.ParserCombinators.ReadP.P b ->
                     let {
                       lvl78 :: Text.ParserCombinators.ReadP.P b
                       = let {
                           lvl79 :: Text.ParserCombinators.ReadP.P b
                           = eta1 (XBarType.NoOpt @ a26)
                         } in
                         Text.Read.Lex.expect2
                           @ b
                           (\ a98 :: Text.Read.Lex.Lexeme ->
                            case a98 of wild {
                              DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                              Text.Read.Lex.Ident a27
                              -> case GHC.Base.eqString a27 XBarType.$fReadAgrOBar16 of wild1 {
                                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                   GHC.Types.True -> lvl79 } })
                     } in
                     let {
                       k :: () -> Text.ParserCombinators.ReadP.P b
                         {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                            Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                       = \ w2 :: () -> lvl78
                     } in
                     Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                       @ b
                       (Text.ParserCombinators.ReadP.Look
                          @ b
                          (\ a98 :: GHC.Base.String ->
                           (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                             `cast`
                           (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                             @ b
                             k))
                       (case n of wild { GHC.Types.I# x ->
                        case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool
                               (GHC.Prim.<=# x 10) of wild2 {
                          GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                          GHC.Types.True
                          -> let {
                               lvl73 :: Text.ParserCombinators.ReadP.P b
                               = let {
                                   lvl79 :: Text.ParserCombinators.ReadP.P b
                                   = (ds
                                        `cast`
                                      (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0] <a26>_R)
                                        XBarType.$fReadAdjP5)
                                       `cast`
                                     (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <a26>_R)
                                       @ b
                                       (\ a27 :: a26 -> eta1 (XBarType.YesOpt @ a26 a27))
                                 } in
                                 Text.Read.Lex.expect2
                                   @ b
                                   (\ a98 :: Text.Read.Lex.Lexeme ->
                                    case a98 of wild1 {
                                      DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                      Text.Read.Lex.Ident a27
                                      -> case GHC.Base.eqString
                                                a27
                                                XBarType.$fReadAgrOBar15 of wild3 {
                                           GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                           GHC.Types.True -> lvl79 } })
                             } in
                             let {
                               k1 :: () -> Text.ParserCombinators.ReadP.P b
                                 {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                    Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl73) -}
                               = \ w2 :: () -> lvl73
                             } in
                             Text.ParserCombinators.ReadP.Look
                               @ b
                               (\ a98 :: GHC.Base.String ->
                                (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                                  `cast`
                                (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                                  @ b
                                  k1) } }))
                      `cast`
                    (Trans
                         (<Text.ParserCombinators.ReadPrec.Prec>_R
                          ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                        <XBarType.Optional a26>_R))
                         (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                   <XBarType.Optional a26>_R))))
                   eta) -}
8141559df8e753a753a227d8c929b1dd
  $fReadAgrOBar15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "YesOpt"#) -}
69c3c337de95ac144c70e27e86fe170c
  $fReadAgrOBar16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoOpt"#) -}
ddc42ffc9f305f588592a76355679035
  $fReadAgrOBar17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TenseP2"#) -}
15c160cf605dad7956843e2676134150
  $fReadAgrOBar18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.TenseBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.TenseBar -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa14 ww1 @ b w1 }) -}
c7358ca6c578a6d85cb197bfe1d5bfe5
  $fReadAgrOBar19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TenseBar"#) -}
65bfbcd54eddeb9f45ca13209bfbf0f7
  $fReadAgrOBar2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.AgrOBar
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.AgrOBar
                   XBarType.$fReadAgrOBar3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.AgrOBar>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.AgrOBar>_R)))) -}
15c160cf605dad7956843e2676134150
  $fReadAgrOBar20 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.AgrSP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.AgrSP -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa15 ww1 @ b w1 }) -}
e41b4524c5318cf04c65103b266b01be
  $fReadAgrOBar21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AgrSP"#) -}
15c160cf605dad7956843e2676134150
  $fReadAgrOBar22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.AgrSBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.AgrSBar -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa16 ww1 @ b w1 }) -}
0f8133ab3b2d1b337cbeb958b8e35f1e
  $fReadAgrOBar23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AgrSBar"#) -}
15c160cf605dad7956843e2676134150
  $fReadAgrOBar24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.VerbP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.VerbP -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa17 ww1 @ b w1 }) -}
fc8cfe7ce69f79d0b653148d2bc131da
  $fReadAgrOBar25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VerbP"#) -}
15c160cf605dad7956843e2676134150
  $fReadAgrOBar26 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.VerbBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.VerbBar -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa18 ww1 @ b w1 }) -}
e5c143190278a168e5d7b403f455abe4
  $fReadAgrOBar27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.AgrS -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.AgrS -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa19 ww1 @ b w1 }) -}
0f9a499fda4389dd72817f06a43670f8
  $fReadAgrOBar28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AgrS"#) -}
dbe1f7fbbcbd7e5405e096305eab9650
  $fReadAgrOBar29 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.Tense -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa20 ww1 @ b w1 }) -}
65bfbcd54eddeb9f45ca13209bfbf0f7
  $fReadAgrOBar3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.AgrOBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.AgrOBar -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa7 ww1 @ b w1 }) -}
0f5e483f2a61cdffe764c1e3375a212d
  $fReadAgrOBar30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Tense"#) -}
ec34e8ec7d4af06b6d41565b21812db8
  $fReadAgrOBar31 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.ConjP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.ConjP -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa21 ww1 @ b w1 }) -}
006de66cc59cfaa68ecb20e008dd8a85
  $fReadAgrOBar32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ConjP"#) -}
f6d101cef8c7274cd3630645ec56b0bc
  $fReadAgrOBar33 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.ConjBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.ConjBar -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa22 ww1 @ b w1 }) -}
a5c8887642a193efe7e94001d947f2f0
  $fReadAgrOBar34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ConjBar"#) -}
1e367eb957e5c67a50ccc7a9e3b8a502
  $fReadAgrOBar35 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.Conj -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.Conj -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa23 ww1 @ b w1 }) -}
3e7faf99967181f594422b315a850976
  $fReadAgrOBar36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Conj"#) -}
cec10d55c7da879e9c894689438a451f
  $fReadAgrOBar4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AgrOBar"#) -}
15c160cf605dad7956843e2676134150
  $fReadAgrOBar5 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.TenseP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.TenseP -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa8 ww1 @ b w1 }) -}
8d15579a394bcfdee33a19b1e6574c44
  $fReadAgrOBar6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TenseP1"#) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAgrOBar7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.DetP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.DetP -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa9 ww1 @ b w1 }) -}
71d37fe12949d94bdb64d18dad7013ee
  $fReadAgrOBar8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DetP"#) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadAgrOBar9 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.DetBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.DetBar -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa10 ww1 @ b w1 }) -}
65bfbcd54eddeb9f45ca13209bfbf0f7
  $fReadAgrOBar_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.AgrOBar]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAgrOBar1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.AgrOBar]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.AgrOBar]>_R))) -}
65bfbcd54eddeb9f45ca13209bfbf0f7
  $fReadAgrOBar_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.AgrOBar
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAgrOBar2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.AgrOBar>_R)) -}
65bfbcd54eddeb9f45ca13209bfbf0f7
  $fReadAgrOBar_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS XBarType.AgrOBar
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.AgrOBar
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.AgrOBar
                       XBarType.$fReadAgrOBar3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.AgrOBar>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.AgrOBar>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.AgrOBar>_R)
                      @ XBarType.AgrOBar
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.AgrOBar))) -}
65bfbcd54eddeb9f45ca13209bfbf0f7
  $fReadAgrOBar_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.AgrOBar]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.AgrOBar]
                   ((XBarType.$fReadAgrOBar_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.AgrOBar]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.AgrOBar]>_R)
                      @ [XBarType.AgrOBar]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.AgrOBar]))) -}
77dd7bb417604cc4fd199b560583a9aa
  $fReadAgrOP :: GHC.Read.Read XBarType.AgrOP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AgrOP
                  XBarType.$fReadAgrOP_$creadsPrec
                  XBarType.$fReadAgrOP_$sreadListDefault
                  XBarType.$fReadAgrOP_$creadPrec
                  XBarType.$fReadAgrOP_$creadListPrec -}
77dd7bb417604cc4fd199b560583a9aa
  $fReadAgrOP1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.AgrOP] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.AgrOP] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.AgrOP
                   XBarType.$fReadAgrOP2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.AgrOP>_R))
                   @ b
                   eta1) -}
77dd7bb417604cc4fd199b560583a9aa
  $fReadAgrOP2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.AgrOP
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.AgrOP
                   XBarType.$fReadAgrOP3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.AgrOP>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.AgrOP>_R)))) -}
77dd7bb417604cc4fd199b560583a9aa
  $fReadAgrOP3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.AgrOP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.AgrOP -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa24 ww1 @ b w1 }) -}
048db3302db0cbb9aba4d0a7ba16eb23
  $fReadAgrOP4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AgrOP"#) -}
77dd7bb417604cc4fd199b560583a9aa
  $fReadAgrOP_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.AgrOP]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAgrOP1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.AgrOP]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.AgrOP]>_R))) -}
77dd7bb417604cc4fd199b560583a9aa
  $fReadAgrOP_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.AgrOP
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAgrOP2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.AgrOP>_R)) -}
77dd7bb417604cc4fd199b560583a9aa
  $fReadAgrOP_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.AgrOP
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.AgrOP
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.AgrOP
                       XBarType.$fReadAgrOP3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.AgrOP>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.AgrOP>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.AgrOP>_R)
                      @ XBarType.AgrOP
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.AgrOP))) -}
77dd7bb417604cc4fd199b560583a9aa
  $fReadAgrOP_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.AgrOP]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.AgrOP]
                   ((XBarType.$fReadAgrOP_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.AgrOP]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.AgrOP]>_R)
                      @ [XBarType.AgrOP]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.AgrOP]))) -}
470a8d576531504529865b40f33fb438
  $fReadAgrO_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.AgrO]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAgrO1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.AgrO]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.AgrO]>_R))) -}
470a8d576531504529865b40f33fb438
  $fReadAgrO_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.AgrO
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAgrO2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.AgrO>_R)) -}
470a8d576531504529865b40f33fb438
  $fReadAgrO_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.AgrO
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.AgrO
                   XBarType.$fReadAgrO_$creadPrec
                   eta) -}
470a8d576531504529865b40f33fb438
  $fReadAgrO_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.AgrO]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.AgrO]
                   ((XBarType.$fReadAgrO_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.AgrO]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.AgrO]>_R)
                      @ [XBarType.AgrO]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.AgrO]))) -}
e5c143190278a168e5d7b403f455abe4
  $fReadAgrS :: GHC.Read.Read XBarType.AgrS
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AgrS
                  XBarType.$fReadAgrS_$s$dmreadsPrec
                  XBarType.$fReadAgrS_$sreadListDefault
                  XBarType.$fReadAgrS_$creadPrec
                  XBarType.$fReadAgrS_$creadListPrec -}
e5c143190278a168e5d7b403f455abe4
  $fReadAgrS1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.AgrS] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.AgrS] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.AgrS
                   XBarType.$fReadAgrS2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.AgrS>_R))
                   @ b
                   eta1) -}
e5c143190278a168e5d7b403f455abe4
  $fReadAgrS2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.AgrS
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.AgrS
                   XBarType.$fReadAgrOBar27
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.AgrS>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.AgrS>_R)))) -}
15c160cf605dad7956843e2676134150
  $fReadAgrSBar :: GHC.Read.Read XBarType.AgrSBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AgrSBar
                  XBarType.$fReadAgrSBar_$creadsPrec
                  XBarType.$fReadAgrSBar_$sreadListDefault
                  XBarType.$fReadAgrSBar_$creadPrec
                  XBarType.$fReadAgrSBar_$creadListPrec -}
15c160cf605dad7956843e2676134150
  $fReadAgrSBar1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.AgrSBar] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.AgrSBar] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.AgrSBar
                   XBarType.$fReadAgrSBar2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.AgrSBar>_R))
                   @ b
                   eta1) -}
15c160cf605dad7956843e2676134150
  $fReadAgrSBar2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.AgrSBar
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.AgrSBar
                   XBarType.$fReadAgrOBar22
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.AgrSBar>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.AgrSBar>_R)))) -}
15c160cf605dad7956843e2676134150
  $fReadAgrSBar_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.AgrSBar]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAgrSBar1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.AgrSBar]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.AgrSBar]>_R))) -}
15c160cf605dad7956843e2676134150
  $fReadAgrSBar_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.AgrSBar
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAgrSBar2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.AgrSBar>_R)) -}
15c160cf605dad7956843e2676134150
  $fReadAgrSBar_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS XBarType.AgrSBar
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.AgrSBar
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.AgrSBar
                       XBarType.$fReadAgrOBar22
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.AgrSBar>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.AgrSBar>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.AgrSBar>_R)
                      @ XBarType.AgrSBar
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.AgrSBar))) -}
15c160cf605dad7956843e2676134150
  $fReadAgrSBar_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.AgrSBar]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.AgrSBar]
                   ((XBarType.$fReadAgrSBar_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.AgrSBar]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.AgrSBar]>_R)
                      @ [XBarType.AgrSBar]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.AgrSBar]))) -}
15c160cf605dad7956843e2676134150
  $fReadAgrSP :: GHC.Read.Read XBarType.AgrSP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AgrSP
                  XBarType.$fReadAgrSP_$creadsPrec
                  XBarType.$fReadAgrSP_$sreadListDefault
                  XBarType.$fReadAgrSP_$creadPrec
                  XBarType.$fReadAgrSP_$creadListPrec -}
15c160cf605dad7956843e2676134150
  $fReadAgrSP1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.AgrSP] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.AgrSP] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.AgrSP
                   XBarType.$fReadAgrSP2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.AgrSP>_R))
                   @ b
                   eta1) -}
15c160cf605dad7956843e2676134150
  $fReadAgrSP2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.AgrSP
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.AgrSP
                   XBarType.$fReadAgrOBar20
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.AgrSP>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.AgrSP>_R)))) -}
15c160cf605dad7956843e2676134150
  $fReadAgrSP_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.AgrSP]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAgrSP1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.AgrSP]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.AgrSP]>_R))) -}
15c160cf605dad7956843e2676134150
  $fReadAgrSP_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.AgrSP
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAgrSP2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.AgrSP>_R)) -}
15c160cf605dad7956843e2676134150
  $fReadAgrSP_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.AgrSP
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.AgrSP
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.AgrSP
                       XBarType.$fReadAgrOBar20
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.AgrSP>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.AgrSP>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.AgrSP>_R)
                      @ XBarType.AgrSP
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.AgrSP))) -}
15c160cf605dad7956843e2676134150
  $fReadAgrSP_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.AgrSP]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.AgrSP]
                   ((XBarType.$fReadAgrSP_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.AgrSP]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.AgrSP]>_R)
                      @ [XBarType.AgrSP]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.AgrSP]))) -}
e5c143190278a168e5d7b403f455abe4
  $fReadAgrS_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.AgrS]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAgrS1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.AgrS]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.AgrS]>_R))) -}
e5c143190278a168e5d7b403f455abe4
  $fReadAgrS_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.AgrS
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAgrS2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.AgrS>_R)) -}
e5c143190278a168e5d7b403f455abe4
  $fReadAgrS_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.AgrS
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.AgrS
                   XBarType.$fReadAgrS_$creadPrec
                   eta) -}
e5c143190278a168e5d7b403f455abe4
  $fReadAgrS_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.AgrS]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.AgrS]
                   ((XBarType.$fReadAgrS_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.AgrS]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.AgrS]>_R)
                      @ [XBarType.AgrS]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.AgrS]))) -}
2a8672ce933713dceedcfab30827e623
  $fReadAsp :: GHC.Read.Read XBarType.Asp
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Asp
                  XBarType.$fReadAsp_$s$dmreadsPrec
                  XBarType.$fReadAsp_$sreadListDefault
                  XBarType.$fReadAsp_$creadPrec
                  XBarType.$fReadAsp_$creadListPrec -}
2a8672ce933713dceedcfab30827e623
  $fReadAsp1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.Asp] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.Asp] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.Asp
                   XBarType.$fReadAsp2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.Asp>_R))
                   @ b
                   eta1) -}
2a8672ce933713dceedcfab30827e623
  $fReadAsp2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.Asp
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.Asp
                   XBarType.$fReadAsp3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.Asp>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.Asp>_R)))) -}
2a8672ce933713dceedcfab30827e623
  $fReadAsp3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.Asp -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.Asp -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa25 ww1 @ b w1 }) -}
d2cab90b420b45906c7d8ac7c060d729
  $fReadAsp4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Asp"#) -}
5e82d79669633004faebf6fbe6f002ac
  $fReadAspBar :: GHC.Read.Read XBarType.AspBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AspBar
                  XBarType.$fReadAspBar_$s$dmreadsPrec
                  XBarType.$fReadAspBar_$sreadListDefault
                  XBarType.$fReadAspBar_$creadPrec
                  XBarType.$fReadAspBar_$creadListPrec -}
5e82d79669633004faebf6fbe6f002ac
  $fReadAspBar1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.AspBar] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.AspBar] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.AspBar
                   XBarType.$fReadAspBar2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.AspBar>_R))
                   @ b
                   eta1) -}
5e82d79669633004faebf6fbe6f002ac
  $fReadAspBar2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.AspBar
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.AspBar
                   XBarType.$fReadAspBar3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.AspBar>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.AspBar>_R)))) -}
5e82d79669633004faebf6fbe6f002ac
  $fReadAspBar3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.AspBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.AspBar -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa26 ww1 @ b w1 }) -}
7dfb4e11e8c1615383da642b4689c036
  $fReadAspBar4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AspBar"#) -}
5e82d79669633004faebf6fbe6f002ac
  $fReadAspBar_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.AspBar]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAspBar1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.AspBar]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.AspBar]>_R))) -}
5e82d79669633004faebf6fbe6f002ac
  $fReadAspBar_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.AspBar
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAspBar2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.AspBar>_R)) -}
5e82d79669633004faebf6fbe6f002ac
  $fReadAspBar_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.AspBar
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.AspBar
                   XBarType.$fReadAspBar_$creadPrec
                   eta) -}
5e82d79669633004faebf6fbe6f002ac
  $fReadAspBar_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.AspBar]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.AspBar]
                   ((XBarType.$fReadAspBar_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.AspBar]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.AspBar]>_R)
                      @ [XBarType.AspBar]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.AspBar]))) -}
cd6a16dda20202540a1ad83240fd2349
  $fReadAspP :: GHC.Read.Read XBarType.AspP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AspP
                  XBarType.$fReadAspP_$s$dmreadsPrec
                  XBarType.$fReadAspP_$sreadListDefault
                  XBarType.$fReadAspP_$creadPrec
                  XBarType.$fReadAspP_$creadListPrec -}
cd6a16dda20202540a1ad83240fd2349
  $fReadAspP1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.AspP] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.AspP] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.AspP
                   XBarType.$fReadAspP2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.AspP>_R))
                   @ b
                   eta1) -}
cd6a16dda20202540a1ad83240fd2349
  $fReadAspP2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.AspP
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.AspP
                   XBarType.$fReadAspP3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.AspP>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.AspP>_R)))) -}
cd6a16dda20202540a1ad83240fd2349
  $fReadAspP3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.AspP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.AspP -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa27 ww1 @ b w1 }) -}
ee4cee3d4d046fab23cf6c90ab62ead3
  $fReadAspP4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AspP"#) -}
cd6a16dda20202540a1ad83240fd2349
  $fReadAspP_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.AspP]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAspP1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.AspP]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.AspP]>_R))) -}
cd6a16dda20202540a1ad83240fd2349
  $fReadAspP_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.AspP
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAspP2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.AspP>_R)) -}
cd6a16dda20202540a1ad83240fd2349
  $fReadAspP_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.AspP
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.AspP
                   XBarType.$fReadAspP_$creadPrec
                   eta) -}
cd6a16dda20202540a1ad83240fd2349
  $fReadAspP_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.AspP]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.AspP]
                   ((XBarType.$fReadAspP_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.AspP]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.AspP]>_R)
                      @ [XBarType.AspP]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.AspP]))) -}
2a8672ce933713dceedcfab30827e623
  $fReadAsp_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.Asp]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAsp1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.Asp]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.Asp]>_R))) -}
2a8672ce933713dceedcfab30827e623
  $fReadAsp_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.Asp
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAsp2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.Asp>_R)) -}
2a8672ce933713dceedcfab30827e623
  $fReadAsp_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.Asp
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.Asp
                   XBarType.$fReadAsp_$creadPrec
                   eta) -}
2a8672ce933713dceedcfab30827e623
  $fReadAsp_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.Asp]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.Asp]
                   ((XBarType.$fReadAsp_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.Asp]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.Asp]>_R)
                      @ [XBarType.Asp]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.Asp]))) -}
40db9cbd83f7d0605545d38cc1804a6c
  $fReadComp :: GHC.Read.Read XBarType.Comp
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Comp
                  XBarType.$fReadComp_$s$dmreadsPrec
                  XBarType.$fReadComp_$sreadListDefault
                  XBarType.$fReadComp_$creadPrec
                  XBarType.$fReadComp_$creadListPrec -}
40db9cbd83f7d0605545d38cc1804a6c
  $fReadComp1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.Comp] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.Comp] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.Comp
                   XBarType.$fReadComp2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.Comp>_R))
                   @ b
                   eta1) -}
40db9cbd83f7d0605545d38cc1804a6c
  $fReadComp2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.Comp
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.Comp
                   XBarType.$fReadComp3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.Comp>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.Comp>_R)))) -}
40db9cbd83f7d0605545d38cc1804a6c
  $fReadComp3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.Comp -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.Comp -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa28 ww1 @ b w1 }) -}
28be9d82ceaca0a52cf1e128ba919c80
  $fReadComp4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Comp"#) -}
15c160cf605dad7956843e2676134150
  $fReadCompBar :: GHC.Read.Read XBarType.CompBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.CompBar
                  XBarType.$fReadCompBar_$creadsPrec
                  XBarType.$fReadCompBar_$sreadListDefault
                  XBarType.$fReadCompBar_$creadPrec
                  XBarType.$fReadCompBar_$creadListPrec -}
15c160cf605dad7956843e2676134150
  $fReadCompBar1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.CompBar] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.CompBar] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.CompBar
                   XBarType.$fReadCompBar2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.CompBar>_R))
                   @ b
                   eta1) -}
15c160cf605dad7956843e2676134150
  $fReadCompBar2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.CompBar
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.CompBar
                   XBarType.$fReadCompBar3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.CompBar>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.CompBar>_R)))) -}
15c160cf605dad7956843e2676134150
  $fReadCompBar3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.CompBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.CompBar -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa29 ww1 @ b w1 }) -}
fc07c6570210c2ab8d9eddcb089902b9
  $fReadCompBar4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CompBar"#) -}
15c160cf605dad7956843e2676134150
  $fReadCompBar_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.CompBar]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadCompBar1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.CompBar]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.CompBar]>_R))) -}
15c160cf605dad7956843e2676134150
  $fReadCompBar_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.CompBar
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadCompBar2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.CompBar>_R)) -}
15c160cf605dad7956843e2676134150
  $fReadCompBar_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS XBarType.CompBar
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.CompBar
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.CompBar
                       XBarType.$fReadCompBar3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.CompBar>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.CompBar>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.CompBar>_R)
                      @ XBarType.CompBar
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.CompBar))) -}
15c160cf605dad7956843e2676134150
  $fReadCompBar_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.CompBar]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.CompBar]
                   ((XBarType.$fReadCompBar_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.CompBar]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.CompBar]>_R)
                      @ [XBarType.CompBar]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.CompBar]))) -}
15c160cf605dad7956843e2676134150
  $fReadCompP :: GHC.Read.Read XBarType.CompP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.CompP
                  XBarType.$fReadCompP_$creadsPrec
                  XBarType.$fReadCompP_$sreadListDefault
                  XBarType.$fReadCompP_$creadPrec
                  XBarType.$fReadCompP_$creadListPrec -}
15c160cf605dad7956843e2676134150
  $fReadCompP1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.CompP] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.CompP] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.CompP
                   XBarType.$fReadCompP2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.CompP>_R))
                   @ b
                   eta1) -}
15c160cf605dad7956843e2676134150
  $fReadCompP2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.CompP
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.CompP
                   XBarType.$fReadCompP3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.CompP>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.CompP>_R)))) -}
15c160cf605dad7956843e2676134150
  $fReadCompP3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.CompP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.CompP -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa30 ww1 @ b w1 }) -}
f9eb1b41cc9e881cd9fe5de03ba96fba
  $fReadCompP4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CompP"#) -}
15c160cf605dad7956843e2676134150
  $fReadCompP_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.CompP]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadCompP1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.CompP]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.CompP]>_R))) -}
15c160cf605dad7956843e2676134150
  $fReadCompP_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.CompP
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadCompP2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.CompP>_R)) -}
15c160cf605dad7956843e2676134150
  $fReadCompP_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.CompP
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.CompP
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.CompP
                       XBarType.$fReadCompP3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.CompP>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.CompP>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.CompP>_R)
                      @ XBarType.CompP
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.CompP))) -}
15c160cf605dad7956843e2676134150
  $fReadCompP_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.CompP]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.CompP]
                   ((XBarType.$fReadCompP_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.CompP]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.CompP]>_R)
                      @ [XBarType.CompP]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.CompP]))) -}
40db9cbd83f7d0605545d38cc1804a6c
  $fReadComp_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.Comp]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadComp1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.Comp]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.Comp]>_R))) -}
40db9cbd83f7d0605545d38cc1804a6c
  $fReadComp_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.Comp
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadComp2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.Comp>_R)) -}
40db9cbd83f7d0605545d38cc1804a6c
  $fReadComp_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.Comp
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.Comp
                   XBarType.$fReadComp_$creadPrec
                   eta) -}
40db9cbd83f7d0605545d38cc1804a6c
  $fReadComp_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.Comp]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.Comp]
                   ((XBarType.$fReadComp_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.Comp]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.Comp]>_R)
                      @ [XBarType.Comp]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.Comp]))) -}
1e367eb957e5c67a50ccc7a9e3b8a502
  $fReadConj :: GHC.Read.Read XBarType.Conj
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Conj
                  XBarType.$fReadConj_$s$dmreadsPrec
                  XBarType.$fReadConj_$sreadListDefault
                  XBarType.$fReadConj_$creadPrec
                  XBarType.$fReadConj_$creadListPrec -}
1e367eb957e5c67a50ccc7a9e3b8a502
  $fReadConj1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.Conj] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.Conj] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.Conj
                   XBarType.$fReadConj2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.Conj>_R))
                   @ b
                   eta1) -}
1e367eb957e5c67a50ccc7a9e3b8a502
  $fReadConj2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.Conj
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.Conj
                   XBarType.$fReadAgrOBar35
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.Conj>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.Conj>_R)))) -}
f6d101cef8c7274cd3630645ec56b0bc
  $fReadConjBar :: GHC.Read.Read XBarType.ConjBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.ConjBar
                  XBarType.$fReadConjBar_$creadsPrec
                  XBarType.$fReadConjBar_$sreadListDefault
                  XBarType.$fReadConjBar_$creadPrec
                  XBarType.$fReadConjBar_$creadListPrec -}
f6d101cef8c7274cd3630645ec56b0bc
  $fReadConjBar1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.ConjBar] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.ConjBar] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.ConjBar
                   XBarType.$fReadConjBar2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.ConjBar>_R))
                   @ b
                   eta1) -}
f6d101cef8c7274cd3630645ec56b0bc
  $fReadConjBar2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.ConjBar
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.ConjBar
                   XBarType.$fReadAgrOBar33
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.ConjBar>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.ConjBar>_R)))) -}
f6d101cef8c7274cd3630645ec56b0bc
  $fReadConjBar_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.ConjBar]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadConjBar1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.ConjBar]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.ConjBar]>_R))) -}
f6d101cef8c7274cd3630645ec56b0bc
  $fReadConjBar_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.ConjBar
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadConjBar2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.ConjBar>_R)) -}
f6d101cef8c7274cd3630645ec56b0bc
  $fReadConjBar_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS XBarType.ConjBar
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.ConjBar
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.ConjBar
                       XBarType.$fReadAgrOBar33
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.ConjBar>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.ConjBar>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.ConjBar>_R)
                      @ XBarType.ConjBar
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.ConjBar))) -}
f6d101cef8c7274cd3630645ec56b0bc
  $fReadConjBar_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.ConjBar]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.ConjBar]
                   ((XBarType.$fReadConjBar_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.ConjBar]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.ConjBar]>_R)
                      @ [XBarType.ConjBar]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.ConjBar]))) -}
ec34e8ec7d4af06b6d41565b21812db8
  $fReadConjP :: GHC.Read.Read XBarType.ConjP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.ConjP
                  XBarType.$fReadConjP_$creadsPrec
                  XBarType.$fReadConjP_$sreadListDefault
                  XBarType.$fReadConjP_$creadPrec
                  XBarType.$fReadConjP_$creadListPrec -}
ec34e8ec7d4af06b6d41565b21812db8
  $fReadConjP1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.ConjP] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.ConjP] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.ConjP
                   XBarType.$fReadConjP2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.ConjP>_R))
                   @ b
                   eta1) -}
ec34e8ec7d4af06b6d41565b21812db8
  $fReadConjP2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.ConjP
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.ConjP
                   XBarType.$fReadAgrOBar31
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.ConjP>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.ConjP>_R)))) -}
ec34e8ec7d4af06b6d41565b21812db8
  $fReadConjP_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.ConjP]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadConjP1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.ConjP]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.ConjP]>_R))) -}
ec34e8ec7d4af06b6d41565b21812db8
  $fReadConjP_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.ConjP
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadConjP2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.ConjP>_R)) -}
ec34e8ec7d4af06b6d41565b21812db8
  $fReadConjP_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.ConjP
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.ConjP
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.ConjP
                       XBarType.$fReadAgrOBar31
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.ConjP>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.ConjP>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.ConjP>_R)
                      @ XBarType.ConjP
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.ConjP))) -}
ec34e8ec7d4af06b6d41565b21812db8
  $fReadConjP_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.ConjP]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.ConjP]
                   ((XBarType.$fReadConjP_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.ConjP]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.ConjP]>_R)
                      @ [XBarType.ConjP]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.ConjP]))) -}
1e367eb957e5c67a50ccc7a9e3b8a502
  $fReadConj_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.Conj]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadConj1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.Conj]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.Conj]>_R))) -}
1e367eb957e5c67a50ccc7a9e3b8a502
  $fReadConj_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.Conj
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadConj2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.Conj>_R)) -}
1e367eb957e5c67a50ccc7a9e3b8a502
  $fReadConj_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.Conj
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.Conj
                   XBarType.$fReadConj_$creadPrec
                   eta) -}
1e367eb957e5c67a50ccc7a9e3b8a502
  $fReadConj_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.Conj]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.Conj]
                   ((XBarType.$fReadConj_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.Conj]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.Conj]>_R)
                      @ [XBarType.Conj]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.Conj]))) -}
ff9a4450e29f3df4e843ede9d7acd6c5
  $fReadDet :: GHC.Read.Read XBarType.Det
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Det
                  XBarType.$fReadDet_$s$dmreadsPrec
                  XBarType.$fReadDet_$sreadListDefault
                  XBarType.$fReadDet_$creadPrec
                  XBarType.$fReadDet_$creadListPrec -}
ff9a4450e29f3df4e843ede9d7acd6c5
  $fReadDet1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.Det] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.Det] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.Det
                   XBarType.$fReadDet2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.Det>_R))
                   @ b
                   eta1) -}
ff9a4450e29f3df4e843ede9d7acd6c5
  $fReadDet2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.Det
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.Det
                   XBarType.$fReadDet3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.Det>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.Det>_R)))) -}
ff9a4450e29f3df4e843ede9d7acd6c5
  $fReadDet3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.Det -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.Det -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa13 ww1 @ b w1 }) -}
706f5a3328d5f9b6971a67eac890099e
  $fReadDet4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Det"#) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadDetBar :: GHC.Read.Read XBarType.DetBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.DetBar
                  XBarType.$fReadDetBar_$creadsPrec
                  XBarType.$fReadDetBar_$sreadListDefault
                  XBarType.$fReadDetBar_$creadPrec
                  XBarType.$fReadDetBar_$creadListPrec -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadDetBar1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.DetBar] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.DetBar] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.DetBar
                   XBarType.$fReadDetBar2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.DetBar>_R))
                   @ b
                   eta1) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadDetBar2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.DetBar
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.DetBar
                   XBarType.$fReadAgrOBar9
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.DetBar>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.DetBar>_R)))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadDetBar_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.DetBar]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadDetBar1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.DetBar]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.DetBar]>_R))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadDetBar_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.DetBar
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadDetBar2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.DetBar>_R)) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadDetBar_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.DetBar
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.DetBar
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.DetBar
                       XBarType.$fReadAgrOBar9
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.DetBar>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.DetBar>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.DetBar>_R)
                      @ XBarType.DetBar
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.DetBar))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadDetBar_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.DetBar]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.DetBar]
                   ((XBarType.$fReadDetBar_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.DetBar]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.DetBar]>_R)
                      @ [XBarType.DetBar]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.DetBar]))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadDetP :: GHC.Read.Read XBarType.DetP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.DetP
                  XBarType.$fReadDetP_$creadsPrec
                  XBarType.$fReadDetP_$sreadListDefault
                  XBarType.$fReadDetP_$creadPrec
                  XBarType.$fReadDetP_$creadListPrec -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadDetP1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.DetP] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.DetP] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.DetP
                   XBarType.$fReadDetP2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.DetP>_R))
                   @ b
                   eta1) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadDetP2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.DetP
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.DetP
                   XBarType.$fReadAgrOBar7
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.DetP>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.DetP>_R)))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadDetP_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.DetP]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadDetP1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.DetP]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.DetP]>_R))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadDetP_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.DetP
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadDetP2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.DetP>_R)) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadDetP_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.DetP
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.DetP
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.DetP
                       XBarType.$fReadAgrOBar7
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.DetP>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.DetP>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.DetP>_R)
                      @ XBarType.DetP
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.DetP))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadDetP_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.DetP]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.DetP]
                   ((XBarType.$fReadDetP_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.DetP]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.DetP]>_R)
                      @ [XBarType.DetP]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.DetP]))) -}
ff9a4450e29f3df4e843ede9d7acd6c5
  $fReadDet_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.Det]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadDet1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.Det]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.Det]>_R))) -}
ff9a4450e29f3df4e843ede9d7acd6c5
  $fReadDet_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.Det
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadDet2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.Det>_R)) -}
ff9a4450e29f3df4e843ede9d7acd6c5
  $fReadDet_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.Det
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.Det
                   XBarType.$fReadDet_$creadPrec
                   eta) -}
ff9a4450e29f3df4e843ede9d7acd6c5
  $fReadDet_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.Det]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.Det]
                   ((XBarType.$fReadDet_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.Det]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.Det]>_R)
                      @ [XBarType.Det]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.Det]))) -}
f4d209cd87c39285c8d7b83991fa8fbf
  $fReadLilVerb :: GHC.Read.Read XBarType.LilVerb
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.LilVerb
                  XBarType.$fReadLilVerb_$s$dmreadsPrec
                  XBarType.$fReadLilVerb_$sreadListDefault
                  XBarType.$fReadLilVerb_$creadPrec
                  XBarType.$fReadLilVerb_$creadListPrec -}
f4d209cd87c39285c8d7b83991fa8fbf
  $fReadLilVerb1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.LilVerb] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.LilVerb] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.LilVerb
                   XBarType.$fReadLilVerb2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.LilVerb>_R))
                   @ b
                   eta1) -}
f4d209cd87c39285c8d7b83991fa8fbf
  $fReadLilVerb2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.LilVerb
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.LilVerb
                   XBarType.$fReadLilVerb3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.LilVerb>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.LilVerb>_R)))) -}
f4d209cd87c39285c8d7b83991fa8fbf
  $fReadLilVerb3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.LilVerb -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.LilVerb -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa31 ww1 @ b w1 }) -}
01265ec17411604c4f963d0fd3330850
  $fReadLilVerb4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LilVerb"#) -}
ac8c2e36e4008e09c4da63499abff444
  $fReadLilVerbBar :: GHC.Read.Read XBarType.LilVerbBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.LilVerbBar
                  XBarType.$fReadLilVerbBar_$s$dmreadsPrec
                  XBarType.$fReadLilVerbBar_$sreadListDefault
                  XBarType.$fReadLilVerbBar_$creadPrec
                  XBarType.$fReadLilVerbBar_$creadListPrec -}
ac8c2e36e4008e09c4da63499abff444
  $fReadLilVerbBar1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.LilVerbBar] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.LilVerbBar]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.LilVerbBar
                   XBarType.$fReadLilVerbBar2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.LilVerbBar>_R))
                   @ b
                   eta1) -}
ac8c2e36e4008e09c4da63499abff444
  $fReadLilVerbBar2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.LilVerbBar
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.LilVerbBar
                   XBarType.$fReadLilVerbBar3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.LilVerbBar>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.LilVerbBar>_R)))) -}
ac8c2e36e4008e09c4da63499abff444
  $fReadLilVerbBar3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.LilVerbBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.LilVerbBar -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa32 ww1 @ b w1 }) -}
5f2ccc62efbccaa5cebfda6ea41b56ea
  $fReadLilVerbBar4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LilVerbBar"#) -}
ac8c2e36e4008e09c4da63499abff444
  $fReadLilVerbBar_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.LilVerbBar]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadLilVerbBar1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.LilVerbBar]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.LilVerbBar]>_R))) -}
ac8c2e36e4008e09c4da63499abff444
  $fReadLilVerbBar_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.LilVerbBar
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadLilVerbBar2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.LilVerbBar>_R)) -}
ac8c2e36e4008e09c4da63499abff444
  $fReadLilVerbBar_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS XBarType.LilVerbBar
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.LilVerbBar
                   XBarType.$fReadLilVerbBar_$creadPrec
                   eta) -}
ac8c2e36e4008e09c4da63499abff444
  $fReadLilVerbBar_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.LilVerbBar]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.LilVerbBar]
                   ((XBarType.$fReadLilVerbBar_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.LilVerbBar]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[XBarType.LilVerbBar]>_R)
                      @ [XBarType.LilVerbBar]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.LilVerbBar]))) -}
7eaef99330e84af37b90cb5bad50ff0e
  $fReadLilVerbP :: GHC.Read.Read XBarType.LilVerbP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.LilVerbP
                  XBarType.$fReadLilVerbP_$s$dmreadsPrec
                  XBarType.$fReadLilVerbP_$sreadListDefault
                  XBarType.$fReadLilVerbP_$creadPrec
                  XBarType.$fReadLilVerbP_$creadListPrec -}
7eaef99330e84af37b90cb5bad50ff0e
  $fReadLilVerbP1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.LilVerbP] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.LilVerbP] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.LilVerbP
                   XBarType.$fReadLilVerbP2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.LilVerbP>_R))
                   @ b
                   eta1) -}
7eaef99330e84af37b90cb5bad50ff0e
  $fReadLilVerbP2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.LilVerbP
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.LilVerbP
                   XBarType.$fReadLilVerbP3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.LilVerbP>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.LilVerbP>_R)))) -}
7eaef99330e84af37b90cb5bad50ff0e
  $fReadLilVerbP3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.LilVerbP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.LilVerbP -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa33 ww1 @ b w1 }) -}
75160e3df246769a05443dc0a01c90a9
  $fReadLilVerbP4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LilVerbP"#) -}
7eaef99330e84af37b90cb5bad50ff0e
  $fReadLilVerbP_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.LilVerbP]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadLilVerbP1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.LilVerbP]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.LilVerbP]>_R))) -}
7eaef99330e84af37b90cb5bad50ff0e
  $fReadLilVerbP_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.LilVerbP
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadLilVerbP2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.LilVerbP>_R)) -}
7eaef99330e84af37b90cb5bad50ff0e
  $fReadLilVerbP_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS XBarType.LilVerbP
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.LilVerbP
                   XBarType.$fReadLilVerbP_$creadPrec
                   eta) -}
7eaef99330e84af37b90cb5bad50ff0e
  $fReadLilVerbP_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.LilVerbP]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.LilVerbP]
                   ((XBarType.$fReadLilVerbP_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.LilVerbP]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[XBarType.LilVerbP]>_R)
                      @ [XBarType.LilVerbP]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.LilVerbP]))) -}
f4d209cd87c39285c8d7b83991fa8fbf
  $fReadLilVerb_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.LilVerb]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadLilVerb1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.LilVerb]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.LilVerb]>_R))) -}
f4d209cd87c39285c8d7b83991fa8fbf
  $fReadLilVerb_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.LilVerb
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadLilVerb2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.LilVerb>_R)) -}
f4d209cd87c39285c8d7b83991fa8fbf
  $fReadLilVerb_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS XBarType.LilVerb
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.LilVerb
                   XBarType.$fReadLilVerb_$creadPrec
                   eta) -}
f4d209cd87c39285c8d7b83991fa8fbf
  $fReadLilVerb_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.LilVerb]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.LilVerb]
                   ((XBarType.$fReadLilVerb_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.LilVerb]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.LilVerb]>_R)
                      @ [XBarType.LilVerb]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.LilVerb]))) -}
96952ea5a5218ad752d8ce652c5da427
  $fReadNeg :: GHC.Read.Read XBarType.Neg
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Neg
                  XBarType.$fReadNeg_$s$dmreadsPrec
                  XBarType.$fReadNeg_$sreadListDefault
                  XBarType.$fReadNeg_$creadPrec
                  XBarType.$fReadNeg_$creadListPrec -}
96952ea5a5218ad752d8ce652c5da427
  $fReadNeg1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.Neg] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.Neg] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.Neg
                   XBarType.$fReadNeg2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.Neg>_R))
                   @ b
                   eta1) -}
96952ea5a5218ad752d8ce652c5da427
  $fReadNeg2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.Neg
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.Neg
                   XBarType.$fReadNeg3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.Neg>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.Neg>_R)))) -}
96952ea5a5218ad752d8ce652c5da427
  $fReadNeg3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.Neg -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.Neg -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa34 ww1 @ b w1 }) -}
3e0b886811c35c6eb24855c609aec19f
  $fReadNeg4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Neg"#) -}
181d8ebd5d6c85a6b7191e9c23e6dee8
  $fReadNegBar :: GHC.Read.Read XBarType.NegBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.NegBar
                  XBarType.$fReadNegBar_$s$dmreadsPrec
                  XBarType.$fReadNegBar_$sreadListDefault
                  XBarType.$fReadNegBar_$creadPrec
                  XBarType.$fReadNegBar_$creadListPrec -}
181d8ebd5d6c85a6b7191e9c23e6dee8
  $fReadNegBar1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.NegBar] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.NegBar] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.NegBar
                   XBarType.$fReadNegBar2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.NegBar>_R))
                   @ b
                   eta1) -}
181d8ebd5d6c85a6b7191e9c23e6dee8
  $fReadNegBar2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.NegBar
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.NegBar
                   XBarType.$fReadNegBar3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.NegBar>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.NegBar>_R)))) -}
181d8ebd5d6c85a6b7191e9c23e6dee8
  $fReadNegBar3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.NegBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.NegBar -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa35 ww1 @ b w1 }) -}
568e3dc9056c6dfd9d4934deceee3ff0
  $fReadNegBar4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NegBar"#) -}
181d8ebd5d6c85a6b7191e9c23e6dee8
  $fReadNegBar_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.NegBar]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadNegBar1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.NegBar]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.NegBar]>_R))) -}
181d8ebd5d6c85a6b7191e9c23e6dee8
  $fReadNegBar_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.NegBar
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadNegBar2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.NegBar>_R)) -}
181d8ebd5d6c85a6b7191e9c23e6dee8
  $fReadNegBar_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.NegBar
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.NegBar
                   XBarType.$fReadNegBar_$creadPrec
                   eta) -}
181d8ebd5d6c85a6b7191e9c23e6dee8
  $fReadNegBar_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.NegBar]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.NegBar]
                   ((XBarType.$fReadNegBar_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.NegBar]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.NegBar]>_R)
                      @ [XBarType.NegBar]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.NegBar]))) -}
cf93d09aab54ad4cde6d02c62f12f15d
  $fReadNegP :: GHC.Read.Read XBarType.NegP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.NegP
                  XBarType.$fReadNegP_$s$dmreadsPrec
                  XBarType.$fReadNegP_$sreadListDefault
                  XBarType.$fReadNegP_$creadPrec
                  XBarType.$fReadNegP_$creadListPrec -}
cf93d09aab54ad4cde6d02c62f12f15d
  $fReadNegP1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.NegP] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.NegP] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.NegP
                   XBarType.$fReadNegP2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.NegP>_R))
                   @ b
                   eta1) -}
cf93d09aab54ad4cde6d02c62f12f15d
  $fReadNegP2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.NegP
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.NegP
                   XBarType.$fReadNegP3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.NegP>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.NegP>_R)))) -}
cf93d09aab54ad4cde6d02c62f12f15d
  $fReadNegP3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.NegP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.NegP -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa36 ww1 @ b w1 }) -}
2ff385b639fd8289692946d99223c074
  $fReadNegP4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NegP"#) -}
cf93d09aab54ad4cde6d02c62f12f15d
  $fReadNegP_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.NegP]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadNegP1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.NegP]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.NegP]>_R))) -}
cf93d09aab54ad4cde6d02c62f12f15d
  $fReadNegP_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.NegP
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadNegP2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.NegP>_R)) -}
cf93d09aab54ad4cde6d02c62f12f15d
  $fReadNegP_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.NegP
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.NegP
                   XBarType.$fReadNegP_$creadPrec
                   eta) -}
cf93d09aab54ad4cde6d02c62f12f15d
  $fReadNegP_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.NegP]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.NegP]
                   ((XBarType.$fReadNegP_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.NegP]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.NegP]>_R)
                      @ [XBarType.NegP]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.NegP]))) -}
96952ea5a5218ad752d8ce652c5da427
  $fReadNeg_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.Neg]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadNeg1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.Neg]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.Neg]>_R))) -}
96952ea5a5218ad752d8ce652c5da427
  $fReadNeg_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.Neg
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadNeg2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.Neg>_R)) -}
96952ea5a5218ad752d8ce652c5da427
  $fReadNeg_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.Neg
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.Neg
                   XBarType.$fReadNeg_$creadPrec
                   eta) -}
96952ea5a5218ad752d8ce652c5da427
  $fReadNeg_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.Neg]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.Neg]
                   ((XBarType.$fReadNeg_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.Neg]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.Neg]>_R)
                      @ [XBarType.Neg]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.Neg]))) -}
05cdb4fe2c7952b900be6f149f0ea287
  $fReadNoun :: GHC.Read.Read XBarType.Noun
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Noun
                  XBarType.$fReadNoun_$s$dmreadsPrec
                  XBarType.$fReadNoun_$sreadListDefault
                  XBarType.$fReadNoun_$creadPrec
                  XBarType.$fReadNoun_$creadListPrec -}
05cdb4fe2c7952b900be6f149f0ea287
  $fReadNoun1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.Noun] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.Noun] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.Noun
                   XBarType.$fReadNoun2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.Noun>_R))
                   @ b
                   eta1) -}
05cdb4fe2c7952b900be6f149f0ea287
  $fReadNoun2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.Noun
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.Noun
                   XBarType.$fReadNoun3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.Noun>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.Noun>_R)))) -}
05cdb4fe2c7952b900be6f149f0ea287
  $fReadNoun3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.Noun -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.Noun -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa37 ww1 @ b w1 }) -}
6e0a5a4618153e38259a73706a13e317
  $fReadNoun4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Noun"#) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadNounBar :: GHC.Read.Read XBarType.NounBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.NounBar
                  XBarType.$fReadNounBar_$creadsPrec
                  XBarType.$fReadNounBar_$sreadListDefault
                  XBarType.$fReadNounBar_$creadPrec
                  XBarType.$fReadNounBar_$creadListPrec -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadNounBar1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.NounBar] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.NounBar] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.NounBar
                   XBarType.$fReadNounBar2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.NounBar>_R))
                   @ b
                   eta1) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadNounBar2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.NounBar
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.NounBar
                   XBarType.$fReadAgrOBar13
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.NounBar>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.NounBar>_R)))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadNounBar_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.NounBar]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadNounBar1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.NounBar]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.NounBar]>_R))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadNounBar_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.NounBar
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadNounBar2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.NounBar>_R)) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadNounBar_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS XBarType.NounBar
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.NounBar
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.NounBar
                       XBarType.$fReadAgrOBar13
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.NounBar>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.NounBar>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.NounBar>_R)
                      @ XBarType.NounBar
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.NounBar))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadNounBar_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.NounBar]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.NounBar]
                   ((XBarType.$fReadNounBar_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.NounBar]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.NounBar]>_R)
                      @ [XBarType.NounBar]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.NounBar]))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadNounP :: GHC.Read.Read XBarType.NounP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.NounP
                  XBarType.$fReadNounP_$creadsPrec
                  XBarType.$fReadNounP_$sreadListDefault
                  XBarType.$fReadNounP_$creadPrec
                  XBarType.$fReadNounP_$creadListPrec -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadNounP1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.NounP] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.NounP] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.NounP
                   XBarType.$fReadNounP2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.NounP>_R))
                   @ b
                   eta1) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadNounP2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.NounP
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.NounP
                   XBarType.$fReadAgrOBar11
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.NounP>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.NounP>_R)))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadNounP_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.NounP]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadNounP1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.NounP]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.NounP]>_R))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadNounP_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.NounP
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadNounP2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.NounP>_R)) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadNounP_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.NounP
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.NounP
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.NounP
                       XBarType.$fReadAgrOBar11
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.NounP>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.NounP>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.NounP>_R)
                      @ XBarType.NounP
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.NounP))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadNounP_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.NounP]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.NounP]
                   ((XBarType.$fReadNounP_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.NounP]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.NounP]>_R)
                      @ [XBarType.NounP]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.NounP]))) -}
05cdb4fe2c7952b900be6f149f0ea287
  $fReadNoun_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.Noun]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadNoun1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.Noun]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.Noun]>_R))) -}
05cdb4fe2c7952b900be6f149f0ea287
  $fReadNoun_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.Noun
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadNoun2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.Noun>_R)) -}
05cdb4fe2c7952b900be6f149f0ea287
  $fReadNoun_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.Noun
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.Noun
                   XBarType.$fReadNoun_$creadPrec
                   eta) -}
05cdb4fe2c7952b900be6f149f0ea287
  $fReadNoun_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.Noun]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.Noun]
                   ((XBarType.$fReadNoun_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.Noun]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.Noun]>_R)
                      @ [XBarType.Noun]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.Noun]))) -}
695205acf366e6b22a917b33df082656
  $fReadNumb :: GHC.Read.Read XBarType.Numb
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Numb
                  XBarType.$fReadNumb_$s$dmreadsPrec
                  XBarType.$fReadNumb_$sreadListDefault
                  XBarType.$fReadNumb_$creadPrec
                  XBarType.$fReadNumb_$creadListPrec -}
695205acf366e6b22a917b33df082656
  $fReadNumb1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.Numb] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.Numb] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.Numb
                   XBarType.$fReadNumb2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.Numb>_R))
                   @ b
                   eta1) -}
695205acf366e6b22a917b33df082656
  $fReadNumb2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.Numb
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.Numb
                   XBarType.$fReadNumb3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.Numb>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.Numb>_R)))) -}
695205acf366e6b22a917b33df082656
  $fReadNumb3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.Numb -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.Numb -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa38 ww1 @ b w1 }) -}
7c430aa6155366eecafa182af953cf64
  $fReadNumb4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Numb"#) -}
aba5d796ddeee6565404e7acc5d0c460
  $fReadNumbBar :: GHC.Read.Read XBarType.NumbBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.NumbBar
                  XBarType.$fReadNumbBar_$s$dmreadsPrec
                  XBarType.$fReadNumbBar_$sreadListDefault
                  XBarType.$fReadNumbBar_$creadPrec
                  XBarType.$fReadNumbBar_$creadListPrec -}
aba5d796ddeee6565404e7acc5d0c460
  $fReadNumbBar1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.NumbBar] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.NumbBar] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.NumbBar
                   XBarType.$fReadNumbBar2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.NumbBar>_R))
                   @ b
                   eta1) -}
aba5d796ddeee6565404e7acc5d0c460
  $fReadNumbBar2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.NumbBar
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.NumbBar
                   XBarType.$fReadNumbBar3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.NumbBar>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.NumbBar>_R)))) -}
aba5d796ddeee6565404e7acc5d0c460
  $fReadNumbBar3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.NumbBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.NumbBar -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa39 ww1 @ b w1 }) -}
cfd5f22b23b7c41ea0da64e24c416071
  $fReadNumbBar4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NumbBar"#) -}
aba5d796ddeee6565404e7acc5d0c460
  $fReadNumbBar_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.NumbBar]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadNumbBar1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.NumbBar]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.NumbBar]>_R))) -}
aba5d796ddeee6565404e7acc5d0c460
  $fReadNumbBar_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.NumbBar
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadNumbBar2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.NumbBar>_R)) -}
aba5d796ddeee6565404e7acc5d0c460
  $fReadNumbBar_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS XBarType.NumbBar
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.NumbBar
                   XBarType.$fReadNumbBar_$creadPrec
                   eta) -}
aba5d796ddeee6565404e7acc5d0c460
  $fReadNumbBar_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.NumbBar]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.NumbBar]
                   ((XBarType.$fReadNumbBar_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.NumbBar]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.NumbBar]>_R)
                      @ [XBarType.NumbBar]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.NumbBar]))) -}
127aba05e55d3ac81adfc46bb6f76025
  $fReadNumbP :: GHC.Read.Read XBarType.NumbP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.NumbP
                  XBarType.$fReadNumbP_$s$dmreadsPrec
                  XBarType.$fReadNumbP_$sreadListDefault
                  XBarType.$fReadNumbP_$creadPrec
                  XBarType.$fReadNumbP_$creadListPrec -}
127aba05e55d3ac81adfc46bb6f76025
  $fReadNumbP1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.NumbP] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.NumbP] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.NumbP
                   XBarType.$fReadNumbP2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.NumbP>_R))
                   @ b
                   eta1) -}
127aba05e55d3ac81adfc46bb6f76025
  $fReadNumbP2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.NumbP
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.NumbP
                   XBarType.$fReadNumbP3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.NumbP>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.NumbP>_R)))) -}
127aba05e55d3ac81adfc46bb6f76025
  $fReadNumbP3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.NumbP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.NumbP -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa40 ww1 @ b w1 }) -}
744010739e8451efe44e237a0a9b6629
  $fReadNumbP4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NumbP"#) -}
127aba05e55d3ac81adfc46bb6f76025
  $fReadNumbP_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.NumbP]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadNumbP1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.NumbP]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.NumbP]>_R))) -}
127aba05e55d3ac81adfc46bb6f76025
  $fReadNumbP_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.NumbP
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadNumbP2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.NumbP>_R)) -}
127aba05e55d3ac81adfc46bb6f76025
  $fReadNumbP_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.NumbP
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.NumbP
                   XBarType.$fReadNumbP_$creadPrec
                   eta) -}
127aba05e55d3ac81adfc46bb6f76025
  $fReadNumbP_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.NumbP]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.NumbP]
                   ((XBarType.$fReadNumbP_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.NumbP]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.NumbP]>_R)
                      @ [XBarType.NumbP]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.NumbP]))) -}
695205acf366e6b22a917b33df082656
  $fReadNumb_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.Numb]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadNumb1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.Numb]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.Numb]>_R))) -}
695205acf366e6b22a917b33df082656
  $fReadNumb_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.Numb
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadNumb2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.Numb>_R)) -}
695205acf366e6b22a917b33df082656
  $fReadNumb_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.Numb
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.Numb
                   XBarType.$fReadNumb_$creadPrec
                   eta) -}
695205acf366e6b22a917b33df082656
  $fReadNumb_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.Numb]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.Numb]
                   ((XBarType.$fReadNumb_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.Numb]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.Numb]>_R)
                      @ [XBarType.Numb]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.Numb]))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadOptional ::
    GHC.Read.Read a => GHC.Read.Read (XBarType.Optional a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a26 $dRead :: GHC.Read.Read a26.
                  @ (XBarType.Optional a26)
                  (XBarType.$fReadOptional_$creadsPrec @ a26 $dRead)
                  (XBarType.$fReadOptional_$creadList @ a26 $dRead)
                  (XBarType.$fReadOptional_$creadPrec @ a26 $dRead)
                  (XBarType.$fReadOptional_$creadListPrec @ a26 $dRead) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadOptional1 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.Optional a] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a26
                   $dRead :: GHC.Read.Read a26
                   eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.Optional a26]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (XBarType.Optional a26)
                   (XBarType.$fReadAgrOBar14 @ a26 $dRead)
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.Optional a26>_R))
                   @ b
                   eta1) -}
02f13def2af5bf75c6420e855b7ad1b1
  $fReadOptional11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.PrepP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.PrepP -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa42 ww1 @ b w1 }) -}
a2d63afd402aa260694c9bd2b1a84669
  $fReadOptional6 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.AdvP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.AdvP -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa41 ww1 @ b w1 }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadOptional_$creadList ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadP.ReadS [XBarType.Optional a]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a26 $dRead :: GHC.Read.Read a26 ->
                 Text.ParserCombinators.ReadP.run
                   @ [XBarType.Optional a26]
                   (GHC.Read.$wa
                      @ (XBarType.Optional a26)
                      (XBarType.$fReadAgrOBar14 @ a26 $dRead)
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                <XBarType.Optional a26>_R))
                      @ [XBarType.Optional a26]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.Optional a26]))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadOptional_$creadListPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.Optional a]
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadOptional1
                  `cast`
                (forall a26.
                 <GHC.Read.Read a26>_R
                 ->_R Trans
                          (<Text.ParserCombinators.ReadPrec.Prec>_R
                           ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                         <[XBarType.Optional a26]>_R))
                          (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                    <[XBarType.Optional a26]>_R))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadOptional_$creadPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec (XBarType.Optional a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAgrOBar14
                  `cast`
                (forall a26.
                 <GHC.Read.Read a26>_R
                 ->_R Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <XBarType.Optional a26>_R)) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadOptional_$creadsPrec ::
    GHC.Read.Read a =>
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS (XBarType.Optional a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a26 $dRead :: GHC.Read.Read a26 eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (XBarType.Optional a26)
                   ((XBarType.$fReadAgrOBar14 @ a26 $dRead eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <XBarType.Optional a26>_R)
                      @ (XBarType.Optional a26)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (XBarType.Optional a26)))) -}
da7569991f48fe4331abea09634b3bf0
  $fReadPrep :: GHC.Read.Read XBarType.Prep
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Prep
                  XBarType.$fReadPrep_$s$dmreadsPrec
                  XBarType.$fReadPrep_$sreadListDefault
                  XBarType.$fReadPrep_$creadPrec
                  XBarType.$fReadPrep_$creadListPrec -}
da7569991f48fe4331abea09634b3bf0
  $fReadPrep1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.Prep] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.Prep] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.Prep
                   XBarType.$fReadPrep2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.Prep>_R))
                   @ b
                   eta1) -}
da7569991f48fe4331abea09634b3bf0
  $fReadPrep2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.Prep
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.Prep
                   XBarType.$fReadPrep3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.Prep>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.Prep>_R)))) -}
da7569991f48fe4331abea09634b3bf0
  $fReadPrep3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.Prep -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.Prep -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa43 ww1 @ b w1 }) -}
f9b2558a9112522307bb4c1965130359
  $fReadPrep4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Prep"#) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadPrepBar :: GHC.Read.Read XBarType.PrepBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.PrepBar
                  XBarType.$fReadPrepBar_$creadsPrec
                  XBarType.$fReadPrepBar_$sreadListDefault
                  XBarType.$fReadPrepBar_$creadPrec
                  XBarType.$fReadPrepBar_$creadListPrec -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadPrepBar1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.PrepBar] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.PrepBar] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.PrepBar
                   XBarType.$fReadPrepBar2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.PrepBar>_R))
                   @ b
                   eta1) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadPrepBar2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.PrepBar
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.PrepBar
                   XBarType.$fReadPrepBar3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.PrepBar>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.PrepBar>_R)))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadPrepBar3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.PrepBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.PrepBar -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa44 ww1 @ b w1 }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadPrepBar_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.PrepBar]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadPrepBar1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.PrepBar]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.PrepBar]>_R))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadPrepBar_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.PrepBar
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadPrepBar2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.PrepBar>_R)) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadPrepBar_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS XBarType.PrepBar
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.PrepBar
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.PrepBar
                       XBarType.$fReadPrepBar3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.PrepBar>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.PrepBar>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.PrepBar>_R)
                      @ XBarType.PrepBar
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.PrepBar))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadPrepBar_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.PrepBar]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.PrepBar]
                   ((XBarType.$fReadPrepBar_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.PrepBar]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.PrepBar]>_R)
                      @ [XBarType.PrepBar]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.PrepBar]))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadPrepP :: GHC.Read.Read XBarType.PrepP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.PrepP
                  XBarType.$fReadPrepP_$creadsPrec
                  XBarType.$fReadPrepP_$creadList
                  XBarType.$fReadPrepP_$creadPrec
                  XBarType.$fReadPrepP_$creadListPrec -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadPrepP1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.PrepP] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: [XBarType.PrepP] -> Text.ParserCombinators.ReadP.P b ->
                 XBarType.$wa45 @ b w1) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadPrepP2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.PrepP
  {- Arity: 1 -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadPrepP_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.PrepP]
  {- Arity: 1 -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadPrepP_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.PrepP]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadPrepP1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.PrepP]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.PrepP]>_R))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadPrepP_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.PrepP
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadPrepP2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.PrepP>_R)) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fReadPrepP_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.PrepP
  {- Arity: 1, Strictness: <L,U> -}
da7569991f48fe4331abea09634b3bf0
  $fReadPrep_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.Prep]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadPrep1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.Prep]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.Prep]>_R))) -}
da7569991f48fe4331abea09634b3bf0
  $fReadPrep_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.Prep
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadPrep2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.Prep>_R)) -}
da7569991f48fe4331abea09634b3bf0
  $fReadPrep_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.Prep
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.Prep
                   XBarType.$fReadPrep_$creadPrec
                   eta) -}
da7569991f48fe4331abea09634b3bf0
  $fReadPrep_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.Prep]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.Prep]
                   ((XBarType.$fReadPrep_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.Prep]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.Prep]>_R)
                      @ [XBarType.Prep]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.Prep]))) -}
dbe1f7fbbcbd7e5405e096305eab9650
  $fReadTense :: GHC.Read.Read XBarType.Tense
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Tense
                  XBarType.$fReadTense_$s$dmreadsPrec
                  XBarType.$fReadTense_$sreadListDefault
                  XBarType.$fReadTense_$creadPrec
                  XBarType.$fReadTense_$creadListPrec -}
dbe1f7fbbcbd7e5405e096305eab9650
  $fReadTense1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.Tense] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.Tense] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.Tense
                   XBarType.$fReadTense2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.Tense>_R))
                   @ b
                   eta1) -}
dbe1f7fbbcbd7e5405e096305eab9650
  $fReadTense2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.Tense
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.Tense
                   XBarType.$fReadAgrOBar29
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.Tense>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.Tense>_R)))) -}
15c160cf605dad7956843e2676134150
  $fReadTenseBar :: GHC.Read.Read XBarType.TenseBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.TenseBar
                  XBarType.$fReadTenseBar_$creadsPrec
                  XBarType.$fReadTenseBar_$sreadListDefault
                  XBarType.$fReadTenseBar_$creadPrec
                  XBarType.$fReadTenseBar_$creadListPrec -}
15c160cf605dad7956843e2676134150
  $fReadTenseBar1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.TenseBar] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.TenseBar] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.TenseBar
                   XBarType.$fReadTenseBar2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.TenseBar>_R))
                   @ b
                   eta1) -}
15c160cf605dad7956843e2676134150
  $fReadTenseBar2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.TenseBar
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.TenseBar
                   XBarType.$fReadAgrOBar18
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.TenseBar>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.TenseBar>_R)))) -}
15c160cf605dad7956843e2676134150
  $fReadTenseBar_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.TenseBar]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadTenseBar1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.TenseBar]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.TenseBar]>_R))) -}
15c160cf605dad7956843e2676134150
  $fReadTenseBar_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.TenseBar
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadTenseBar2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.TenseBar>_R)) -}
15c160cf605dad7956843e2676134150
  $fReadTenseBar_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS XBarType.TenseBar
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.TenseBar
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.TenseBar
                       XBarType.$fReadAgrOBar18
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.TenseBar>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.TenseBar>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.TenseBar>_R)
                      @ XBarType.TenseBar
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.TenseBar))) -}
15c160cf605dad7956843e2676134150
  $fReadTenseBar_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.TenseBar]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.TenseBar]
                   ((XBarType.$fReadTenseBar_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.TenseBar]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[XBarType.TenseBar]>_R)
                      @ [XBarType.TenseBar]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.TenseBar]))) -}
15c160cf605dad7956843e2676134150
  $fReadTenseP :: GHC.Read.Read XBarType.TenseP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.TenseP
                  XBarType.$fReadTenseP_$creadsPrec
                  XBarType.$fReadTenseP_$sreadListDefault
                  XBarType.$fReadTenseP_$creadPrec
                  XBarType.$fReadTenseP_$creadListPrec -}
15c160cf605dad7956843e2676134150
  $fReadTenseP1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.TenseP] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.TenseP] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.TenseP
                   XBarType.$fReadTenseP2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.TenseP>_R))
                   @ b
                   eta1) -}
15c160cf605dad7956843e2676134150
  $fReadTenseP2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.TenseP
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.TenseP
                   XBarType.$fReadAgrOBar5
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.TenseP>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.TenseP>_R)))) -}
15c160cf605dad7956843e2676134150
  $fReadTenseP_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.TenseP]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadTenseP1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.TenseP]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.TenseP]>_R))) -}
15c160cf605dad7956843e2676134150
  $fReadTenseP_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.TenseP
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadTenseP2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.TenseP>_R)) -}
15c160cf605dad7956843e2676134150
  $fReadTenseP_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.TenseP
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.TenseP
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.TenseP
                       XBarType.$fReadAgrOBar5
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.TenseP>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.TenseP>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.TenseP>_R)
                      @ XBarType.TenseP
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.TenseP))) -}
15c160cf605dad7956843e2676134150
  $fReadTenseP_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.TenseP]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.TenseP]
                   ((XBarType.$fReadTenseP_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.TenseP]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.TenseP]>_R)
                      @ [XBarType.TenseP]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.TenseP]))) -}
dbe1f7fbbcbd7e5405e096305eab9650
  $fReadTense_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.Tense]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadTense1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.Tense]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.Tense]>_R))) -}
dbe1f7fbbcbd7e5405e096305eab9650
  $fReadTense_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.Tense
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadTense2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.Tense>_R)) -}
dbe1f7fbbcbd7e5405e096305eab9650
  $fReadTense_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.Tense
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.Tense
                   XBarType.$fReadTense_$creadPrec
                   eta) -}
dbe1f7fbbcbd7e5405e096305eab9650
  $fReadTense_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.Tense]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.Tense]
                   ((XBarType.$fReadTense_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.Tense]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.Tense]>_R)
                      @ [XBarType.Tense]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.Tense]))) -}
bda0d8a64645987400c6ad89735d7e9d
  $fReadVerb :: GHC.Read.Read XBarType.Verb
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Verb
                  XBarType.$fReadVerb_$s$dmreadsPrec
                  XBarType.$fReadVerb_$sreadListDefault
                  XBarType.$fReadVerb_$creadPrec
                  XBarType.$fReadVerb_$creadListPrec -}
bda0d8a64645987400c6ad89735d7e9d
  $fReadVerb1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.Verb] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.Verb] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.Verb
                   XBarType.$fReadVerb2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.Verb>_R))
                   @ b
                   eta1) -}
bda0d8a64645987400c6ad89735d7e9d
  $fReadVerb2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.Verb
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.Verb
                   XBarType.$fReadVerb3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.Verb>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.Verb>_R)))) -}
bda0d8a64645987400c6ad89735d7e9d
  $fReadVerb3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.Verb -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.Verb -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa46 ww1 @ b w1 }) -}
fcc613ca433face331f06bcb66eacb92
  $fReadVerb4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Verb"#) -}
15c160cf605dad7956843e2676134150
  $fReadVerbBar :: GHC.Read.Read XBarType.VerbBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.VerbBar
                  XBarType.$fReadVerbBar_$creadsPrec
                  XBarType.$fReadVerbBar_$sreadListDefault
                  XBarType.$fReadVerbBar_$creadPrec
                  XBarType.$fReadVerbBar_$creadListPrec -}
15c160cf605dad7956843e2676134150
  $fReadVerbBar1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.VerbBar] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.VerbBar] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.VerbBar
                   XBarType.$fReadVerbBar2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.VerbBar>_R))
                   @ b
                   eta1) -}
15c160cf605dad7956843e2676134150
  $fReadVerbBar2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.VerbBar
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.VerbBar
                   XBarType.$fReadAgrOBar26
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.VerbBar>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.VerbBar>_R)))) -}
15c160cf605dad7956843e2676134150
  $fReadVerbBar_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.VerbBar]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadVerbBar1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.VerbBar]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.VerbBar]>_R))) -}
15c160cf605dad7956843e2676134150
  $fReadVerbBar_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.VerbBar
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadVerbBar2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.VerbBar>_R)) -}
15c160cf605dad7956843e2676134150
  $fReadVerbBar_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS XBarType.VerbBar
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.VerbBar
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.VerbBar
                       XBarType.$fReadAgrOBar26
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.VerbBar>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.VerbBar>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.VerbBar>_R)
                      @ XBarType.VerbBar
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.VerbBar))) -}
15c160cf605dad7956843e2676134150
  $fReadVerbBar_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.VerbBar]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.VerbBar]
                   ((XBarType.$fReadVerbBar_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.VerbBar]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.VerbBar]>_R)
                      @ [XBarType.VerbBar]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.VerbBar]))) -}
15c160cf605dad7956843e2676134150
  $fReadVerbP :: GHC.Read.Read XBarType.VerbP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.VerbP
                  XBarType.$fReadVerbP_$creadsPrec
                  XBarType.$fReadVerbP_$sreadListDefault
                  XBarType.$fReadVerbP_$creadPrec
                  XBarType.$fReadVerbP_$creadListPrec -}
15c160cf605dad7956843e2676134150
  $fReadVerbP1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.VerbP] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.VerbP] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.VerbP
                   XBarType.$fReadVerbP2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.VerbP>_R))
                   @ b
                   eta1) -}
15c160cf605dad7956843e2676134150
  $fReadVerbP2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.VerbP
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.VerbP
                   XBarType.$fReadAgrOBar24
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.VerbP>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.VerbP>_R)))) -}
15c160cf605dad7956843e2676134150
  $fReadVerbP_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.VerbP]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadVerbP1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.VerbP]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.VerbP]>_R))) -}
15c160cf605dad7956843e2676134150
  $fReadVerbP_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.VerbP
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadVerbP2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.VerbP>_R)) -}
15c160cf605dad7956843e2676134150
  $fReadVerbP_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.VerbP
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.VerbP
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.VerbP
                       XBarType.$fReadAgrOBar24
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.VerbP>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.VerbP>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.VerbP>_R)
                      @ XBarType.VerbP
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.VerbP))) -}
15c160cf605dad7956843e2676134150
  $fReadVerbP_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.VerbP]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.VerbP]
                   ((XBarType.$fReadVerbP_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.VerbP]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.VerbP]>_R)
                      @ [XBarType.VerbP]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.VerbP]))) -}
bda0d8a64645987400c6ad89735d7e9d
  $fReadVerb_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.Verb]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadVerb1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.Verb]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.Verb]>_R))) -}
bda0d8a64645987400c6ad89735d7e9d
  $fReadVerb_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.Verb
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadVerb2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.Verb>_R)) -}
bda0d8a64645987400c6ad89735d7e9d
  $fReadVerb_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.Verb
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.Verb
                   XBarType.$fReadVerb_$creadPrec
                   eta) -}
bda0d8a64645987400c6ad89735d7e9d
  $fReadVerb_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.Verb]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.Verb]
                   ((XBarType.$fReadVerb_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.Verb]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.Verb]>_R)
                      @ [XBarType.Verb]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.Verb]))) -}
b930bb16c92db62a8ecc6836bda6646d
  $fShowAdj :: GHC.Show.Show XBarType.Adj
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Adj
                  XBarType.$fShowAdj_$cshowsPrec
                  XBarType.$fShowAdj_$cshow
                  XBarType.$fShowAdj_$cshowList -}
b930bb16c92db62a8ecc6836bda6646d
  $fShowAdj1 :: XBarType.Adj -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.Adj w1 :: GHC.Base.String ->
                 case w of ww { XBarType.Adj ww1 ->
                 XBarType.$w$cshowsPrec 0 ww1 w1 }) -}
6bd86c18fe087ce3ad8499c6e75cfe8a
  $fShowAdj2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adj "#) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowAdjBar :: GHC.Show.Show XBarType.AdjBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AdjBar
                  XBarType.$fShowAdjBar_$cshowsPrec
                  XBarType.$fShowAdjBar_$cshow
                  XBarType.$fShowAdjBar_$cshowList -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowAdjBar1 :: XBarType.AdjBar -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.AdjBar ->
                 XBarType.$w$cshowsPrec1 0 w) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowAdjBar_$cshow :: XBarType.AdjBar -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.AdjBar ->
                 XBarType.$fShowAdjBar_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowAdjBar_$cshowList :: [XBarType.AdjBar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.AdjBar
                   XBarType.$fShowAdjBar1) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowAdjBar_$cshowsPrec ::
    GHC.Types.Int -> XBarType.AdjBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.AdjBar ->
                 case w of ww { GHC.Types.I# ww1 ->
                 XBarType.$w$cshowsPrec1 ww1 w1 }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowAdjP :: GHC.Show.Show XBarType.AdjP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AdjP
                  XBarType.$fShowAdjP_$cshowsPrec
                  XBarType.$fShowAdjP_$cshow
                  XBarType.$fShowAdjP_$cshowList -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowAdjP1 :: XBarType.AdjP -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.AdjP ->
                 case w of ww { XBarType.AdjP ww1 ->
                 XBarType.$w$cshowsPrec2 0 ww1 }) -}
9a6701e1bde1ef8c9066ebc2f1f0cf56
  $fShowAdjP2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AdjP "#) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowAdjP_$cshow :: XBarType.AdjP -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.AdjP ->
                 case x of wild { XBarType.AdjP b1 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n XBarType.$fShowAdjP2)
                   (XBarType.$fShowAdjBar_$cshowsPrec
                      XBarType.$fReadAdjP5
                      b1
                      (GHC.Types.[] @ GHC.Types.Char)) }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowAdjP_$cshowList :: [XBarType.AdjP] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.AdjP
                   XBarType.$fShowAdjP1) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowAdjP_$cshowsPrec ::
    GHC.Types.Int -> XBarType.AdjP -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.AdjP ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.AdjP ww3 ->
                 XBarType.$w$cshowsPrec2 ww1 ww3 } }) -}
b930bb16c92db62a8ecc6836bda6646d
  $fShowAdj_$cshow :: XBarType.Adj -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.Adj ->
                 XBarType.$fShowAdj_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b930bb16c92db62a8ecc6836bda6646d
  $fShowAdj_$cshowList :: [XBarType.Adj] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.Adj
                   XBarType.$fShowAdj1) -}
b930bb16c92db62a8ecc6836bda6646d
  $fShowAdj_$cshowsPrec ::
    GHC.Types.Int -> XBarType.Adj -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.Adj w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.Adj ww3 ->
                 XBarType.$w$cshowsPrec ww1 ww3 w2 } }) -}
abc87d81459d612929b421018965d66d
  $fShowAdv :: GHC.Show.Show XBarType.Adv
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Adv
                  XBarType.$fShowAdv_$cshowsPrec
                  XBarType.$fShowAdv_$cshow
                  XBarType.$fShowAdv_$cshowList -}
abc87d81459d612929b421018965d66d
  $fShowAdv1 :: XBarType.Adv -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.Adv w1 :: GHC.Base.String ->
                 case w of ww { XBarType.Adv ww1 ->
                 XBarType.$w$cshowsPrec3 0 ww1 w1 }) -}
f4207db6f177bc672e7bcd1f41d4bbbb
  $fShowAdv2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adv "#) -}
aa3898ead2316a60824e4128d8112d4f
  $fShowAdvBar :: GHC.Show.Show XBarType.AdvBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AdvBar
                  XBarType.$fShowAdvBar_$cshowsPrec
                  XBarType.$fShowAdvBar_$cshow
                  XBarType.$fShowAdvBar_$cshowList -}
aa3898ead2316a60824e4128d8112d4f
  $fShowAdvBar1 :: XBarType.AdvBar -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.AdvBar w1 :: GHC.Base.String ->
                 case w of ww { XBarType.AdvBar ww1 ->
                 XBarType.$w$cshowsPrec4 0 ww1 w1 }) -}
b72222db291d1c6e6ce626dab08b3d54
  $fShowAdvBar2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AdvBar "#) -}
aa3898ead2316a60824e4128d8112d4f
  $fShowAdvBar_$cshow :: XBarType.AdvBar -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U))>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.AdvBar ->
                 XBarType.$fShowAdvBar_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
aa3898ead2316a60824e4128d8112d4f
  $fShowAdvBar_$cshowList :: [XBarType.AdvBar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.AdvBar
                   XBarType.$fShowAdvBar1) -}
aa3898ead2316a60824e4128d8112d4f
  $fShowAdvBar_$cshowsPrec ::
    GHC.Types.Int -> XBarType.AdvBar -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U(1*U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: XBarType.AdvBar
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.AdvBar ww3 ->
                 XBarType.$w$cshowsPrec4 ww1 ww3 w2 } }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowAdvP :: GHC.Show.Show XBarType.AdvP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AdvP
                  XBarType.$fShowAdvP_$cshowsPrec
                  XBarType.$fShowAdvP_$cshow
                  XBarType.$fShowAdvP_$cshowList -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowAdvP1 :: XBarType.AdvP -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.AdvP ->
                 case w of ww { XBarType.AdvP ww1 ww2 ->
                 XBarType.$w$cshowsPrec5 0 ww1 ww2 }) -}
7323f3437abbec30023db9cf37a5ce8d
  $fShowAdvP2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AdvP "#) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowAdvP_$cshow :: XBarType.AdvP -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,U(U(U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.AdvP ->
                 XBarType.$fShowAdvP_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowAdvP_$cshowList :: [XBarType.AdvP] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.AdvP
                   XBarType.$fShowAdvP1) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowAdvP_$cshowsPrec ::
    GHC.Types.Int -> XBarType.AdvP -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U,U(U(U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.AdvP ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.AdvP ww3 ww4 ->
                 XBarType.$w$cshowsPrec5 ww1 ww3 ww4 } }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowAdvP_$s$cshowsPrec ::
    GHC.Types.Int -> XBarType.Optional XBarType.AdvP -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
abc87d81459d612929b421018965d66d
  $fShowAdv_$cshow :: XBarType.Adv -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.Adv ->
                 XBarType.$fShowAdv_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
abc87d81459d612929b421018965d66d
  $fShowAdv_$cshowList :: [XBarType.Adv] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.Adv
                   XBarType.$fShowAdv1) -}
abc87d81459d612929b421018965d66d
  $fShowAdv_$cshowsPrec ::
    GHC.Types.Int -> XBarType.Adv -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.Adv w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.Adv ww3 ->
                 XBarType.$w$cshowsPrec3 ww1 ww3 w2 } }) -}
470a8d576531504529865b40f33fb438
  $fShowAgrO :: GHC.Show.Show XBarType.AgrO
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AgrO
                  XBarType.$fShowAgrO_$cshowsPrec
                  XBarType.$fShowAgrO_$cshow
                  XBarType.$fShowAgrO_$cshowList -}
470a8d576531504529865b40f33fb438
  $fShowAgrO1 :: XBarType.AgrO -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.AgrO w1 :: GHC.Base.String ->
                 case w of ww { XBarType.AgrO ww1 ->
                 XBarType.$w$cshowsPrec6 0 ww1 w1 }) -}
0f21d46ff9e39ade8878d42cff85ab96
  $fShowAgrO2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AgrO "#) -}
65bfbcd54eddeb9f45ca13209bfbf0f7
  $fShowAgrOBar :: GHC.Show.Show XBarType.AgrOBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AgrOBar
                  XBarType.$fShowAgrOBar_$cshowsPrec
                  XBarType.$fShowAgrOBar_$cshow
                  XBarType.$fShowAgrOBar_$cshowList -}
65bfbcd54eddeb9f45ca13209bfbf0f7
  $fShowAgrOBar1 :: XBarType.AgrOBar -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.AgrOBar ->
                 case w of ww { XBarType.AgrOBar ww1 ww2 ->
                 XBarType.$w$cshowsPrec7 0 ww1 ww2 }) -}
6d2a58f3c409da82f35006b077fc4061
  $fShowAgrOBar10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DetBar "#) -}
34e784566046f5ed6dda0871e4e0ea67
  $fShowAgrOBar11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NounP "#) -}
a663f9b13fbf97c5b44824b9f11f2137
  $fShowAgrOBar12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TenseP1 "#) -}
167b70dc064c4ea6294be4203b0f50ed
  $fShowAgrOBar13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Tense "#) -}
d666e1a618f31034d6e0450e8e034a85
  $fShowAgrOBar14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TenseBar "#) -}
cde7ebe7d435411328303a903d00869f
  $fShowAgrOBar15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AgrSP "#) -}
c08a31c93eab3e53e2bb8002b0225d2f
  $fShowAgrOBar16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AgrS "#) -}
c1610a24c0184c1db99558e4970b8b10
  $fShowAgrOBar17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AgrSBar "#) -}
df58e40bd877399e677736e9627cf56e
  $fShowAgrOBar18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VerbP "#) -}
aac2cfa8eb655a7f958746b71265e58a
  $fShowAgrOBar2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AgrOBar "#) -}
f5b62b76652bad7dc504311472e49784
  $fShowAgrOBar3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TenseP2 "#) -}
e7a13443e423de890f943a7266cd25cc
  $fShowAgrOBar4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ConjP "#) -}
1f17bc537cdb5f6fb98652d91e18373b
  $fShowAgrOBar5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Conj "#) -}
91b8fe2d1cd0f72030cd0716acf8fcc5
  $fShowAgrOBar6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ConjBar "#) -}
7f7d05265c9cd0b8650e69c35be8269d
  $fShowAgrOBar7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DetP "#) -}
c80cd1770a29d68ce2de7934aa73a98e
  $fShowAgrOBar8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Det "#) -}
3ee1bbd5c760bd3887c77423b46c7f2b
  $fShowAgrOBar9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "YesOpt "#) -}
65bfbcd54eddeb9f45ca13209bfbf0f7
  $fShowAgrOBar_$cshow :: XBarType.AgrOBar -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U),1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: XBarType.AgrOBar ->
                 case w of ww { XBarType.AgrOBar ww1 ww2 ->
                 XBarType.$w$cshow ww1 ww2 }) -}
65bfbcd54eddeb9f45ca13209bfbf0f7
  $fShowAgrOBar_$cshowList :: [XBarType.AgrOBar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.AgrOBar
                   XBarType.$fShowAgrOBar1) -}
65bfbcd54eddeb9f45ca13209bfbf0f7
  $fShowAgrOBar_$cshowsPrec ::
    GHC.Types.Int -> XBarType.AgrOBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(U(U),1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.AgrOBar ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.AgrOBar ww3 ww4 ->
                 XBarType.$w$cshowsPrec7 ww1 ww3 ww4 } }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowAgrOBar_$s$cshowsPrec ::
    GHC.Types.Int -> XBarType.Optional XBarType.Det -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ a26 :: GHC.Types.Int
                   ds :: XBarType.Optional XBarType.Det
                   eta :: GHC.Base.String ->
                 case ds of wild {
                   XBarType.YesOpt b1
                   -> case a26 of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             XBarType.$fShowAgrOBar9
                             (case b1 of ww { XBarType.Det ww1 ->
                              XBarType.$w$cshowsPrec14 11 ww1 eta })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                XBarType.$fShowAgrOBar9
                                (case b1 of ww { XBarType.Det ww1 ->
                                 XBarType.$w$cshowsPrec14
                                   11
                                   ww1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta) })) } }
                   XBarType.NoOpt
                   -> GHC.Base.++ @ GHC.Types.Char XBarType.$fReadAgrOBar16 eta }) -}
77dd7bb417604cc4fd199b560583a9aa
  $fShowAgrOP :: GHC.Show.Show XBarType.AgrOP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AgrOP
                  XBarType.$fShowAgrOP_$cshowsPrec
                  XBarType.$fShowAgrOP_$cshow
                  XBarType.$fShowAgrOP_$cshowList -}
77dd7bb417604cc4fd199b560583a9aa
  $fShowAgrOP1 :: XBarType.AgrOP -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.AgrOP ->
                 case w of ww { XBarType.AgrOP ww1 ->
                 XBarType.$w$cshowsPrec24 0 ww1 }) -}
da2b92b1f2c232729cc7e2960036a178
  $fShowAgrOP2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AgrOP "#) -}
e9f814cc9369b19210ddf7d69b5b7f41
  $fShowAgrOP3 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows8
                   (GHC.Types.[] @ GHC.Types.Char)) -}
77dd7bb417604cc4fd199b560583a9aa
  $fShowAgrOP_$cshow :: XBarType.AgrOP -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U(1*U),1*U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: XBarType.AgrOP ->
                 case w of ww { XBarType.AgrOP ww1 -> XBarType.$w$cshow1 ww1 }) -}
77dd7bb417604cc4fd199b560583a9aa
  $fShowAgrOP_$cshowList :: [XBarType.AgrOP] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.AgrOP
                   XBarType.$fShowAgrOP1) -}
77dd7bb417604cc4fd199b560583a9aa
  $fShowAgrOP_$cshowsPrec ::
    GHC.Types.Int -> XBarType.AgrOP -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U(U(U),1*U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.AgrOP ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.AgrOP ww3 ->
                 XBarType.$w$cshowsPrec24 ww1 ww3 } }) -}
470a8d576531504529865b40f33fb438
  $fShowAgrO_$cshow :: XBarType.AgrO -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.AgrO ->
                 XBarType.$fShowAgrO_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
470a8d576531504529865b40f33fb438
  $fShowAgrO_$cshowList :: [XBarType.AgrO] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.AgrO
                   XBarType.$fShowAgrO1) -}
470a8d576531504529865b40f33fb438
  $fShowAgrO_$cshowsPrec ::
    GHC.Types.Int -> XBarType.AgrO -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.AgrO w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.AgrO ww3 ->
                 XBarType.$w$cshowsPrec6 ww1 ww3 w2 } }) -}
e5c143190278a168e5d7b403f455abe4
  $fShowAgrS :: GHC.Show.Show XBarType.AgrS
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AgrS
                  XBarType.$fShowAgrS_$cshowsPrec
                  XBarType.$fShowAgrS_$cshow
                  XBarType.$fShowAgrS_$cshowList -}
e5c143190278a168e5d7b403f455abe4
  $fShowAgrS1 :: XBarType.AgrS -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.AgrS w1 :: GHC.Base.String ->
                 case w of ww { XBarType.AgrS ww1 ->
                 XBarType.$w$cshowsPrec21 0 ww1 w1 }) -}
15c160cf605dad7956843e2676134150
  $fShowAgrSBar :: GHC.Show.Show XBarType.AgrSBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AgrSBar
                  XBarType.$fShowAgrSBar_$cshowsPrec
                  XBarType.$fShowAgrSBar_$cshow
                  XBarType.$fShowAgrSBar_$cshowList -}
15c160cf605dad7956843e2676134150
  $fShowAgrSBar1 :: XBarType.AgrSBar -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.AgrSBar ->
                 case w of ww { XBarType.AgrSBar ww1 ww2 ->
                 XBarType.$w$cshowsPrec20 0 ww1 ww2 }) -}
15c160cf605dad7956843e2676134150
  $fShowAgrSBar_$cshow :: XBarType.AgrSBar -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U),1*U(1*U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: XBarType.AgrSBar ->
                 case w of ww { XBarType.AgrSBar ww1 ww2 ->
                 XBarType.$w$cshow2 ww1 ww2 }) -}
15c160cf605dad7956843e2676134150
  $fShowAgrSBar_$cshowList :: [XBarType.AgrSBar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.AgrSBar
                   XBarType.$fShowAgrSBar1) -}
15c160cf605dad7956843e2676134150
  $fShowAgrSBar_$cshowsPrec ::
    GHC.Types.Int -> XBarType.AgrSBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(U(U),1*U(1*U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.AgrSBar ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.AgrSBar ww3 ww4 ->
                 XBarType.$w$cshowsPrec20 ww1 ww3 ww4 } }) -}
15c160cf605dad7956843e2676134150
  $fShowAgrSP :: GHC.Show.Show XBarType.AgrSP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AgrSP
                  XBarType.$fShowAgrSP_$cshowsPrec
                  XBarType.$fShowAgrSP_$cshow
                  XBarType.$fShowAgrSP_$cshowList -}
15c160cf605dad7956843e2676134150
  $fShowAgrSP1 :: XBarType.AgrSP -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.AgrSP ->
                 case w of ww { XBarType.AgrSP ww1 ->
                 XBarType.$w$cshowsPrec19 0 ww1 }) -}
77f0c97e1286392b63b86c43b698fdb6
  $fShowAgrSP2 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows8
                   XBarType.$fShowAgrOP3) -}
15c160cf605dad7956843e2676134150
  $fShowAgrSP_$cshow :: XBarType.AgrSP -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U(1*U),1*U(1*U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: XBarType.AgrSP ->
                 case w of ww { XBarType.AgrSP ww1 -> XBarType.$w$cshow3 ww1 }) -}
15c160cf605dad7956843e2676134150
  $fShowAgrSP_$cshowList :: [XBarType.AgrSP] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.AgrSP
                   XBarType.$fShowAgrSP1) -}
15c160cf605dad7956843e2676134150
  $fShowAgrSP_$cshowsPrec ::
    GHC.Types.Int -> XBarType.AgrSP -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U(U(U),1*U(1*U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.AgrSP ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.AgrSP ww3 ->
                 XBarType.$w$cshowsPrec19 ww1 ww3 } }) -}
e5c143190278a168e5d7b403f455abe4
  $fShowAgrS_$cshow :: XBarType.AgrS -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.AgrS ->
                 XBarType.$fShowAgrS_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e5c143190278a168e5d7b403f455abe4
  $fShowAgrS_$cshowList :: [XBarType.AgrS] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.AgrS
                   XBarType.$fShowAgrS1) -}
e5c143190278a168e5d7b403f455abe4
  $fShowAgrS_$cshowsPrec ::
    GHC.Types.Int -> XBarType.AgrS -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.AgrS w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.AgrS ww3 ->
                 XBarType.$w$cshowsPrec21 ww1 ww3 w2 } }) -}
2a8672ce933713dceedcfab30827e623
  $fShowAsp :: GHC.Show.Show XBarType.Asp
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Asp
                  XBarType.$fShowAsp_$cshowsPrec
                  XBarType.$fShowAsp_$cshow
                  XBarType.$fShowAsp_$cshowList -}
2a8672ce933713dceedcfab30827e623
  $fShowAsp1 :: XBarType.Asp -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.Asp w1 :: GHC.Base.String ->
                 case w of ww { XBarType.Asp ww1 ->
                 XBarType.$w$cshowsPrec25 0 ww1 w1 }) -}
6257c81a5a1b6d7528268e3f49707136
  $fShowAsp2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Asp "#) -}
5e82d79669633004faebf6fbe6f002ac
  $fShowAspBar :: GHC.Show.Show XBarType.AspBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AspBar
                  XBarType.$fShowAspBar_$cshowsPrec
                  XBarType.$fShowAspBar_$cshow
                  XBarType.$fShowAspBar_$cshowList -}
5e82d79669633004faebf6fbe6f002ac
  $fShowAspBar1 :: XBarType.AspBar -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.AspBar w1 :: GHC.Base.String ->
                 case w of ww { XBarType.AspBar ww1 ->
                 XBarType.$w$cshowsPrec26 0 ww1 w1 }) -}
beaa8bed7940b4df84297dcbb9222d55
  $fShowAspBar2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AspBar "#) -}
5e82d79669633004faebf6fbe6f002ac
  $fShowAspBar_$cshow :: XBarType.AspBar -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U))>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.AspBar ->
                 XBarType.$fShowAspBar_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5e82d79669633004faebf6fbe6f002ac
  $fShowAspBar_$cshowList :: [XBarType.AspBar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.AspBar
                   XBarType.$fShowAspBar1) -}
5e82d79669633004faebf6fbe6f002ac
  $fShowAspBar_$cshowsPrec ::
    GHC.Types.Int -> XBarType.AspBar -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U(1*U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: XBarType.AspBar
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.AspBar ww3 ->
                 XBarType.$w$cshowsPrec26 ww1 ww3 w2 } }) -}
cd6a16dda20202540a1ad83240fd2349
  $fShowAspP :: GHC.Show.Show XBarType.AspP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AspP
                  XBarType.$fShowAspP_$cshowsPrec
                  XBarType.$fShowAspP_$cshow
                  XBarType.$fShowAspP_$cshowList -}
cd6a16dda20202540a1ad83240fd2349
  $fShowAspP1 :: XBarType.AspP -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.AspP w1 :: GHC.Base.String ->
                 case w of ww { XBarType.AspP ww1 ->
                 XBarType.$w$cshowsPrec27 0 ww1 w1 }) -}
622b8dc4462d3f16b1a54f7b41544d55
  $fShowAspP2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AspP "#) -}
cd6a16dda20202540a1ad83240fd2349
  $fShowAspP_$cshow :: XBarType.AspP -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U(1*U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.AspP ->
                 XBarType.$fShowAspP_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cd6a16dda20202540a1ad83240fd2349
  $fShowAspP_$cshowList :: [XBarType.AspP] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.AspP
                   XBarType.$fShowAspP1) -}
cd6a16dda20202540a1ad83240fd2349
  $fShowAspP_$cshowsPrec ::
    GHC.Types.Int -> XBarType.AspP -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U(1*U(1*U)))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.AspP w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.AspP ww3 ->
                 XBarType.$w$cshowsPrec27 ww1 ww3 w2 } }) -}
2a8672ce933713dceedcfab30827e623
  $fShowAsp_$cshow :: XBarType.Asp -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.Asp ->
                 XBarType.$fShowAsp_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2a8672ce933713dceedcfab30827e623
  $fShowAsp_$cshowList :: [XBarType.Asp] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.Asp
                   XBarType.$fShowAsp1) -}
2a8672ce933713dceedcfab30827e623
  $fShowAsp_$cshowsPrec ::
    GHC.Types.Int -> XBarType.Asp -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.Asp w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.Asp ww3 ->
                 XBarType.$w$cshowsPrec25 ww1 ww3 w2 } }) -}
40db9cbd83f7d0605545d38cc1804a6c
  $fShowComp :: GHC.Show.Show XBarType.Comp
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Comp
                  XBarType.$fShowComp_$cshowsPrec
                  XBarType.$fShowComp_$cshow
                  XBarType.$fShowComp_$cshowList -}
40db9cbd83f7d0605545d38cc1804a6c
  $fShowComp1 :: XBarType.Comp -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.Comp w1 :: GHC.Base.String ->
                 case w of ww { XBarType.Comp ww1 ->
                 XBarType.$w$cshowsPrec28 0 ww1 w1 }) -}
41b7f83760288127cee9f6a3c36d4375
  $fShowComp2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Comp "#) -}
15c160cf605dad7956843e2676134150
  $fShowCompBar :: GHC.Show.Show XBarType.CompBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.CompBar
                  XBarType.$fShowCompBar_$cshowsPrec
                  XBarType.$fShowCompBar_$cshow
                  XBarType.$fShowCompBar_$cshowList -}
15c160cf605dad7956843e2676134150
  $fShowCompBar1 :: XBarType.CompBar -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.CompBar ->
                 case w of ww { XBarType.CompBar ww1 ww2 ->
                 XBarType.$w$cshowsPrec29 0 ww1 ww2 }) -}
a574b308219dd39d787eea847f475d12
  $fShowCompBar2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CompBar "#) -}
15c160cf605dad7956843e2676134150
  $fShowCompBar_$cshow :: XBarType.CompBar -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U),1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: XBarType.CompBar ->
                 case w of ww { XBarType.CompBar ww1 ww2 ->
                 XBarType.$w$cshow4 ww1 ww2 }) -}
15c160cf605dad7956843e2676134150
  $fShowCompBar_$cshowList :: [XBarType.CompBar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.CompBar
                   XBarType.$fShowCompBar1) -}
15c160cf605dad7956843e2676134150
  $fShowCompBar_$cshowsPrec ::
    GHC.Types.Int -> XBarType.CompBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(U(U),1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.CompBar ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.CompBar ww3 ww4 ->
                 XBarType.$w$cshowsPrec29 ww1 ww3 ww4 } }) -}
15c160cf605dad7956843e2676134150
  $fShowCompP :: GHC.Show.Show XBarType.CompP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.CompP
                  XBarType.$fShowCompP_$cshowsPrec
                  XBarType.$fShowCompP_$cshow
                  XBarType.$fShowCompP_$cshowList -}
15c160cf605dad7956843e2676134150
  $fShowCompP1 :: XBarType.CompP -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.CompP ->
                 case w of ww { XBarType.CompP ww1 ->
                 XBarType.$w$cshowsPrec30 0 ww1 }) -}
0971d1bd2792c77ee886bb73d52f30e6
  $fShowCompP2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CompP "#) -}
15c160cf605dad7956843e2676134150
  $fShowCompP_$cshow :: XBarType.CompP -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U(1*U),1*U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: XBarType.CompP ->
                 case w of ww { XBarType.CompP ww1 -> XBarType.$w$cshow5 ww1 }) -}
15c160cf605dad7956843e2676134150
  $fShowCompP_$cshowList :: [XBarType.CompP] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.CompP
                   XBarType.$fShowCompP1) -}
15c160cf605dad7956843e2676134150
  $fShowCompP_$cshowsPrec ::
    GHC.Types.Int -> XBarType.CompP -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U(U(U),1*U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.CompP ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.CompP ww3 ->
                 XBarType.$w$cshowsPrec30 ww1 ww3 } }) -}
40db9cbd83f7d0605545d38cc1804a6c
  $fShowComp_$cshow :: XBarType.Comp -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.Comp ->
                 XBarType.$fShowComp_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
40db9cbd83f7d0605545d38cc1804a6c
  $fShowComp_$cshowList :: [XBarType.Comp] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.Comp
                   XBarType.$fShowComp1) -}
40db9cbd83f7d0605545d38cc1804a6c
  $fShowComp_$cshowsPrec ::
    GHC.Types.Int -> XBarType.Comp -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.Comp w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.Comp ww3 ->
                 XBarType.$w$cshowsPrec28 ww1 ww3 w2 } }) -}
1e367eb957e5c67a50ccc7a9e3b8a502
  $fShowConj :: GHC.Show.Show XBarType.Conj
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Conj
                  XBarType.$fShowConj_$cshowsPrec
                  XBarType.$fShowConj_$cshow
                  XBarType.$fShowConj_$cshowList -}
1e367eb957e5c67a50ccc7a9e3b8a502
  $fShowConj1 :: XBarType.Conj -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.Conj w1 :: GHC.Base.String ->
                 case w of ww { XBarType.Conj ww1 ->
                 XBarType.$w$cshowsPrec11 0 ww1 w1 }) -}
f6d101cef8c7274cd3630645ec56b0bc
  $fShowConjBar :: GHC.Show.Show XBarType.ConjBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.ConjBar
                  XBarType.$fShowConjBar_$cshowsPrec
                  XBarType.$fShowConjBar_$cshow
                  XBarType.$fShowConjBar_$cshowList -}
f6d101cef8c7274cd3630645ec56b0bc
  $fShowConjBar1 :: XBarType.ConjBar -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.ConjBar ->
                 case w of ww { XBarType.ConjBar ww1 ww2 ->
                 XBarType.$w$cshowsPrec10 0 ww1 ww2 }) -}
93d86858a311925564ab0d93f2d42d34
  $fShowConjBar2 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows8
                   XBarType.$fShowAgrSP2) -}
f6d101cef8c7274cd3630645ec56b0bc
  $fShowConjBar_$cshow :: XBarType.ConjBar -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U),1*U(1*U(1*U,1*U(1*U))))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: XBarType.ConjBar ->
                 case w of ww { XBarType.ConjBar ww1 ww2 ->
                 XBarType.$w$cshow6 ww1 ww2 }) -}
f6d101cef8c7274cd3630645ec56b0bc
  $fShowConjBar_$cshowList :: [XBarType.ConjBar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.ConjBar
                   XBarType.$fShowConjBar1) -}
f6d101cef8c7274cd3630645ec56b0bc
  $fShowConjBar_$cshowsPrec ::
    GHC.Types.Int -> XBarType.ConjBar -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S,1*U(U)><S,1*U(U(U),1*U(1*U(U,1*U(1*U))))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.ConjBar ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.ConjBar ww3 ww4 ->
                 XBarType.$w$cshowsPrec10 ww1 ww3 ww4 } }) -}
ec34e8ec7d4af06b6d41565b21812db8
  $fShowConjP :: GHC.Show.Show XBarType.ConjP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.ConjP
                  XBarType.$fShowConjP_$cshowsPrec
                  XBarType.$fShowConjP_$cshow
                  XBarType.$fShowConjP_$cshowList -}
ec34e8ec7d4af06b6d41565b21812db8
  $fShowConjP1 :: XBarType.ConjP -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.ConjP ->
                 case w of ww { XBarType.ConjP ww1 ww2 ->
                 XBarType.$w$cshowsPrec9 0 ww1 ww2 }) -}
ec34e8ec7d4af06b6d41565b21812db8
  $fShowConjP_$cshow :: XBarType.ConjP -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U(U,1*U(1*U))),1*U(U(U),1*U(1*U(U,1*U(1*U)))))>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.ConjP ->
                 XBarType.$fShowConjP_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ec34e8ec7d4af06b6d41565b21812db8
  $fShowConjP_$cshowList :: [XBarType.ConjP] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.ConjP
                   XBarType.$fShowConjP1) -}
ec34e8ec7d4af06b6d41565b21812db8
  $fShowConjP_$cshowsPrec ::
    GHC.Types.Int -> XBarType.ConjP -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S,1*U(U)><S,1*U(1*U(1*U(U,1*U(1*U))),1*U(U(U),1*U(1*U(U,1*U(1*U)))))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.ConjP ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.ConjP ww3 ww4 ->
                 XBarType.$w$cshowsPrec9 ww1 ww3 ww4 } }) -}
1e367eb957e5c67a50ccc7a9e3b8a502
  $fShowConj_$cshow :: XBarType.Conj -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.Conj ->
                 XBarType.$fShowConj_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1e367eb957e5c67a50ccc7a9e3b8a502
  $fShowConj_$cshowList :: [XBarType.Conj] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.Conj
                   XBarType.$fShowConj1) -}
1e367eb957e5c67a50ccc7a9e3b8a502
  $fShowConj_$cshowsPrec ::
    GHC.Types.Int -> XBarType.Conj -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.Conj w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.Conj ww3 ->
                 XBarType.$w$cshowsPrec11 ww1 ww3 w2 } }) -}
ff9a4450e29f3df4e843ede9d7acd6c5
  $fShowDet :: GHC.Show.Show XBarType.Det
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Det
                  XBarType.$fShowDet_$cshowsPrec
                  XBarType.$fShowDet_$cshow
                  XBarType.$fShowDet_$cshowList -}
ff9a4450e29f3df4e843ede9d7acd6c5
  $fShowDet1 :: XBarType.Det -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.Det w1 :: GHC.Base.String ->
                 case w of ww { XBarType.Det ww1 ->
                 XBarType.$w$cshowsPrec14 0 ww1 w1 }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowDetBar :: GHC.Show.Show XBarType.DetBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.DetBar
                  XBarType.$fShowDetBar_$cshowsPrec
                  XBarType.$fShowDetBar_$cshow
                  XBarType.$fShowDetBar_$cshowList -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowDetBar1 :: XBarType.DetBar -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.DetBar ->
                 case w of ww { XBarType.DetBar ww1 ww2 ->
                 XBarType.$w$cshowsPrec13 0 ww1 ww2 }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowDetBar_$cshow :: XBarType.DetBar -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(1*U))>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: XBarType.DetBar ->
                 case w of ww { XBarType.DetBar ww1 ww2 ->
                 XBarType.$w$cshow7 ww1 ww2 }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowDetBar_$cshowList :: [XBarType.DetBar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.DetBar
                   XBarType.$fShowDetBar1) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowDetBar_$cshowsPrec ::
    GHC.Types.Int -> XBarType.DetBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(U,1*U(1*U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.DetBar ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.DetBar ww3 ww4 ->
                 XBarType.$w$cshowsPrec13 ww1 ww3 ww4 } }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowDetP :: GHC.Show.Show XBarType.DetP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.DetP
                  XBarType.$fShowDetP_$cshowsPrec
                  XBarType.$fShowDetP_$cshow
                  XBarType.$fShowDetP_$cshowList -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowDetP1 :: XBarType.DetP -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.DetP ->
                 case w of ww { XBarType.DetP ww1 ->
                 XBarType.$w$cshowsPrec12 0 ww1 }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowDetP_$cshow :: XBarType.DetP -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U,1*U(1*U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: XBarType.DetP ->
                 case w of ww { XBarType.DetP ww1 -> XBarType.$w$cshow8 ww1 }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowDetP_$cshowList :: [XBarType.DetP] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.DetP
                   XBarType.$fShowDetP1) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowDetP_$cshowsPrec ::
    GHC.Types.Int -> XBarType.DetP -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U(U,1*U(1*U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.DetP ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.DetP ww3 ->
                 XBarType.$w$cshowsPrec12 ww1 ww3 } }) -}
ff9a4450e29f3df4e843ede9d7acd6c5
  $fShowDet_$cshow :: XBarType.Det -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.Det ->
                 XBarType.$fShowDet_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ff9a4450e29f3df4e843ede9d7acd6c5
  $fShowDet_$cshowList :: [XBarType.Det] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.Det
                   XBarType.$fShowDet1) -}
ff9a4450e29f3df4e843ede9d7acd6c5
  $fShowDet_$cshowsPrec ::
    GHC.Types.Int -> XBarType.Det -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.Det w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.Det ww3 ->
                 XBarType.$w$cshowsPrec14 ww1 ww3 w2 } }) -}
f4d209cd87c39285c8d7b83991fa8fbf
  $fShowLilVerb :: GHC.Show.Show XBarType.LilVerb
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.LilVerb
                  XBarType.$fShowLilVerb_$cshowsPrec
                  XBarType.$fShowLilVerb_$cshow
                  XBarType.$fShowLilVerb_$cshowList -}
f4d209cd87c39285c8d7b83991fa8fbf
  $fShowLilVerb1 :: XBarType.LilVerb -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.LilVerb w1 :: GHC.Base.String ->
                 case w of ww { XBarType.LilVerb ww1 ->
                 XBarType.$w$cshowsPrec31 0 ww1 w1 }) -}
c31464efb0a5bb5be10892b6377e4852
  $fShowLilVerb2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LilVerb "#) -}
ac8c2e36e4008e09c4da63499abff444
  $fShowLilVerbBar :: GHC.Show.Show XBarType.LilVerbBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.LilVerbBar
                  XBarType.$fShowLilVerbBar_$cshowsPrec
                  XBarType.$fShowLilVerbBar_$cshow
                  XBarType.$fShowLilVerbBar_$cshowList -}
ac8c2e36e4008e09c4da63499abff444
  $fShowLilVerbBar1 :: XBarType.LilVerbBar -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.LilVerbBar w1 :: GHC.Base.String ->
                 case w of ww { XBarType.LilVerbBar ww1 ->
                 XBarType.$w$cshowsPrec32 0 ww1 w1 }) -}
533c7adb309fb179d8c57d8268c0e578
  $fShowLilVerbBar2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LilVerbBar "#) -}
ac8c2e36e4008e09c4da63499abff444
  $fShowLilVerbBar_$cshow :: XBarType.LilVerbBar -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U))>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.LilVerbBar ->
                 XBarType.$fShowLilVerbBar_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ac8c2e36e4008e09c4da63499abff444
  $fShowLilVerbBar_$cshowList ::
    [XBarType.LilVerbBar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.LilVerbBar
                   XBarType.$fShowLilVerbBar1) -}
ac8c2e36e4008e09c4da63499abff444
  $fShowLilVerbBar_$cshowsPrec ::
    GHC.Types.Int -> XBarType.LilVerbBar -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U(1*U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: XBarType.LilVerbBar
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.LilVerbBar ww3 ->
                 XBarType.$w$cshowsPrec32 ww1 ww3 w2 } }) -}
7eaef99330e84af37b90cb5bad50ff0e
  $fShowLilVerbP :: GHC.Show.Show XBarType.LilVerbP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.LilVerbP
                  XBarType.$fShowLilVerbP_$cshowsPrec
                  XBarType.$fShowLilVerbP_$cshow
                  XBarType.$fShowLilVerbP_$cshowList -}
7eaef99330e84af37b90cb5bad50ff0e
  $fShowLilVerbP1 :: XBarType.LilVerbP -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.LilVerbP w1 :: GHC.Base.String ->
                 case w of ww { XBarType.LilVerbP ww1 ->
                 XBarType.$w$cshowsPrec33 0 ww1 w1 }) -}
b3f5dd0aa6c99d92fee58bb09d80ccb5
  $fShowLilVerbP2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LilVerbP "#) -}
7eaef99330e84af37b90cb5bad50ff0e
  $fShowLilVerbP_$cshow :: XBarType.LilVerbP -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U(1*U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.LilVerbP ->
                 XBarType.$fShowLilVerbP_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7eaef99330e84af37b90cb5bad50ff0e
  $fShowLilVerbP_$cshowList :: [XBarType.LilVerbP] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.LilVerbP
                   XBarType.$fShowLilVerbP1) -}
7eaef99330e84af37b90cb5bad50ff0e
  $fShowLilVerbP_$cshowsPrec ::
    GHC.Types.Int -> XBarType.LilVerbP -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U(1*U(1*U)))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: XBarType.LilVerbP
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.LilVerbP ww3 ->
                 XBarType.$w$cshowsPrec33 ww1 ww3 w2 } }) -}
f4d209cd87c39285c8d7b83991fa8fbf
  $fShowLilVerb_$cshow :: XBarType.LilVerb -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.LilVerb ->
                 XBarType.$fShowLilVerb_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f4d209cd87c39285c8d7b83991fa8fbf
  $fShowLilVerb_$cshowList :: [XBarType.LilVerb] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.LilVerb
                   XBarType.$fShowLilVerb1) -}
f4d209cd87c39285c8d7b83991fa8fbf
  $fShowLilVerb_$cshowsPrec ::
    GHC.Types.Int -> XBarType.LilVerb -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: XBarType.LilVerb
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.LilVerb ww3 ->
                 XBarType.$w$cshowsPrec31 ww1 ww3 w2 } }) -}
96952ea5a5218ad752d8ce652c5da427
  $fShowNeg :: GHC.Show.Show XBarType.Neg
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Neg
                  XBarType.$fShowNeg_$cshowsPrec
                  XBarType.$fShowNeg_$cshow
                  XBarType.$fShowNeg_$cshowList -}
96952ea5a5218ad752d8ce652c5da427
  $fShowNeg1 :: XBarType.Neg -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.Neg w1 :: GHC.Base.String ->
                 case w of ww { XBarType.Neg ww1 ->
                 XBarType.$w$cshowsPrec34 0 ww1 w1 }) -}
385fe2647c3c1819db64462afa293804
  $fShowNeg2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Neg "#) -}
181d8ebd5d6c85a6b7191e9c23e6dee8
  $fShowNegBar :: GHC.Show.Show XBarType.NegBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.NegBar
                  XBarType.$fShowNegBar_$cshowsPrec
                  XBarType.$fShowNegBar_$cshow
                  XBarType.$fShowNegBar_$cshowList -}
181d8ebd5d6c85a6b7191e9c23e6dee8
  $fShowNegBar1 :: XBarType.NegBar -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.NegBar w1 :: GHC.Base.String ->
                 case w of ww { XBarType.NegBar ww1 ->
                 XBarType.$w$cshowsPrec35 0 ww1 w1 }) -}
9c1ce99020dd5a2c893d3222f7b3eda7
  $fShowNegBar2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NegBar "#) -}
181d8ebd5d6c85a6b7191e9c23e6dee8
  $fShowNegBar_$cshow :: XBarType.NegBar -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U))>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.NegBar ->
                 XBarType.$fShowNegBar_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
181d8ebd5d6c85a6b7191e9c23e6dee8
  $fShowNegBar_$cshowList :: [XBarType.NegBar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.NegBar
                   XBarType.$fShowNegBar1) -}
181d8ebd5d6c85a6b7191e9c23e6dee8
  $fShowNegBar_$cshowsPrec ::
    GHC.Types.Int -> XBarType.NegBar -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U(1*U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: XBarType.NegBar
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.NegBar ww3 ->
                 XBarType.$w$cshowsPrec35 ww1 ww3 w2 } }) -}
cf93d09aab54ad4cde6d02c62f12f15d
  $fShowNegP :: GHC.Show.Show XBarType.NegP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.NegP
                  XBarType.$fShowNegP_$cshowsPrec
                  XBarType.$fShowNegP_$cshow
                  XBarType.$fShowNegP_$cshowList -}
cf93d09aab54ad4cde6d02c62f12f15d
  $fShowNegP1 :: XBarType.NegP -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.NegP w1 :: GHC.Base.String ->
                 case w of ww { XBarType.NegP ww1 ->
                 XBarType.$w$cshowsPrec36 0 ww1 w1 }) -}
73aa8f766bf932b31041d6913eb5b9c4
  $fShowNegP2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NegP "#) -}
cf93d09aab54ad4cde6d02c62f12f15d
  $fShowNegP_$cshow :: XBarType.NegP -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U(1*U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.NegP ->
                 XBarType.$fShowNegP_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cf93d09aab54ad4cde6d02c62f12f15d
  $fShowNegP_$cshowList :: [XBarType.NegP] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.NegP
                   XBarType.$fShowNegP1) -}
cf93d09aab54ad4cde6d02c62f12f15d
  $fShowNegP_$cshowsPrec ::
    GHC.Types.Int -> XBarType.NegP -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U(1*U(1*U)))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.NegP w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.NegP ww3 ->
                 XBarType.$w$cshowsPrec36 ww1 ww3 w2 } }) -}
96952ea5a5218ad752d8ce652c5da427
  $fShowNeg_$cshow :: XBarType.Neg -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.Neg ->
                 XBarType.$fShowNeg_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
96952ea5a5218ad752d8ce652c5da427
  $fShowNeg_$cshowList :: [XBarType.Neg] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.Neg
                   XBarType.$fShowNeg1) -}
96952ea5a5218ad752d8ce652c5da427
  $fShowNeg_$cshowsPrec ::
    GHC.Types.Int -> XBarType.Neg -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.Neg w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.Neg ww3 ->
                 XBarType.$w$cshowsPrec34 ww1 ww3 w2 } }) -}
05cdb4fe2c7952b900be6f149f0ea287
  $fShowNoun :: GHC.Show.Show XBarType.Noun
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Noun
                  XBarType.$fShowNoun_$cshowsPrec
                  XBarType.$fShowNoun_$cshow
                  XBarType.$fShowNoun_$cshowList -}
05cdb4fe2c7952b900be6f149f0ea287
  $fShowNoun1 :: XBarType.Noun -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.Noun w1 :: GHC.Base.String ->
                 case w of ww { XBarType.Noun ww1 ->
                 XBarType.$w$cshowsPrec37 0 ww1 w1 }) -}
b48d31e29dddc01cff75409a8cd674ae
  $fShowNoun2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Noun "#) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowNounBar :: GHC.Show.Show XBarType.NounBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.NounBar
                  XBarType.$fShowNounBar_$cshowsPrec
                  XBarType.$fShowNounBar_$cshow
                  XBarType.$fShowNounBar_$cshowList -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowNounBar1 :: XBarType.NounBar -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.NounBar ->
                 XBarType.$w$cshowsPrec16 0 w) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowNounBar_$cshow :: XBarType.NounBar -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.NounBar ->
                 XBarType.$fShowNounBar_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowNounBar_$cshowList :: [XBarType.NounBar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.NounBar
                   XBarType.$fShowNounBar1) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowNounBar_$cshowsPrec ::
    GHC.Types.Int -> XBarType.NounBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.NounBar ->
                 case w of ww { GHC.Types.I# ww1 ->
                 XBarType.$w$cshowsPrec16 ww1 w1 }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowNounP :: GHC.Show.Show XBarType.NounP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.NounP
                  XBarType.$fShowNounP_$cshowsPrec
                  XBarType.$fShowNounP_$cshow
                  XBarType.$fShowNounP_$cshowList -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowNounP1 :: XBarType.NounP -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.NounP ->
                 case w of ww { XBarType.NounP ww1 ->
                 XBarType.$w$cshowsPrec15 0 ww1 }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowNounP_$cshow :: XBarType.NounP -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.NounP ->
                 case x of wild { XBarType.NounP b1 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n XBarType.$fShowAgrOBar11)
                   (XBarType.$fShowNounBar_$cshowsPrec
                      XBarType.$fReadAdjP5
                      b1
                      (GHC.Types.[] @ GHC.Types.Char)) }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowNounP_$cshowList :: [XBarType.NounP] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.NounP
                   XBarType.$fShowNounP1) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowNounP_$cshowsPrec ::
    GHC.Types.Int -> XBarType.NounP -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.NounP ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.NounP ww3 ->
                 XBarType.$w$cshowsPrec15 ww1 ww3 } }) -}
05cdb4fe2c7952b900be6f149f0ea287
  $fShowNoun_$cshow :: XBarType.Noun -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.Noun ->
                 XBarType.$fShowNoun_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
05cdb4fe2c7952b900be6f149f0ea287
  $fShowNoun_$cshowList :: [XBarType.Noun] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.Noun
                   XBarType.$fShowNoun1) -}
05cdb4fe2c7952b900be6f149f0ea287
  $fShowNoun_$cshowsPrec ::
    GHC.Types.Int -> XBarType.Noun -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.Noun w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.Noun ww3 ->
                 XBarType.$w$cshowsPrec37 ww1 ww3 w2 } }) -}
695205acf366e6b22a917b33df082656
  $fShowNumb :: GHC.Show.Show XBarType.Numb
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Numb
                  XBarType.$fShowNumb_$cshowsPrec
                  XBarType.$fShowNumb_$cshow
                  XBarType.$fShowNumb_$cshowList -}
695205acf366e6b22a917b33df082656
  $fShowNumb1 :: XBarType.Numb -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.Numb w1 :: GHC.Base.String ->
                 case w of ww { XBarType.Numb ww1 ->
                 XBarType.$w$cshowsPrec38 0 ww1 w1 }) -}
3dc09e78eb13d72a28acd4269abebc42
  $fShowNumb2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Numb "#) -}
aba5d796ddeee6565404e7acc5d0c460
  $fShowNumbBar :: GHC.Show.Show XBarType.NumbBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.NumbBar
                  XBarType.$fShowNumbBar_$cshowsPrec
                  XBarType.$fShowNumbBar_$cshow
                  XBarType.$fShowNumbBar_$cshowList -}
aba5d796ddeee6565404e7acc5d0c460
  $fShowNumbBar1 :: XBarType.NumbBar -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.NumbBar w1 :: GHC.Base.String ->
                 case w of ww { XBarType.NumbBar ww1 ->
                 XBarType.$w$cshowsPrec39 0 ww1 w1 }) -}
6f06b1e0d0b6dc7ab1cf653f16617e81
  $fShowNumbBar2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NumbBar "#) -}
aba5d796ddeee6565404e7acc5d0c460
  $fShowNumbBar_$cshow :: XBarType.NumbBar -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U))>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.NumbBar ->
                 XBarType.$fShowNumbBar_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
aba5d796ddeee6565404e7acc5d0c460
  $fShowNumbBar_$cshowList :: [XBarType.NumbBar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.NumbBar
                   XBarType.$fShowNumbBar1) -}
aba5d796ddeee6565404e7acc5d0c460
  $fShowNumbBar_$cshowsPrec ::
    GHC.Types.Int -> XBarType.NumbBar -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U(1*U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: XBarType.NumbBar
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.NumbBar ww3 ->
                 XBarType.$w$cshowsPrec39 ww1 ww3 w2 } }) -}
127aba05e55d3ac81adfc46bb6f76025
  $fShowNumbP :: GHC.Show.Show XBarType.NumbP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.NumbP
                  XBarType.$fShowNumbP_$cshowsPrec
                  XBarType.$fShowNumbP_$cshow
                  XBarType.$fShowNumbP_$cshowList -}
127aba05e55d3ac81adfc46bb6f76025
  $fShowNumbP1 :: XBarType.NumbP -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.NumbP w1 :: GHC.Base.String ->
                 case w of ww { XBarType.NumbP ww1 ->
                 XBarType.$w$cshowsPrec40 0 ww1 w1 }) -}
0afcab456ae9d0404100a2844bef492a
  $fShowNumbP2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NumbP "#) -}
127aba05e55d3ac81adfc46bb6f76025
  $fShowNumbP_$cshow :: XBarType.NumbP -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U(1*U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.NumbP ->
                 XBarType.$fShowNumbP_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
127aba05e55d3ac81adfc46bb6f76025
  $fShowNumbP_$cshowList :: [XBarType.NumbP] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.NumbP
                   XBarType.$fShowNumbP1) -}
127aba05e55d3ac81adfc46bb6f76025
  $fShowNumbP_$cshowsPrec ::
    GHC.Types.Int -> XBarType.NumbP -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U(1*U(1*U)))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.NumbP w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.NumbP ww3 ->
                 XBarType.$w$cshowsPrec40 ww1 ww3 w2 } }) -}
695205acf366e6b22a917b33df082656
  $fShowNumb_$cshow :: XBarType.Numb -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.Numb ->
                 XBarType.$fShowNumb_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
695205acf366e6b22a917b33df082656
  $fShowNumb_$cshowList :: [XBarType.Numb] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.Numb
                   XBarType.$fShowNumb1) -}
695205acf366e6b22a917b33df082656
  $fShowNumb_$cshowsPrec ::
    GHC.Types.Int -> XBarType.Numb -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.Numb w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.Numb ww3 ->
                 XBarType.$w$cshowsPrec38 ww1 ww3 w2 } }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowOptional ::
    GHC.Show.Show a => GHC.Show.Show (XBarType.Optional a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a26 $dShow :: GHC.Show.Show a26.
                  @ (XBarType.Optional a26)
                  (XBarType.$fShowOptional_$cshowsPrec @ a26 $dShow)
                  (XBarType.$fShowOptional_$cshow @ a26 $dShow)
                  (XBarType.$fShowOptional_$cshowList @ a26 $dShow) -}
2f0ebd8036a3c069ed2f8cd63213c8aa
  $fShowOptional1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
38ce04480aa13fe6fa499891338f3497
  $fShowOptional2 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   XBarType.$fReadAgrOBar16) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowOptional_$cshow ::
    GHC.Show.Show a => XBarType.Optional a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a26
                   $dShow :: GHC.Show.Show a26
                   x :: XBarType.Optional a26 ->
                 case x of wild {
                   XBarType.YesOpt b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowAgrOBar9
                        (GHC.Show.showsPrec
                           @ a26
                           $dShow
                           XBarType.$fReadAdjP5
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   XBarType.NoOpt -> XBarType.$fReadAgrOBar16 }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowOptional_$cshowList ::
    GHC.Show.Show a => [XBarType.Optional a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a26
                   $dShow :: GHC.Show.Show a26
                   eta :: [XBarType.Optional a26]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (XBarType.Optional a26)
                   (XBarType.$fShowOptional_$cshowsPrec
                      @ a26
                      $dShow
                      XBarType.$fShowOptional1)
                   eta
                   eta1) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowOptional_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> XBarType.Optional a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(U)><S,1*U>,
     Unfolding: (\ @ a26
                   $dShow :: GHC.Show.Show a26
                   a27 :: GHC.Types.Int
                   ds :: XBarType.Optional a26 ->
                 case ds of wild {
                   XBarType.YesOpt b1
                   -> case a27 of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a26 $dShow XBarType.$fReadAdjP5 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++ @ GHC.Types.Char XBarType.$fShowAgrOBar9 (g x1)
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                XBarType.$fShowAgrOBar9
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1))) } }
                   XBarType.NoOpt -> XBarType.$fShowOptional2 }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowOptional_$s$cshowsPrec ::
    GHC.Types.Int -> XBarType.Optional XBarType.AdjP -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ a26 :: GHC.Types.Int
                   ds :: XBarType.Optional XBarType.AdjP ->
                 case ds of wild {
                   XBarType.YesOpt b1
                   -> case a26 of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww { XBarType.AdjP ww1 ->
                          XBarType.$w$cshowsPrec2 11 ww1 }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++ @ GHC.Types.Char XBarType.$fShowAgrOBar9 (g x1)
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                XBarType.$fShowAgrOBar9
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1))) } }
                   XBarType.NoOpt -> XBarType.$fShowOptional2 }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowOptional_$s$cshowsPrec1 ::
    GHC.Types.Int -> XBarType.Optional XBarType.PrepP -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
da7569991f48fe4331abea09634b3bf0
  $fShowPrep :: GHC.Show.Show XBarType.Prep
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Prep
                  XBarType.$fShowPrep_$cshowsPrec
                  XBarType.$fShowPrep_$cshow
                  XBarType.$fShowPrep_$cshowList -}
da7569991f48fe4331abea09634b3bf0
  $fShowPrep1 :: XBarType.Prep -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.Prep w1 :: GHC.Base.String ->
                 case w of ww { XBarType.Prep ww1 ->
                 XBarType.$w$cshowsPrec41 0 ww1 w1 }) -}
948f104e143f3b39ffea1553bc80d9b1
  $fShowPrep2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Prep "#) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowPrepBar :: GHC.Show.Show XBarType.PrepBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.PrepBar
                  XBarType.$fShowPrepBar_$cshowsPrec
                  XBarType.$fShowPrepBar_$cshow
                  XBarType.$fShowPrepBar_$cshowList -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowPrepBar1 :: XBarType.PrepBar -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.PrepBar ->
                 XBarType.$w$cshowsPrec42 0 w) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowPrepBar_$cshow :: XBarType.PrepBar -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.PrepBar ->
                 XBarType.$fShowPrepBar_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowPrepBar_$cshowList :: [XBarType.PrepBar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.PrepBar
                   XBarType.$fShowPrepBar1) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowPrepBar_$cshowsPrec ::
    GHC.Types.Int -> XBarType.PrepBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.PrepBar ->
                 case w of ww { GHC.Types.I# ww1 ->
                 XBarType.$w$cshowsPrec42 ww1 w1 }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowPrepP :: GHC.Show.Show XBarType.PrepP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.PrepP
                  XBarType.$fShowPrepP_$cshowsPrec
                  XBarType.$fShowPrepP_$cshow
                  XBarType.$fShowPrepP_$cshowList -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowPrepP1 :: XBarType.PrepP -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.PrepP ->
                 case w of ww { XBarType.PrepP ww1 ww2 ->
                 XBarType.$w$cshowsPrec43 0 ww1 ww2 }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowPrepP_$cshow :: XBarType.PrepP -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.PrepP ->
                 XBarType.$fShowPrepP_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowPrepP_$cshowList :: [XBarType.PrepP] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.PrepP
                   XBarType.$fShowPrepP1) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $fShowPrepP_$cshowsPrec ::
    GHC.Types.Int -> XBarType.PrepP -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.PrepP ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.PrepP ww3 ww4 ->
                 XBarType.$w$cshowsPrec43 ww1 ww3 ww4 } }) -}
da7569991f48fe4331abea09634b3bf0
  $fShowPrep_$cshow :: XBarType.Prep -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.Prep ->
                 XBarType.$fShowPrep_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
da7569991f48fe4331abea09634b3bf0
  $fShowPrep_$cshowList :: [XBarType.Prep] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.Prep
                   XBarType.$fShowPrep1) -}
da7569991f48fe4331abea09634b3bf0
  $fShowPrep_$cshowsPrec ::
    GHC.Types.Int -> XBarType.Prep -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.Prep w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.Prep ww3 ->
                 XBarType.$w$cshowsPrec41 ww1 ww3 w2 } }) -}
dbe1f7fbbcbd7e5405e096305eab9650
  $fShowTense :: GHC.Show.Show XBarType.Tense
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Tense
                  XBarType.$fShowTense_$cshowsPrec
                  XBarType.$fShowTense_$cshow
                  XBarType.$fShowTense_$cshowList -}
dbe1f7fbbcbd7e5405e096305eab9650
  $fShowTense1 :: XBarType.Tense -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.Tense w1 :: GHC.Base.String ->
                 case w of ww { XBarType.Tense ww1 ->
                 XBarType.$w$cshowsPrec18 0 ww1 w1 }) -}
15c160cf605dad7956843e2676134150
  $fShowTenseBar :: GHC.Show.Show XBarType.TenseBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.TenseBar
                  XBarType.$fShowTenseBar_$cshowsPrec
                  XBarType.$fShowTenseBar_$cshow
                  XBarType.$fShowTenseBar_$cshowList -}
15c160cf605dad7956843e2676134150
  $fShowTenseBar1 :: XBarType.TenseBar -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.TenseBar ->
                 case w of ww { XBarType.TenseBar ww1 ww2 ->
                 XBarType.$w$cshowsPrec17 0 ww1 ww2 }) -}
15c160cf605dad7956843e2676134150
  $fShowTenseBar_$cshow :: XBarType.TenseBar -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U),1*U(1*U(1*U(1*U),1*U(1*U))))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: XBarType.TenseBar ->
                 case w of ww { XBarType.TenseBar ww1 ww2 ->
                 XBarType.$w$cshow9 ww1 ww2 }) -}
15c160cf605dad7956843e2676134150
  $fShowTenseBar_$cshowList :: [XBarType.TenseBar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.TenseBar
                   XBarType.$fShowTenseBar1) -}
15c160cf605dad7956843e2676134150
  $fShowTenseBar_$cshowsPrec ::
    GHC.Types.Int -> XBarType.TenseBar -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S,1*U(U)><S,1*U(U(U),1*U(1*U(U(U),1*U(1*U))))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.TenseBar ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.TenseBar ww3 ww4 ->
                 XBarType.$w$cshowsPrec17 ww1 ww3 ww4 } }) -}
15c160cf605dad7956843e2676134150
  $fShowTenseP :: GHC.Show.Show XBarType.TenseP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.TenseP
                  XBarType.$fShowTenseP_$cshowsPrec
                  XBarType.$fShowTenseP_$cshow
                  XBarType.$fShowTenseP_$cshowList -}
15c160cf605dad7956843e2676134150
  $fShowTenseP1 :: XBarType.TenseP -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.TenseP ->
                 XBarType.$w$cshowsPrec8 0 w) -}
15c160cf605dad7956843e2676134150
  $fShowTenseP_$cshow :: XBarType.TenseP -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.TenseP ->
                 XBarType.$fShowTenseP_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
15c160cf605dad7956843e2676134150
  $fShowTenseP_$cshowList :: [XBarType.TenseP] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.TenseP
                   XBarType.$fShowTenseP1) -}
15c160cf605dad7956843e2676134150
  $fShowTenseP_$cshowsPrec ::
    GHC.Types.Int -> XBarType.TenseP -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.TenseP ->
                 case w of ww { GHC.Types.I# ww1 ->
                 XBarType.$w$cshowsPrec8 ww1 w1 }) -}
dbe1f7fbbcbd7e5405e096305eab9650
  $fShowTense_$cshow :: XBarType.Tense -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.Tense ->
                 XBarType.$fShowTense_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
dbe1f7fbbcbd7e5405e096305eab9650
  $fShowTense_$cshowList :: [XBarType.Tense] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.Tense
                   XBarType.$fShowTense1) -}
dbe1f7fbbcbd7e5405e096305eab9650
  $fShowTense_$cshowsPrec ::
    GHC.Types.Int -> XBarType.Tense -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.Tense w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.Tense ww3 ->
                 XBarType.$w$cshowsPrec18 ww1 ww3 w2 } }) -}
bda0d8a64645987400c6ad89735d7e9d
  $fShowVerb :: GHC.Show.Show XBarType.Verb
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Verb
                  XBarType.$fShowVerb_$cshowsPrec
                  XBarType.$fShowVerb_$cshow
                  XBarType.$fShowVerb_$cshowList -}
bda0d8a64645987400c6ad89735d7e9d
  $fShowVerb1 :: XBarType.Verb -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.Verb w1 :: GHC.Base.String ->
                 case w of ww { XBarType.Verb ww1 ->
                 XBarType.$w$cshowsPrec44 0 ww1 w1 }) -}
1f07128659e59e13c917ac814c419f76
  $fShowVerb2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Verb "#) -}
15c160cf605dad7956843e2676134150
  $fShowVerbBar :: GHC.Show.Show XBarType.VerbBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.VerbBar
                  XBarType.$fShowVerbBar_$cshowsPrec
                  XBarType.$fShowVerbBar_$cshow
                  XBarType.$fShowVerbBar_$cshowList -}
15c160cf605dad7956843e2676134150
  $fShowVerbBar1 :: XBarType.VerbBar -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.VerbBar ->
                 XBarType.$w$cshowsPrec23 0 w) -}
15c160cf605dad7956843e2676134150
  $fShowVerbBar_$cshow :: XBarType.VerbBar -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.VerbBar ->
                 XBarType.$fShowVerbBar_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
15c160cf605dad7956843e2676134150
  $fShowVerbBar_$cshowList :: [XBarType.VerbBar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.VerbBar
                   XBarType.$fShowVerbBar1) -}
15c160cf605dad7956843e2676134150
  $fShowVerbBar_$cshowsPrec ::
    GHC.Types.Int -> XBarType.VerbBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.VerbBar ->
                 case w of ww { GHC.Types.I# ww1 ->
                 XBarType.$w$cshowsPrec23 ww1 w1 }) -}
15c160cf605dad7956843e2676134150
  $fShowVerbP :: GHC.Show.Show XBarType.VerbP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.VerbP
                  XBarType.$fShowVerbP_$cshowsPrec
                  XBarType.$fShowVerbP_$cshow
                  XBarType.$fShowVerbP_$cshowList -}
15c160cf605dad7956843e2676134150
  $fShowVerbP1 :: XBarType.VerbP -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.VerbP ->
                 case w of ww { XBarType.VerbP ww1 ->
                 XBarType.$w$cshowsPrec22 0 ww1 }) -}
15c160cf605dad7956843e2676134150
  $fShowVerbP_$cshow :: XBarType.VerbP -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.VerbP ->
                 case x of wild { XBarType.VerbP b1 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n XBarType.$fShowAgrOBar18)
                   (XBarType.$fShowVerbBar_$cshowsPrec
                      XBarType.$fReadAdjP5
                      b1
                      (GHC.Types.[] @ GHC.Types.Char)) }) -}
15c160cf605dad7956843e2676134150
  $fShowVerbP_$cshowList :: [XBarType.VerbP] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.VerbP
                   XBarType.$fShowVerbP1) -}
15c160cf605dad7956843e2676134150
  $fShowVerbP_$cshowsPrec ::
    GHC.Types.Int -> XBarType.VerbP -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.VerbP ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.VerbP ww3 ->
                 XBarType.$w$cshowsPrec22 ww1 ww3 } }) -}
bda0d8a64645987400c6ad89735d7e9d
  $fShowVerb_$cshow :: XBarType.Verb -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.Verb ->
                 XBarType.$fShowVerb_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
bda0d8a64645987400c6ad89735d7e9d
  $fShowVerb_$cshowList :: [XBarType.Verb] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.Verb
                   XBarType.$fShowVerb1) -}
bda0d8a64645987400c6ad89735d7e9d
  $fShowVerb_$cshowsPrec ::
    GHC.Types.Int -> XBarType.Verb -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.Verb w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.Verb ww3 ->
                 XBarType.$w$cshowsPrec44 ww1 ww3 w2 } }) -}
ce8d23dbfc75053b530a08ea0d6fcea2
  $w$cshow :: XBarType.AgrO -> XBarType.TenseP -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*U)><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: XBarType.AgrO ww1 :: XBarType.TenseP ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   XBarType.$fShowAgrOBar2
                   (case ww of ww2 { XBarType.AgrO ww3 ->
                    XBarType.$w$cshowsPrec6
                      11
                      ww3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showSpace1
                         (XBarType.$w$cshowsPrec8
                            11
                            ww1
                            (GHC.Types.[] @ GHC.Types.Char))) })) -}
806fba28299032a718455ca114503530
  $w$cshow1 :: XBarType.AgrOBar -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(1*U(1*U),1*U)>, Inline: [0],
     Unfolding: (\ ww :: XBarType.AgrOBar ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   XBarType.$fShowAgrOP2
                   (case ww of wild { XBarType.AgrOBar b1 b2 ->
                    GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.shows9
                      (GHC.Base.++
                         @ GHC.Types.Char
                         XBarType.$fShowAgrOBar2
                         (case b1 of ww1 { XBarType.AgrO ww2 ->
                          XBarType.$w$cshowsPrec6
                            11
                            ww2
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (XBarType.$w$cshowsPrec8 11 b2 XBarType.$fShowAgrOP3)) })) })) -}
15c160cf605dad7956843e2676134150
  $w$cshow2 :: XBarType.AgrS -> XBarType.VerbP -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*U)><L,1*U(1*U)>, Inline: [0],
     Unfolding: (\ ww :: XBarType.AgrS ww1 :: XBarType.VerbP ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   XBarType.$fShowAgrOBar17
                   (case ww of ww2 { XBarType.AgrS ww3 ->
                    XBarType.$w$cshowsPrec21
                      11
                      ww3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showSpace1
                         (case ww1 of wild { XBarType.VerbP b1 ->
                          GHC.Types.:
                            @ GHC.Types.Char
                            GHC.Show.shows9
                            (GHC.Base.++
                               @ GHC.Types.Char
                               XBarType.$fShowAgrOBar18
                               (XBarType.$w$cshowsPrec23 11 b1 XBarType.$fShowAgrOP3)) })) })) -}
15c160cf605dad7956843e2676134150
  $w$cshow3 :: XBarType.AgrSBar -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(1*U(1*U),1*U(1*U))>, Inline: [0],
     Unfolding: (\ ww :: XBarType.AgrSBar ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   XBarType.$fShowAgrOBar15
                   (case ww of wild { XBarType.AgrSBar b1 b2 ->
                    GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.shows9
                      (GHC.Base.++
                         @ GHC.Types.Char
                         XBarType.$fShowAgrOBar17
                         (case b1 of ww1 { XBarType.AgrS ww2 ->
                          XBarType.$w$cshowsPrec21
                            11
                            ww2
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (case b2 of wild1 { XBarType.VerbP b4 ->
                                GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.shows9
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     XBarType.$fShowAgrOBar18
                                     (XBarType.$w$cshowsPrec23
                                        11
                                        b4
                                        XBarType.$fShowAgrSP2)) })) })) })) -}
15c160cf605dad7956843e2676134150
  $w$cshow4 :: XBarType.Comp -> XBarType.TenseP -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*U)><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: XBarType.Comp ww1 :: XBarType.TenseP ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   XBarType.$fShowCompBar2
                   (case ww of ww2 { XBarType.Comp ww3 ->
                    XBarType.$w$cshowsPrec28
                      11
                      ww3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showSpace1
                         (XBarType.$w$cshowsPrec8
                            11
                            ww1
                            (GHC.Types.[] @ GHC.Types.Char))) })) -}
15c160cf605dad7956843e2676134150
  $w$cshow5 :: XBarType.CompBar -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(1*U(1*U),1*U)>, Inline: [0],
     Unfolding: (\ ww :: XBarType.CompBar ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   XBarType.$fShowCompP2
                   (case ww of wild { XBarType.CompBar b1 b2 ->
                    GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.shows9
                      (GHC.Base.++
                         @ GHC.Types.Char
                         XBarType.$fShowCompBar2
                         (case b1 of ww1 { XBarType.Comp ww2 ->
                          XBarType.$w$cshowsPrec28
                            11
                            ww2
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (XBarType.$w$cshowsPrec8 11 b2 XBarType.$fShowAgrOP3)) })) })) -}
ce381fd2b2661eb753626fab30e619a2
  $w$cshow6 :: XBarType.Conj -> XBarType.DetP -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*U)><L,1*U(1*U(1*U,1*U(1*U)))>,
     Inline: [0],
     Unfolding: (\ ww :: XBarType.Conj ww1 :: XBarType.DetP ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   XBarType.$fShowAgrOBar6
                   (case ww of ww2 { XBarType.Conj ww3 ->
                    XBarType.$w$cshowsPrec11
                      11
                      ww3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showSpace1
                         (case ww1 of wild { XBarType.DetP b1 ->
                          GHC.Types.:
                            @ GHC.Types.Char
                            GHC.Show.shows9
                            (GHC.Base.++
                               @ GHC.Types.Char
                               XBarType.$fShowAgrOBar7
                               (case b1 of wild1 { XBarType.DetBar b2 b3 ->
                                GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.shows9
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     XBarType.$fShowAgrOBar10
                                     (XBarType.$fShowAgrOBar_$s$cshowsPrec
                                        XBarType.$fReadAdjP5
                                        b2
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.showSpace1
                                           (case b3 of wild2 { XBarType.NounP b4 ->
                                            GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.shows9
                                              (GHC.Base.++
                                                 @ GHC.Types.Char
                                                 XBarType.$fShowAgrOBar11
                                                 (XBarType.$w$cshowsPrec16
                                                    11
                                                    b4
                                                    XBarType.$fShowConjBar2)) })))) })) })) })) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $w$cshow7 ::
    XBarType.Optional XBarType.Det -> XBarType.NounP -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U(1*U)>, Inline: [0],
     Unfolding: (\ ww :: XBarType.Optional XBarType.Det
                   ww1 :: XBarType.NounP ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   XBarType.$fShowAgrOBar10
                   (XBarType.$fShowAgrOBar_$s$cshowsPrec
                      XBarType.$fReadAdjP5
                      ww
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showSpace1
                         (case ww1 of wild { XBarType.NounP b1 ->
                          GHC.Types.:
                            @ GHC.Types.Char
                            GHC.Show.shows9
                            (GHC.Base.++
                               @ GHC.Types.Char
                               XBarType.$fShowAgrOBar11
                               (XBarType.$w$cshowsPrec16 11 b1 XBarType.$fShowAgrOP3)) })))) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $w$cshow8 :: XBarType.DetBar -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(1*U,1*U(1*U))>, Inline: [0],
     Unfolding: (\ ww :: XBarType.DetBar ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   XBarType.$fShowAgrOBar7
                   (case ww of wild { XBarType.DetBar b1 b2 ->
                    GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.shows9
                      (GHC.Base.++
                         @ GHC.Types.Char
                         XBarType.$fShowAgrOBar10
                         (XBarType.$fShowAgrOBar_$s$cshowsPrec
                            XBarType.$fReadAdjP5
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (case b2 of wild1 { XBarType.NounP b4 ->
                                GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.shows9
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     XBarType.$fShowAgrOBar11
                                     (XBarType.$w$cshowsPrec16
                                        11
                                        b4
                                        XBarType.$fShowAgrSP2)) })))) })) -}
15c160cf605dad7956843e2676134150
  $w$cshow9 :: XBarType.Tense -> XBarType.AgrSP -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,1*U(1*U)><L,1*U(1*U(1*U(1*U),1*U(1*U)))>,
     Inline: [0],
     Unfolding: (\ ww :: XBarType.Tense ww1 :: XBarType.AgrSP ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   XBarType.$fShowAgrOBar14
                   (case ww of ww2 { XBarType.Tense ww3 ->
                    XBarType.$w$cshowsPrec18
                      11
                      ww3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showSpace1
                         (case ww1 of wild { XBarType.AgrSP b1 ->
                          GHC.Types.:
                            @ GHC.Types.Char
                            GHC.Show.shows9
                            (GHC.Base.++
                               @ GHC.Types.Char
                               XBarType.$fShowAgrOBar15
                               (case b1 of wild1 { XBarType.AgrSBar b2 b3 ->
                                GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.shows9
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     XBarType.$fShowAgrOBar17
                                     (case b2 of ww4 { XBarType.AgrS ww5 ->
                                      XBarType.$w$cshowsPrec21
                                        11
                                        ww5
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.showSpace1
                                           (case b3 of wild2 { XBarType.VerbP b4 ->
                                            GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.shows9
                                              (GHC.Base.++
                                                 @ GHC.Types.Char
                                                 XBarType.$fShowAgrOBar18
                                                 (XBarType.$w$cshowsPrec23
                                                    11
                                                    b4
                                                    XBarType.$fShowConjBar2)) })) })) })) })) })) -}
cdbe2cdae7a9c28b9d2d58892074b61a
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowAdj2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowAdj2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))))) }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $w$cshowsPrec1 ::
    GHC.Prim.Int# -> XBarType.AdjBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
f2b73804fd40a096518700e02d4b4132
  $w$cshowsPrec10 ::
    GHC.Prim.Int# -> XBarType.Conj -> XBarType.DetP -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U><L,U(U)><L,1*U(1*U(U,1*U(1*U)))>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: XBarType.Conj
                   ww2 :: XBarType.DetP ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { XBarType.DetP ww4 ->
                     XBarType.$w$cshowsPrec12 11 ww4 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       XBarType.$fShowAgrOBar6
                       (case ww1 of ww3 { XBarType.Conj ww4 ->
                        XBarType.$w$cshowsPrec11
                          11
                          ww4
                          (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)) })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
4833e081a35d251f1562158ecac76874
  $w$cshowsPrec11 ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowAgrOBar5
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowAgrOBar5
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))))) }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $w$cshowsPrec12 ::
    GHC.Prim.Int# -> XBarType.DetBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U(U,1*U(1*U))>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ww1 :: XBarType.DetBar ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww2 { XBarType.DetBar ww3 ww4 ->
                     XBarType.$w$cshowsPrec13 11 ww3 ww4 }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> \ x :: GHC.Base.String ->
                      GHC.Base.++ @ GHC.Types.Char XBarType.$fShowAgrOBar7 (g x)
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowAgrOBar7
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $w$cshowsPrec13 ::
    GHC.Prim.Int#
    -> XBarType.Optional XBarType.Det
    -> XBarType.NounP
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U><L,U><L,1*U(1*U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: XBarType.Optional XBarType.Det
                   ww2 :: XBarType.NounP ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { XBarType.NounP ww4 ->
                     XBarType.$w$cshowsPrec15 11 ww4 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       XBarType.$fShowAgrOBar10
                       (XBarType.$fShowAgrOBar_$s$cshowsPrec
                          XBarType.$fReadAdjP5
                          ww1
                          (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
774c45a7aa8b592e36005f8923a86292
  $w$cshowsPrec14 ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowAgrOBar8
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowAgrOBar8
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))))) }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $w$cshowsPrec15 ::
    GHC.Prim.Int# -> XBarType.NounBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ww1 :: XBarType.NounBar ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = XBarType.$w$cshowsPrec16 11 ww1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> \ x :: GHC.Base.String ->
                      GHC.Base.++ @ GHC.Types.Char XBarType.$fShowAgrOBar11 (g x)
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowAgrOBar11
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $w$cshowsPrec16 ::
    GHC.Prim.Int# -> XBarType.NounBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
15c160cf605dad7956843e2676134150
  $w$cshowsPrec17 ::
    GHC.Prim.Int# -> XBarType.Tense -> XBarType.AgrSP -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U><L,U(U)><L,1*U(1*U(U(U),1*U(1*U)))>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: XBarType.Tense
                   ww2 :: XBarType.AgrSP ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { XBarType.AgrSP ww4 ->
                     XBarType.$w$cshowsPrec19 11 ww4 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       XBarType.$fShowAgrOBar14
                       (case ww1 of ww3 { XBarType.Tense ww4 ->
                        XBarType.$w$cshowsPrec18
                          11
                          ww4
                          (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)) })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
88c762a6ef9175480ccc8fc670178534
  $w$cshowsPrec18 ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowAgrOBar13
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowAgrOBar13
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))))) }) -}
15c160cf605dad7956843e2676134150
  $w$cshowsPrec19 ::
    GHC.Prim.Int# -> XBarType.AgrSBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U(U(U),1*U(1*U))>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ww1 :: XBarType.AgrSBar ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww2 { XBarType.AgrSBar ww3 ww4 ->
                     XBarType.$w$cshowsPrec20 11 ww3 ww4 }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> \ x :: GHC.Base.String ->
                      GHC.Base.++ @ GHC.Types.Char XBarType.$fShowAgrOBar15 (g x)
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowAgrOBar15
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $w$cshowsPrec2 ::
    GHC.Prim.Int# -> XBarType.AdjBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ww1 :: XBarType.AdjBar ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = XBarType.$w$cshowsPrec1 11 ww1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> \ x :: GHC.Base.String ->
                      GHC.Base.++ @ GHC.Types.Char XBarType.$fShowAdjP2 (g x)
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowAdjP2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) }) -}
15c160cf605dad7956843e2676134150
  $w$cshowsPrec20 ::
    GHC.Prim.Int# -> XBarType.AgrS -> XBarType.VerbP -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U><L,U(U)><L,1*U(1*U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: XBarType.AgrS
                   ww2 :: XBarType.VerbP ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { XBarType.VerbP ww4 ->
                     XBarType.$w$cshowsPrec22 11 ww4 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       XBarType.$fShowAgrOBar17
                       (case ww1 of ww3 { XBarType.AgrS ww4 ->
                        XBarType.$w$cshowsPrec21
                          11
                          ww4
                          (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)) })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
a8fd2c319c1c7cab488b4eb3b4ba3ca2
  $w$cshowsPrec21 ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowAgrOBar16
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowAgrOBar16
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))))) }) -}
15c160cf605dad7956843e2676134150
  $w$cshowsPrec22 ::
    GHC.Prim.Int# -> XBarType.VerbBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ww1 :: XBarType.VerbBar ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = XBarType.$w$cshowsPrec23 11 ww1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> \ x :: GHC.Base.String ->
                      GHC.Base.++ @ GHC.Types.Char XBarType.$fShowAgrOBar18 (g x)
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowAgrOBar18
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) }) -}
15c160cf605dad7956843e2676134150
  $w$cshowsPrec23 ::
    GHC.Prim.Int# -> XBarType.VerbBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
4105e7003e5833de8b42be9fd33235bf
  $w$cshowsPrec24 ::
    GHC.Prim.Int# -> XBarType.AgrOBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U(U(U),1*U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ww1 :: XBarType.AgrOBar ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww2 { XBarType.AgrOBar ww3 ww4 ->
                     XBarType.$w$cshowsPrec7 11 ww3 ww4 }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> \ x :: GHC.Base.String ->
                      GHC.Base.++ @ GHC.Types.Char XBarType.$fShowAgrOP2 (g x)
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowAgrOP2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) }) -}
382f493762a23121a134ced0ef6a32a1
  $w$cshowsPrec25 ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowAsp2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowAsp2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))))) }) -}
f150e7fc91f2df7a00e817da657a8855
  $w$cshowsPrec26 ::
    GHC.Prim.Int# -> XBarType.Asp -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U(1*U)><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: XBarType.Asp
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowAspBar2
                        (case ww1 of ww2 { XBarType.Asp ww3 ->
                         XBarType.$w$cshowsPrec25 11 ww3 w })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowAspBar2
                           (case ww1 of ww2 { XBarType.Asp ww3 ->
                            XBarType.$w$cshowsPrec25
                              11
                              ww3
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w) })) }) -}
66a2e57629b659123794b67330cc54ef
  $w$cshowsPrec27 ::
    GHC.Prim.Int#
    -> XBarType.AspBar -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U(1*U(1*U))><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: XBarType.AspBar
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowAspP2
                        (case ww1 of ww2 { XBarType.AspBar ww3 ->
                         XBarType.$w$cshowsPrec26 11 ww3 w })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowAspP2
                           (case ww1 of ww2 { XBarType.AspBar ww3 ->
                            XBarType.$w$cshowsPrec26
                              11
                              ww3
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w) })) }) -}
d7f1285928f998a0f558ed04aab63ad4
  $w$cshowsPrec28 ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowComp2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowComp2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))))) }) -}
15c160cf605dad7956843e2676134150
  $w$cshowsPrec29 ::
    GHC.Prim.Int# -> XBarType.Comp -> XBarType.TenseP -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U><L,U(U)><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: XBarType.Comp
                   ww2 :: XBarType.TenseP ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = XBarType.$w$cshowsPrec8 11 ww2
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       XBarType.$fShowCompBar2
                       (case ww1 of ww3 { XBarType.Comp ww4 ->
                        XBarType.$w$cshowsPrec28
                          11
                          ww4
                          (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)) })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
98f2ba2bba474a096614fce8e0c245db
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowAdv2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowAdv2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))))) }) -}
15c160cf605dad7956843e2676134150
  $w$cshowsPrec30 ::
    GHC.Prim.Int# -> XBarType.CompBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U(U(U),1*U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ww1 :: XBarType.CompBar ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww2 { XBarType.CompBar ww3 ww4 ->
                     XBarType.$w$cshowsPrec29 11 ww3 ww4 }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> \ x :: GHC.Base.String ->
                      GHC.Base.++ @ GHC.Types.Char XBarType.$fShowCompP2 (g x)
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowCompP2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) }) -}
328fb34493ecf1aaf40b5186b3948325
  $w$cshowsPrec31 ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowLilVerb2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowLilVerb2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))))) }) -}
f4a715d796475566d7c111af861b616c
  $w$cshowsPrec32 ::
    GHC.Prim.Int#
    -> XBarType.LilVerb -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U(1*U)><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: XBarType.LilVerb
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowLilVerbBar2
                        (case ww1 of ww2 { XBarType.LilVerb ww3 ->
                         XBarType.$w$cshowsPrec31 11 ww3 w })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowLilVerbBar2
                           (case ww1 of ww2 { XBarType.LilVerb ww3 ->
                            XBarType.$w$cshowsPrec31
                              11
                              ww3
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w) })) }) -}
32ab0259afd9507ed5fc959ab7bf1219
  $w$cshowsPrec33 ::
    GHC.Prim.Int#
    -> XBarType.LilVerbBar -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U(1*U(1*U))><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: XBarType.LilVerbBar
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowLilVerbP2
                        (case ww1 of ww2 { XBarType.LilVerbBar ww3 ->
                         XBarType.$w$cshowsPrec32 11 ww3 w })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowLilVerbP2
                           (case ww1 of ww2 { XBarType.LilVerbBar ww3 ->
                            XBarType.$w$cshowsPrec32
                              11
                              ww3
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w) })) }) -}
6a687a528d85a951b49cc6ea19bd965e
  $w$cshowsPrec34 ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowNeg2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowNeg2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))))) }) -}
24a49ae7eba7ded0084c540474dd8146
  $w$cshowsPrec35 ::
    GHC.Prim.Int# -> XBarType.Neg -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U(1*U)><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: XBarType.Neg
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowNegBar2
                        (case ww1 of ww2 { XBarType.Neg ww3 ->
                         XBarType.$w$cshowsPrec34 11 ww3 w })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowNegBar2
                           (case ww1 of ww2 { XBarType.Neg ww3 ->
                            XBarType.$w$cshowsPrec34
                              11
                              ww3
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w) })) }) -}
8e6eb92845f72c0231fb701a8d6dc702
  $w$cshowsPrec36 ::
    GHC.Prim.Int#
    -> XBarType.NegBar -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U(1*U(1*U))><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: XBarType.NegBar
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowNegP2
                        (case ww1 of ww2 { XBarType.NegBar ww3 ->
                         XBarType.$w$cshowsPrec35 11 ww3 w })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowNegP2
                           (case ww1 of ww2 { XBarType.NegBar ww3 ->
                            XBarType.$w$cshowsPrec35
                              11
                              ww3
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w) })) }) -}
997596cd5b64a0a5fa431fdf20db7397
  $w$cshowsPrec37 ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowNoun2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowNoun2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))))) }) -}
7d80d8684d6dd80889326630c60cbb7e
  $w$cshowsPrec38 ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowNumb2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowNumb2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))))) }) -}
563460d990dba247d30cc98f7399526c
  $w$cshowsPrec39 ::
    GHC.Prim.Int#
    -> XBarType.Numb -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U(1*U)><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: XBarType.Numb
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowNumbBar2
                        (case ww1 of ww2 { XBarType.Numb ww3 ->
                         XBarType.$w$cshowsPrec38 11 ww3 w })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowNumbBar2
                           (case ww1 of ww2 { XBarType.Numb ww3 ->
                            XBarType.$w$cshowsPrec38
                              11
                              ww3
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w) })) }) -}
8c528b03c973508f73c94b6d74a4387d
  $w$cshowsPrec4 ::
    GHC.Prim.Int# -> XBarType.Adv -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U(1*U)><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: XBarType.Adv
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowAdvBar2
                        (case ww1 of ww2 { XBarType.Adv ww3 ->
                         XBarType.$w$cshowsPrec3 11 ww3 w })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowAdvBar2
                           (case ww1 of ww2 { XBarType.Adv ww3 ->
                            XBarType.$w$cshowsPrec3
                              11
                              ww3
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w) })) }) -}
0192e0d5fd882f11bacef3200cee57fd
  $w$cshowsPrec40 ::
    GHC.Prim.Int#
    -> XBarType.NumbBar -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U(1*U(1*U))><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: XBarType.NumbBar
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowNumbP2
                        (case ww1 of ww2 { XBarType.NumbBar ww3 ->
                         XBarType.$w$cshowsPrec39 11 ww3 w })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowNumbP2
                           (case ww1 of ww2 { XBarType.NumbBar ww3 ->
                            XBarType.$w$cshowsPrec39
                              11
                              ww3
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w) })) }) -}
e005975bea2bfae18b5a28d6fb739e68
  $w$cshowsPrec41 ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowPrep2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowPrep2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))))) }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $w$cshowsPrec42 ::
    GHC.Prim.Int# -> XBarType.PrepBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
0e5f965bdde4f8e7c781fb423bae44f4
  $w$cshowsPrec43 ::
    GHC.Prim.Int#
    -> XBarType.Optional XBarType.AdjP
    -> XBarType.PrepBar
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U><L,1*U><L,1*U>, Inline: [0] -}
ab3b1bdbb8644c8f7819042eb5f69113
  $w$cshowsPrec44 ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowVerb2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowVerb2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))))) }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $w$cshowsPrec5 ::
    GHC.Prim.Int#
    -> XBarType.Optional XBarType.AdvP
    -> XBarType.AdvBar
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U(U(U))>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: XBarType.Optional XBarType.AdvP
                   ww2 :: XBarType.AdvBar ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = XBarType.$fShowAdvP_$s$cshowsPrec XBarType.$fReadAdjP5 ww1
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       XBarType.$fShowAdvP2
                       (f (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (case ww2 of ww3 { XBarType.AdvBar ww4 ->
                              XBarType.$w$cshowsPrec4 11 ww4 x })))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
8eeb3fb98142cc8fbdf24daa24cf89f2
  $w$cshowsPrec6 ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowAgrO2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowAgrO2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))))) }) -}
4fcae3a5333233fb5ecd2b2e07e6bec0
  $w$cshowsPrec7 ::
    GHC.Prim.Int# -> XBarType.AgrO -> XBarType.TenseP -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U><L,U(U)><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: XBarType.AgrO
                   ww2 :: XBarType.TenseP ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = XBarType.$w$cshowsPrec8 11 ww2
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       XBarType.$fShowAgrOBar2
                       (case ww1 of ww3 { XBarType.AgrO ww4 ->
                        XBarType.$w$cshowsPrec6
                          11
                          ww4
                          (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)) })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
15c160cf605dad7956843e2676134150
  $w$cshowsPrec8 ::
    GHC.Prim.Int# -> XBarType.TenseP -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# w :: XBarType.TenseP ->
                 case w of wild {
                   XBarType.TenseP1 b1 b2
                   -> let {
                        f :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww1 { XBarType.DetP ww2 ->
                          XBarType.$w$cshowsPrec12 11 ww2 }
                      } in
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b2 of ww1 { XBarType.TenseBar ww2 ww3 ->
                          XBarType.$w$cshowsPrec17 11 ww2 ww3 }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> \ x :: GHC.Base.String ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             XBarType.$fShowAgrOBar12
                             (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                        GHC.Types.True
                        -> \ x :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                XBarType.$fShowAgrOBar12
                                (f (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))))) }
                   XBarType.TenseP2 b1 b2
                   -> let {
                        f :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww1 { XBarType.ConjP ww2 ww3 ->
                          XBarType.$w$cshowsPrec9 11 ww2 ww3 }
                      } in
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b2 of ww1 { XBarType.TenseBar ww2 ww3 ->
                          XBarType.$w$cshowsPrec17 11 ww2 ww3 }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> \ x :: GHC.Base.String ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             XBarType.$fShowAgrOBar3
                             (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                        GHC.Types.True
                        -> \ x :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                XBarType.$fShowAgrOBar3
                                (f (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (g (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows8
                                            x))))) } }) -}
719e58fd532562f515b459598b9c30e6
  $w$cshowsPrec9 ::
    GHC.Prim.Int#
    -> XBarType.DetP -> XBarType.ConjBar -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U><L,1*U(1*U(U,1*U(1*U)))><L,1*U(U(U),1*U(1*U(U,1*U(1*U))))>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: XBarType.DetP
                   ww2 :: XBarType.ConjBar ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww3 { XBarType.DetP ww4 ->
                     XBarType.$w$cshowsPrec12 11 ww4 }
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { XBarType.ConjBar ww4 ww5 ->
                     XBarType.$w$cshowsPrec10 11 ww4 ww5 }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> \ x :: GHC.Base.String ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowAgrOBar4
                        (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowAgrOBar4
                           (f (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))))) }) -}
b930bb16c92db62a8ecc6836bda6646d
  $wa ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.Adj -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.Adj -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa19
                                @ b
                                (\ a26 :: GHC.Base.String -> w (XBarType.Adj a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadAdj4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $wa1 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.AdjBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0] -}
0e5f965bdde4f8e7c781fb423bae44f4
  $wa10 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.DetBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.DetBar -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (XBarType.$fReadAgrOBar14
                                 @ XBarType.Det
                                 XBarType.$fReadDet
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                   <XBarType.Optional XBarType.Det>_R)
                                @ b
                                (\ a26 :: XBarType.Optional XBarType.Det ->
                                 (GHC.Read.$fReadDouble10
                                    @ XBarType.NounP
                                    XBarType.$fReadAgrOBar11
                                      `cast`
                                    (Trans
                                         (<Text.ParserCombinators.ReadPrec.Prec>_R
                                          ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                        <XBarType.NounP>_R))
                                         (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                   <XBarType.NounP>_R)))
                                    XBarType.$fReadAdjP5)
                                   `cast`
                                 (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.NounP>_R)
                                   @ b
                                   (\ a27 :: XBarType.NounP -> w (XBarType.DetBar a26 a27)))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadAgrOBar10 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $wa11 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.NounP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.NounP -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.NounBar
                                 XBarType.$fReadAgrOBar13
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.NounBar>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.NounBar>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.NounBar>_R)
                                @ b
                                (\ a26 :: XBarType.NounBar -> w (XBarType.NounP a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadAgrOBar12 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $wa12 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.NounBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0] -}
ff9a4450e29f3df4e843ede9d7acd6c5
  $wa13 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.Det -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.Det -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa19
                                @ b
                                (\ a26 :: GHC.Base.String -> w (XBarType.Det a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadDet4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
15c160cf605dad7956843e2676134150
  $wa14 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.TenseBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.TenseBar -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.Tense
                                 XBarType.$fReadAgrOBar29
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.Tense>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.Tense>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.Tense>_R)
                                @ b
                                (\ a26 :: XBarType.Tense ->
                                 (GHC.Read.$fReadDouble10
                                    @ XBarType.AgrSP
                                    XBarType.$fReadAgrOBar20
                                      `cast`
                                    (Trans
                                         (<Text.ParserCombinators.ReadPrec.Prec>_R
                                          ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                        <XBarType.AgrSP>_R))
                                         (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                   <XBarType.AgrSP>_R)))
                                    XBarType.$fReadAdjP5)
                                   `cast`
                                 (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.AgrSP>_R)
                                   @ b
                                   (\ a27 :: XBarType.AgrSP -> w (XBarType.TenseBar a26 a27)))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadAgrOBar19 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
15c160cf605dad7956843e2676134150
  $wa15 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.AgrSP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.AgrSP -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.AgrSBar
                                 XBarType.$fReadAgrOBar22
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.AgrSBar>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.AgrSBar>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.AgrSBar>_R)
                                @ b
                                (\ a26 :: XBarType.AgrSBar -> w (XBarType.AgrSP a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadAgrOBar21 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
15c160cf605dad7956843e2676134150
  $wa16 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.AgrSBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.AgrSBar -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.AgrS
                                 XBarType.$fReadAgrOBar27
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.AgrS>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.AgrS>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.AgrS>_R)
                                @ b
                                (\ a26 :: XBarType.AgrS ->
                                 (GHC.Read.$fReadDouble10
                                    @ XBarType.VerbP
                                    XBarType.$fReadAgrOBar24
                                      `cast`
                                    (Trans
                                         (<Text.ParserCombinators.ReadPrec.Prec>_R
                                          ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                        <XBarType.VerbP>_R))
                                         (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                   <XBarType.VerbP>_R)))
                                    XBarType.$fReadAdjP5)
                                   `cast`
                                 (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.VerbP>_R)
                                   @ b
                                   (\ a27 :: XBarType.VerbP -> w (XBarType.AgrSBar a26 a27)))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadAgrOBar23 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
15c160cf605dad7956843e2676134150
  $wa17 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.VerbP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.VerbP -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.VerbBar
                                 XBarType.$fReadAgrOBar26
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.VerbBar>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.VerbBar>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.VerbBar>_R)
                                @ b
                                (\ a26 :: XBarType.VerbBar -> w (XBarType.VerbP a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadAgrOBar25 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
15c160cf605dad7956843e2676134150
  $wa18 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.VerbBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0] -}
e5c143190278a168e5d7b403f455abe4
  $wa19 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.AgrS -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.AgrS -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa19
                                @ b
                                (\ a26 :: GHC.Base.String -> w (XBarType.AgrS a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadAgrOBar28 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $wa2 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.AdjP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.AdjP -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.AdjBar
                                 XBarType.$fReadAdjBar3
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.AdjBar>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.AdjBar>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.AdjBar>_R)
                                @ b
                                (\ a26 :: XBarType.AdjBar -> w (XBarType.AdjP a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadAdjP4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
dbe1f7fbbcbd7e5405e096305eab9650
  $wa20 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.Tense -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa19
                                @ b
                                (\ a26 :: GHC.Base.String -> w (XBarType.Tense a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadAgrOBar30 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
ec34e8ec7d4af06b6d41565b21812db8
  $wa21 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.ConjP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.ConjP -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.DetP
                                 XBarType.$fReadAgrOBar7
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.DetP>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.DetP>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.DetP>_R)
                                @ b
                                (\ a26 :: XBarType.DetP ->
                                 (GHC.Read.$fReadDouble10
                                    @ XBarType.ConjBar
                                    XBarType.$fReadAgrOBar33
                                      `cast`
                                    (Trans
                                         (<Text.ParserCombinators.ReadPrec.Prec>_R
                                          ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                        <XBarType.ConjBar>_R))
                                         (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                   <XBarType.ConjBar>_R)))
                                    XBarType.$fReadAdjP5)
                                   `cast`
                                 (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.ConjBar>_R)
                                   @ b
                                   (\ a27 :: XBarType.ConjBar -> w (XBarType.ConjP a26 a27)))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadAgrOBar32 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
f6d101cef8c7274cd3630645ec56b0bc
  $wa22 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.ConjBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.ConjBar -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.Conj
                                 XBarType.$fReadAgrOBar35
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.Conj>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.Conj>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.Conj>_R)
                                @ b
                                (\ a26 :: XBarType.Conj ->
                                 (GHC.Read.$fReadDouble10
                                    @ XBarType.DetP
                                    XBarType.$fReadAgrOBar7
                                      `cast`
                                    (Trans
                                         (<Text.ParserCombinators.ReadPrec.Prec>_R
                                          ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                        <XBarType.DetP>_R))
                                         (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                   <XBarType.DetP>_R)))
                                    XBarType.$fReadAdjP5)
                                   `cast`
                                 (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.DetP>_R)
                                   @ b
                                   (\ a27 :: XBarType.DetP -> w (XBarType.ConjBar a26 a27)))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadAgrOBar34 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
1e367eb957e5c67a50ccc7a9e3b8a502
  $wa23 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.Conj -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.Conj -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa19
                                @ b
                                (\ a26 :: GHC.Base.String -> w (XBarType.Conj a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadAgrOBar36 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
77dd7bb417604cc4fd199b560583a9aa
  $wa24 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.AgrOP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.AgrOP -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.AgrOBar
                                 XBarType.$fReadAgrOBar3
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.AgrOBar>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.AgrOBar>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.AgrOBar>_R)
                                @ b
                                (\ a26 :: XBarType.AgrOBar -> w (XBarType.AgrOP a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadAgrOP4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
2a8672ce933713dceedcfab30827e623
  $wa25 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.Asp -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.Asp -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa19
                                @ b
                                (\ a26 :: GHC.Base.String -> w (XBarType.Asp a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadAsp4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
5e82d79669633004faebf6fbe6f002ac
  $wa26 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.AspBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.AspBar -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.Asp
                                 XBarType.$fReadAsp3
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.Asp>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.Asp>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.Asp>_R)
                                @ b
                                (\ a26 :: XBarType.Asp -> w (XBarType.AspBar a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadAspBar4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
cd6a16dda20202540a1ad83240fd2349
  $wa27 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.AspP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.AspP -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.AspBar
                                 XBarType.$fReadAspBar3
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.AspBar>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.AspBar>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.AspBar>_R)
                                @ b
                                (\ a26 :: XBarType.AspBar -> w (XBarType.AspP a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadAspP4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
40db9cbd83f7d0605545d38cc1804a6c
  $wa28 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.Comp -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.Comp -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa19
                                @ b
                                (\ a26 :: GHC.Base.String -> w (XBarType.Comp a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadComp4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
15c160cf605dad7956843e2676134150
  $wa29 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.CompBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.CompBar -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.Comp
                                 XBarType.$fReadComp3
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.Comp>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.Comp>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.Comp>_R)
                                @ b
                                (\ a26 :: XBarType.Comp ->
                                 (GHC.Read.$fReadDouble10
                                    @ XBarType.TenseP
                                    XBarType.$fReadAgrOBar5
                                      `cast`
                                    (Trans
                                         (<Text.ParserCombinators.ReadPrec.Prec>_R
                                          ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                        <XBarType.TenseP>_R))
                                         (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                   <XBarType.TenseP>_R)))
                                    XBarType.$fReadAdjP5)
                                   `cast`
                                 (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.TenseP>_R)
                                   @ b
                                   (\ a27 :: XBarType.TenseP -> w (XBarType.CompBar a26 a27)))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadCompBar4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
abc87d81459d612929b421018965d66d
  $wa3 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.Adv -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.Adv -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa19
                                @ b
                                (\ a26 :: GHC.Base.String -> w (XBarType.Adv a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadAdv4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
15c160cf605dad7956843e2676134150
  $wa30 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.CompP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.CompP -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.CompBar
                                 XBarType.$fReadCompBar3
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.CompBar>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.CompBar>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.CompBar>_R)
                                @ b
                                (\ a26 :: XBarType.CompBar -> w (XBarType.CompP a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadCompP4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
f4d209cd87c39285c8d7b83991fa8fbf
  $wa31 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.LilVerb -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.LilVerb -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa19
                                @ b
                                (\ a26 :: GHC.Base.String -> w (XBarType.LilVerb a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadLilVerb4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
ac8c2e36e4008e09c4da63499abff444
  $wa32 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.LilVerbBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.LilVerbBar -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.LilVerb
                                 XBarType.$fReadLilVerb3
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.LilVerb>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.LilVerb>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.LilVerb>_R)
                                @ b
                                (\ a26 :: XBarType.LilVerb -> w (XBarType.LilVerbBar a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadLilVerbBar4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
7eaef99330e84af37b90cb5bad50ff0e
  $wa33 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.LilVerbP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.LilVerbP -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.LilVerbBar
                                 XBarType.$fReadLilVerbBar3
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.LilVerbBar>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.LilVerbBar>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                   <XBarType.LilVerbBar>_R)
                                @ b
                                (\ a26 :: XBarType.LilVerbBar -> w (XBarType.LilVerbP a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadLilVerbP4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
96952ea5a5218ad752d8ce652c5da427
  $wa34 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.Neg -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.Neg -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa19
                                @ b
                                (\ a26 :: GHC.Base.String -> w (XBarType.Neg a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadNeg4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
181d8ebd5d6c85a6b7191e9c23e6dee8
  $wa35 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.NegBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.NegBar -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.Neg
                                 XBarType.$fReadNeg3
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.Neg>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.Neg>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.Neg>_R)
                                @ b
                                (\ a26 :: XBarType.Neg -> w (XBarType.NegBar a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadNegBar4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
cf93d09aab54ad4cde6d02c62f12f15d
  $wa36 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.NegP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.NegP -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.NegBar
                                 XBarType.$fReadNegBar3
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.NegBar>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.NegBar>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.NegBar>_R)
                                @ b
                                (\ a26 :: XBarType.NegBar -> w (XBarType.NegP a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadNegP4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
05cdb4fe2c7952b900be6f149f0ea287
  $wa37 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.Noun -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.Noun -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa19
                                @ b
                                (\ a26 :: GHC.Base.String -> w (XBarType.Noun a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadNoun4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
695205acf366e6b22a917b33df082656
  $wa38 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.Numb -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.Numb -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa19
                                @ b
                                (\ a26 :: GHC.Base.String -> w (XBarType.Numb a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadNumb4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
aba5d796ddeee6565404e7acc5d0c460
  $wa39 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.NumbBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.NumbBar -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.Numb
                                 XBarType.$fReadNumb3
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.Numb>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.Numb>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.Numb>_R)
                                @ b
                                (\ a26 :: XBarType.Numb -> w (XBarType.NumbBar a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadNumbBar4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
aa3898ead2316a60824e4128d8112d4f
  $wa4 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.AdvBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.AdvBar -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.Adv
                                 XBarType.$fReadAdv3
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.Adv>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.Adv>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.Adv>_R)
                                @ b
                                (\ a26 :: XBarType.Adv -> w (XBarType.AdvBar a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadAdvBar4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
127aba05e55d3ac81adfc46bb6f76025
  $wa40 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.NumbP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.NumbP -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.NumbBar
                                 XBarType.$fReadNumbBar3
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.NumbBar>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.NumbBar>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.NumbBar>_R)
                                @ b
                                (\ a26 :: XBarType.NumbBar -> w (XBarType.NumbP a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadNumbP4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
fcd7d0f4aa198b78097051e9b7ef333b
  $wa41 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.AdvP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0] -}
aa1ce07ce828609c1a852a7a2e41be88
  $wa42 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.PrepP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0] -}
da7569991f48fe4331abea09634b3bf0
  $wa43 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.Prep -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.Prep -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa19
                                @ b
                                (\ a26 :: GHC.Base.String -> w (XBarType.Prep a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadPrep4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $wa44 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.PrepBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0] -}
0e5f965bdde4f8e7c781fb423bae44f4
  $wa45 ::
    ([XBarType.PrepP] -> Text.ParserCombinators.ReadP.P b)
    -> Text.ParserCombinators.ReadP.P b
  {- Arity: 1, Strictness: <L,C(U)>, Inline: [0] -}
bda0d8a64645987400c6ad89735d7e9d
  $wa46 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.Verb -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.Verb -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa19
                                @ b
                                (\ a26 :: GHC.Base.String -> w (XBarType.Verb a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadVerb4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $wa5 ::
    ([XBarType.AdvP] -> Text.ParserCombinators.ReadP.P b)
    -> Text.ParserCombinators.ReadP.P b
  {- Arity: 1, Strictness: <L,C(U)>, Inline: [0] -}
470a8d576531504529865b40f33fb438
  $wa6 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.AgrO -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.AgrO -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa19
                                @ b
                                (\ a26 :: GHC.Base.String -> w (XBarType.AgrO a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadAgrO4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
65bfbcd54eddeb9f45ca13209bfbf0f7
  $wa7 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.AgrOBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.AgrOBar -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.AgrO
                                 XBarType.$fReadAgrO3
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.AgrO>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.AgrO>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.AgrO>_R)
                                @ b
                                (\ a26 :: XBarType.AgrO ->
                                 (GHC.Read.$fReadDouble10
                                    @ XBarType.TenseP
                                    XBarType.$fReadAgrOBar5
                                      `cast`
                                    (Trans
                                         (<Text.ParserCombinators.ReadPrec.Prec>_R
                                          ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                        <XBarType.TenseP>_R))
                                         (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                   <XBarType.TenseP>_R)))
                                    XBarType.$fReadAdjP5)
                                   `cast`
                                 (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.TenseP>_R)
                                   @ b
                                   (\ a27 :: XBarType.TenseP -> w (XBarType.AgrOBar a26 a27)))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadAgrOBar4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
15c160cf605dad7956843e2676134150
  $wa8 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.TenseP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.TenseP -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   a26 :: Text.ParserCombinators.ReadP.P b
                   = case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<=# ww 10) of wild2 {
                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                       GHC.Types.True
                       -> let {
                            lvl78 :: Text.ParserCombinators.ReadP.P b
                            = let {
                                lvl79 :: Text.ParserCombinators.ReadP.P b
                                = (GHC.Read.$fReadDouble10
                                     @ XBarType.ConjP
                                     XBarType.$fReadAgrOBar31
                                       `cast`
                                     (Trans
                                          (<Text.ParserCombinators.ReadPrec.Prec>_R
                                           ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                         <XBarType.ConjP>_R))
                                          (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                    <XBarType.ConjP>_R)))
                                     XBarType.$fReadAdjP5)
                                    `cast`
                                  (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.ConjP>_R)
                                    @ b
                                    (\ a27 :: XBarType.ConjP ->
                                     (GHC.Read.$fReadDouble10
                                        @ XBarType.TenseBar
                                        XBarType.$fReadAgrOBar18
                                          `cast`
                                        (Trans
                                             (<Text.ParserCombinators.ReadPrec.Prec>_R
                                              ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                            <XBarType.TenseBar>_R))
                                             (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                       <XBarType.TenseBar>_R)))
                                        XBarType.$fReadAdjP5)
                                       `cast`
                                     (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                          <XBarType.TenseBar>_R)
                                       @ b
                                       (\ a28 :: XBarType.TenseBar -> w (XBarType.TenseP2 a27 a28)))
                              } in
                              Text.Read.Lex.expect2
                                @ b
                                (\ a98 :: Text.Read.Lex.Lexeme ->
                                 case a98 of wild {
                                   DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                   Text.Read.Lex.Ident a27
                                   -> case GHC.Base.eqString a27 XBarType.$fReadAgrOBar17 of wild1 {
                                        GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                        GHC.Types.True -> lvl79 } })
                          } in
                          let {
                            k :: () -> Text.ParserCombinators.ReadP.P b
                              {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                 Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                            = \ w2 :: () -> lvl78
                          } in
                          Text.ParserCombinators.ReadP.Look
                            @ b
                            (\ a98 :: GHC.Base.String ->
                             (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                               `cast`
                             (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                               @ b
                               k) }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False
                   -> Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        @ b
                        (Text.ParserCombinators.ReadP.Fail @ b)
                        a26
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.DetP
                                 XBarType.$fReadAgrOBar7
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.DetP>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.DetP>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.DetP>_R)
                                @ b
                                (\ a27 :: XBarType.DetP ->
                                 (GHC.Read.$fReadDouble10
                                    @ XBarType.TenseBar
                                    XBarType.$fReadAgrOBar18
                                      `cast`
                                    (Trans
                                         (<Text.ParserCombinators.ReadPrec.Prec>_R
                                          ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                        <XBarType.TenseBar>_R))
                                         (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                   <XBarType.TenseBar>_R)))
                                    XBarType.$fReadAdjP5)
                                   `cast`
                                 (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.TenseBar>_R)
                                   @ b
                                   (\ a28 :: XBarType.TenseBar -> w (XBarType.TenseP1 a27 a28)))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a27
                               -> case GHC.Base.eqString a27 XBarType.$fReadAgrOBar6 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        @ b
                        (Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k))
                        a26 }) -}
0e5f965bdde4f8e7c781fb423bae44f4
  $wa9 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.DetP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.DetP -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.DetBar
                                 XBarType.$fReadAgrOBar9
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.DetBar>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.DetBar>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.DetBar>_R)
                                @ b
                                (\ a26 :: XBarType.DetBar -> w (XBarType.DetP a26))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a26
                               -> case GHC.Base.eqString a26 XBarType.$fReadAgrOBar8 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
b930bb16c92db62a8ecc6836bda6646d
  data Adj = Adj GHC.Base.String
0e5f965bdde4f8e7c781fb423bae44f4
  data AdjBar
    = AdjBar1 XBarType.AdvP XBarType.AdjBar
    | AdjBar2 XBarType.AdjP XBarType.AdjBar
    | AdjBar3 XBarType.AdjBar (XBarType.Optional XBarType.PrepP)
    | AdjBar4 XBarType.Adj (XBarType.Optional XBarType.PrepP)
0e5f965bdde4f8e7c781fb423bae44f4
  data AdjP = AdjP XBarType.AdjBar
abc87d81459d612929b421018965d66d
  data Adv = Adv GHC.Base.String
aa3898ead2316a60824e4128d8112d4f
  data AdvBar = AdvBar XBarType.Adv
0e5f965bdde4f8e7c781fb423bae44f4
  data AdvP = AdvP (XBarType.Optional XBarType.AdvP) XBarType.AdvBar
    RecFlag: Recursive
470a8d576531504529865b40f33fb438
  data AgrO = AgrO GHC.Base.String
65bfbcd54eddeb9f45ca13209bfbf0f7
  data AgrOBar = AgrOBar XBarType.AgrO XBarType.TenseP
77dd7bb417604cc4fd199b560583a9aa
  data AgrOP = AgrOP XBarType.AgrOBar
e5c143190278a168e5d7b403f455abe4
  data AgrS = AgrS GHC.Base.String
15c160cf605dad7956843e2676134150
  data AgrSBar = AgrSBar XBarType.AgrS XBarType.VerbP
15c160cf605dad7956843e2676134150
  data AgrSP = AgrSP XBarType.AgrSBar
2a8672ce933713dceedcfab30827e623
  data Asp = Asp GHC.Base.String
5e82d79669633004faebf6fbe6f002ac
  data AspBar = AspBar XBarType.Asp
cd6a16dda20202540a1ad83240fd2349
  data AspP = AspP XBarType.AspBar
40db9cbd83f7d0605545d38cc1804a6c
  data Comp = Comp GHC.Base.String
15c160cf605dad7956843e2676134150
  data CompBar = CompBar XBarType.Comp XBarType.TenseP
15c160cf605dad7956843e2676134150
  data CompP = CompP XBarType.CompBar
1e367eb957e5c67a50ccc7a9e3b8a502
  data Conj = Conj GHC.Base.String
f6d101cef8c7274cd3630645ec56b0bc
  data ConjBar = ConjBar XBarType.Conj XBarType.DetP
ec34e8ec7d4af06b6d41565b21812db8
  data ConjP = ConjP XBarType.DetP XBarType.ConjBar
ff9a4450e29f3df4e843ede9d7acd6c5
  data Det = Det GHC.Base.String
0e5f965bdde4f8e7c781fb423bae44f4
  data DetBar
    = DetBar (XBarType.Optional XBarType.Det) XBarType.NounP
0e5f965bdde4f8e7c781fb423bae44f4
  data DetP = DetP XBarType.DetBar
f4d209cd87c39285c8d7b83991fa8fbf
  data LilVerb = LilVerb GHC.Base.String
ac8c2e36e4008e09c4da63499abff444
  data LilVerbBar = LilVerbBar XBarType.LilVerb
7eaef99330e84af37b90cb5bad50ff0e
  data LilVerbP = LilVerbP XBarType.LilVerbBar
96952ea5a5218ad752d8ce652c5da427
  data Neg = Neg GHC.Base.String
181d8ebd5d6c85a6b7191e9c23e6dee8
  data NegBar = NegBar XBarType.Neg
cf93d09aab54ad4cde6d02c62f12f15d
  data NegP = NegP XBarType.NegBar
05cdb4fe2c7952b900be6f149f0ea287
  data Noun = Noun GHC.Base.String
0e5f965bdde4f8e7c781fb423bae44f4
  data NounBar
    = NounBar1 XBarType.AdjP XBarType.NounBar
    | NounBar2 XBarType.NounBar XBarType.PrepP
    | NounBar3 XBarType.Noun (XBarType.Optional XBarType.PrepP)
0e5f965bdde4f8e7c781fb423bae44f4
  data NounP = NounP XBarType.NounBar
695205acf366e6b22a917b33df082656
  data Numb = Numb GHC.Base.String
aba5d796ddeee6565404e7acc5d0c460
  data NumbBar = NumbBar XBarType.Numb
127aba05e55d3ac81adfc46bb6f76025
  data NumbP = NumbP XBarType.NumbBar
0e5f965bdde4f8e7c781fb423bae44f4
  data Optional a = YesOpt a | NoOpt
    Promotable
da7569991f48fe4331abea09634b3bf0
  data Prep = Prep GHC.Base.String
0e5f965bdde4f8e7c781fb423bae44f4
  data PrepBar
    = PrepBar1 XBarType.PrepBar (XBarType.Optional XBarType.PrepP)
    | PrepBar2 XBarType.Prep XBarType.DetP
0e5f965bdde4f8e7c781fb423bae44f4
  data PrepP
    = PrepP (XBarType.Optional XBarType.AdjP) XBarType.PrepBar
dbe1f7fbbcbd7e5405e096305eab9650
  data Tense = Tense GHC.Base.String
15c160cf605dad7956843e2676134150
  data TenseBar = TenseBar XBarType.Tense XBarType.AgrSP
15c160cf605dad7956843e2676134150
  data TenseP
    = TenseP1 XBarType.DetP XBarType.TenseBar
    | TenseP2 XBarType.ConjP XBarType.TenseBar
bda0d8a64645987400c6ad89735d7e9d
  data Verb = Verb GHC.Base.String
15c160cf605dad7956843e2676134150
  data VerbBar
    = VerbBar1 XBarType.AdvP XBarType.VerbBar
    | VerbBar2 XBarType.VerbBar XBarType.PrepP
    | VerbBar3 XBarType.VerbBar XBarType.AdvP
    | VerbBar4 XBarType.Verb XBarType.CompP
    | VerbBar5 XBarType.Verb XBarType.DetP
15c160cf605dad7956843e2676134150
  data VerbP = VerbP XBarType.VerbBar
instance GHC.Read.Read [XBarType.Adj] = XBarType.$fReadAdj
instance GHC.Read.Read [XBarType.AdjBar] = XBarType.$fReadAdjBar
instance GHC.Read.Read [XBarType.AdjP] = XBarType.$fReadAdjP
instance GHC.Read.Read [XBarType.Adv] = XBarType.$fReadAdv
instance GHC.Read.Read [XBarType.AdvBar] = XBarType.$fReadAdvBar
instance GHC.Read.Read [XBarType.AdvP] = XBarType.$fReadAdvP
instance GHC.Read.Read [XBarType.AgrO] = XBarType.$fReadAgrO
instance GHC.Read.Read [XBarType.AgrOBar] = XBarType.$fReadAgrOBar
instance GHC.Read.Read [XBarType.AgrOP] = XBarType.$fReadAgrOP
instance GHC.Read.Read [XBarType.AgrS] = XBarType.$fReadAgrS
instance GHC.Read.Read [XBarType.AgrSBar] = XBarType.$fReadAgrSBar
instance GHC.Read.Read [XBarType.AgrSP] = XBarType.$fReadAgrSP
instance GHC.Read.Read [XBarType.Asp] = XBarType.$fReadAsp
instance GHC.Read.Read [XBarType.AspBar] = XBarType.$fReadAspBar
instance GHC.Read.Read [XBarType.AspP] = XBarType.$fReadAspP
instance GHC.Read.Read [XBarType.Comp] = XBarType.$fReadComp
instance GHC.Read.Read [XBarType.CompBar] = XBarType.$fReadCompBar
instance GHC.Read.Read [XBarType.CompP] = XBarType.$fReadCompP
instance GHC.Read.Read [XBarType.Conj] = XBarType.$fReadConj
instance GHC.Read.Read [XBarType.ConjBar] = XBarType.$fReadConjBar
instance GHC.Read.Read [XBarType.ConjP] = XBarType.$fReadConjP
instance GHC.Read.Read [XBarType.Det] = XBarType.$fReadDet
instance GHC.Read.Read [XBarType.DetBar] = XBarType.$fReadDetBar
instance GHC.Read.Read [XBarType.DetP] = XBarType.$fReadDetP
instance GHC.Read.Read [XBarType.LilVerb] = XBarType.$fReadLilVerb
instance GHC.Read.Read [XBarType.LilVerbBar]
  = XBarType.$fReadLilVerbBar
instance GHC.Read.Read [XBarType.LilVerbP]
  = XBarType.$fReadLilVerbP
instance GHC.Read.Read [XBarType.Neg] = XBarType.$fReadNeg
instance GHC.Read.Read [XBarType.NegBar] = XBarType.$fReadNegBar
instance GHC.Read.Read [XBarType.NegP] = XBarType.$fReadNegP
instance GHC.Read.Read [XBarType.Noun] = XBarType.$fReadNoun
instance GHC.Read.Read [XBarType.NounBar] = XBarType.$fReadNounBar
instance GHC.Read.Read [XBarType.NounP] = XBarType.$fReadNounP
instance GHC.Read.Read [XBarType.Numb] = XBarType.$fReadNumb
instance GHC.Read.Read [XBarType.NumbBar] = XBarType.$fReadNumbBar
instance GHC.Read.Read [XBarType.NumbP] = XBarType.$fReadNumbP
instance GHC.Read.Read [XBarType.Optional]
  = XBarType.$fReadOptional
instance GHC.Read.Read [XBarType.Prep] = XBarType.$fReadPrep
instance GHC.Read.Read [XBarType.PrepBar] = XBarType.$fReadPrepBar
instance GHC.Read.Read [XBarType.PrepP] = XBarType.$fReadPrepP
instance GHC.Read.Read [XBarType.Tense] = XBarType.$fReadTense
instance GHC.Read.Read [XBarType.TenseBar]
  = XBarType.$fReadTenseBar
instance GHC.Read.Read [XBarType.TenseP] = XBarType.$fReadTenseP
instance GHC.Read.Read [XBarType.Verb] = XBarType.$fReadVerb
instance GHC.Read.Read [XBarType.VerbBar] = XBarType.$fReadVerbBar
instance GHC.Read.Read [XBarType.VerbP] = XBarType.$fReadVerbP
instance GHC.Show.Show [XBarType.Adj] = XBarType.$fShowAdj
instance GHC.Show.Show [XBarType.AdjBar] = XBarType.$fShowAdjBar
instance GHC.Show.Show [XBarType.AdjP] = XBarType.$fShowAdjP
instance GHC.Show.Show [XBarType.Adv] = XBarType.$fShowAdv
instance GHC.Show.Show [XBarType.AdvBar] = XBarType.$fShowAdvBar
instance GHC.Show.Show [XBarType.AdvP] = XBarType.$fShowAdvP
instance GHC.Show.Show [XBarType.AgrO] = XBarType.$fShowAgrO
instance GHC.Show.Show [XBarType.AgrOBar] = XBarType.$fShowAgrOBar
instance GHC.Show.Show [XBarType.AgrOP] = XBarType.$fShowAgrOP
instance GHC.Show.Show [XBarType.AgrS] = XBarType.$fShowAgrS
instance GHC.Show.Show [XBarType.AgrSBar] = XBarType.$fShowAgrSBar
instance GHC.Show.Show [XBarType.AgrSP] = XBarType.$fShowAgrSP
instance GHC.Show.Show [XBarType.Asp] = XBarType.$fShowAsp
instance GHC.Show.Show [XBarType.AspBar] = XBarType.$fShowAspBar
instance GHC.Show.Show [XBarType.AspP] = XBarType.$fShowAspP
instance GHC.Show.Show [XBarType.Comp] = XBarType.$fShowComp
instance GHC.Show.Show [XBarType.CompBar] = XBarType.$fShowCompBar
instance GHC.Show.Show [XBarType.CompP] = XBarType.$fShowCompP
instance GHC.Show.Show [XBarType.Conj] = XBarType.$fShowConj
instance GHC.Show.Show [XBarType.ConjBar] = XBarType.$fShowConjBar
instance GHC.Show.Show [XBarType.ConjP] = XBarType.$fShowConjP
instance GHC.Show.Show [XBarType.Det] = XBarType.$fShowDet
instance GHC.Show.Show [XBarType.DetBar] = XBarType.$fShowDetBar
instance GHC.Show.Show [XBarType.DetP] = XBarType.$fShowDetP
instance GHC.Show.Show [XBarType.LilVerb] = XBarType.$fShowLilVerb
instance GHC.Show.Show [XBarType.LilVerbBar]
  = XBarType.$fShowLilVerbBar
instance GHC.Show.Show [XBarType.LilVerbP]
  = XBarType.$fShowLilVerbP
instance GHC.Show.Show [XBarType.Neg] = XBarType.$fShowNeg
instance GHC.Show.Show [XBarType.NegBar] = XBarType.$fShowNegBar
instance GHC.Show.Show [XBarType.NegP] = XBarType.$fShowNegP
instance GHC.Show.Show [XBarType.Noun] = XBarType.$fShowNoun
instance GHC.Show.Show [XBarType.NounBar] = XBarType.$fShowNounBar
instance GHC.Show.Show [XBarType.NounP] = XBarType.$fShowNounP
instance GHC.Show.Show [XBarType.Numb] = XBarType.$fShowNumb
instance GHC.Show.Show [XBarType.NumbBar] = XBarType.$fShowNumbBar
instance GHC.Show.Show [XBarType.NumbP] = XBarType.$fShowNumbP
instance GHC.Show.Show [XBarType.Optional]
  = XBarType.$fShowOptional
instance GHC.Show.Show [XBarType.Prep] = XBarType.$fShowPrep
instance GHC.Show.Show [XBarType.PrepBar] = XBarType.$fShowPrepBar
instance GHC.Show.Show [XBarType.PrepP] = XBarType.$fShowPrepP
instance GHC.Show.Show [XBarType.Tense] = XBarType.$fShowTense
instance GHC.Show.Show [XBarType.TenseBar]
  = XBarType.$fShowTenseBar
instance GHC.Show.Show [XBarType.TenseP] = XBarType.$fShowTenseP
instance GHC.Show.Show [XBarType.Verb] = XBarType.$fShowVerb
instance GHC.Show.Show [XBarType.VerbBar] = XBarType.$fShowVerbBar
instance GHC.Show.Show [XBarType.VerbP] = XBarType.$fShowVerbP
"SPEC $cshowsPrec @ AdjP" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                      XBarType.AdjP
  XBarType.$fShowOptional_$cshowsPrec @ XBarType.AdjP $dShow
  = XBarType.$fShowOptional_$s$cshowsPrec
"SPEC $cshowsPrec @ AdvP" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                      XBarType.AdvP
  XBarType.$fShowOptional_$cshowsPrec @ XBarType.AdvP $dShow
  = XBarType.$fShowAdvP_$s$cshowsPrec
"SPEC $cshowsPrec @ Det" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                     XBarType.Det
  XBarType.$fShowOptional_$cshowsPrec @ XBarType.Det $dShow
  = XBarType.$fShowAgrOBar_$s$cshowsPrec
"SPEC $cshowsPrec @ PrepP" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                       XBarType.PrepP
  XBarType.$fShowOptional_$cshowsPrec @ XBarType.PrepP $dShow
  = XBarType.$fShowOptional_$s$cshowsPrec1
"SPEC/XBarType $dmreadsPrec @ Adj" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                               XBarType.Adj
  GHC.Read.$dmreadsPrec @ XBarType.Adj $dRead
  = XBarType.$fReadAdj_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ Adv" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                               XBarType.Adv
  GHC.Read.$dmreadsPrec @ XBarType.Adv $dRead
  = XBarType.$fReadAdv_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ AdvBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                  XBarType.AdvBar
  GHC.Read.$dmreadsPrec @ XBarType.AdvBar $dRead
  = XBarType.$fReadAdvBar_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ AgrO" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                XBarType.AgrO
  GHC.Read.$dmreadsPrec @ XBarType.AgrO $dRead
  = XBarType.$fReadAgrO_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ AgrS" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                XBarType.AgrS
  GHC.Read.$dmreadsPrec @ XBarType.AgrS $dRead
  = XBarType.$fReadAgrS_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ Asp" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                               XBarType.Asp
  GHC.Read.$dmreadsPrec @ XBarType.Asp $dRead
  = XBarType.$fReadAsp_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ AspBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                  XBarType.AspBar
  GHC.Read.$dmreadsPrec @ XBarType.AspBar $dRead
  = XBarType.$fReadAspBar_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ AspP" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                XBarType.AspP
  GHC.Read.$dmreadsPrec @ XBarType.AspP $dRead
  = XBarType.$fReadAspP_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ Comp" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                XBarType.Comp
  GHC.Read.$dmreadsPrec @ XBarType.Comp $dRead
  = XBarType.$fReadComp_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ Conj" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                XBarType.Conj
  GHC.Read.$dmreadsPrec @ XBarType.Conj $dRead
  = XBarType.$fReadConj_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ Det" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                               XBarType.Det
  GHC.Read.$dmreadsPrec @ XBarType.Det $dRead
  = XBarType.$fReadDet_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ LilVerb" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                   XBarType.LilVerb
  GHC.Read.$dmreadsPrec @ XBarType.LilVerb $dRead
  = XBarType.$fReadLilVerb_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ LilVerbBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      XBarType.LilVerbBar
  GHC.Read.$dmreadsPrec @ XBarType.LilVerbBar $dRead
  = XBarType.$fReadLilVerbBar_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ LilVerbP" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                    XBarType.LilVerbP
  GHC.Read.$dmreadsPrec @ XBarType.LilVerbP $dRead
  = XBarType.$fReadLilVerbP_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ Neg" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                               XBarType.Neg
  GHC.Read.$dmreadsPrec @ XBarType.Neg $dRead
  = XBarType.$fReadNeg_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ NegBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                  XBarType.NegBar
  GHC.Read.$dmreadsPrec @ XBarType.NegBar $dRead
  = XBarType.$fReadNegBar_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ NegP" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                XBarType.NegP
  GHC.Read.$dmreadsPrec @ XBarType.NegP $dRead
  = XBarType.$fReadNegP_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ Noun" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                XBarType.Noun
  GHC.Read.$dmreadsPrec @ XBarType.Noun $dRead
  = XBarType.$fReadNoun_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ Numb" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                XBarType.Numb
  GHC.Read.$dmreadsPrec @ XBarType.Numb $dRead
  = XBarType.$fReadNumb_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ NumbBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                   XBarType.NumbBar
  GHC.Read.$dmreadsPrec @ XBarType.NumbBar $dRead
  = XBarType.$fReadNumbBar_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ NumbP" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                 XBarType.NumbP
  GHC.Read.$dmreadsPrec @ XBarType.NumbP $dRead
  = XBarType.$fReadNumbP_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ Prep" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                XBarType.Prep
  GHC.Read.$dmreadsPrec @ XBarType.Prep $dRead
  = XBarType.$fReadPrep_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ Tense" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                 XBarType.Tense
  GHC.Read.$dmreadsPrec @ XBarType.Tense $dRead
  = XBarType.$fReadTense_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ Verb" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                XBarType.Verb
  GHC.Read.$dmreadsPrec @ XBarType.Verb $dRead
  = XBarType.$fReadVerb_$s$dmreadsPrec
"SPEC/XBarType readListDefault @ Adj" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                  XBarType.Adj
  GHC.Read.readListDefault @ XBarType.Adj $dRead
  = XBarType.$fReadAdj_$sreadListDefault
"SPEC/XBarType readListDefault @ AdjBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                     XBarType.AdjBar
  GHC.Read.readListDefault @ XBarType.AdjBar $dRead
  = XBarType.$fReadAdjBar_$sreadListDefault
"SPEC/XBarType readListDefault @ Adv" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                  XBarType.Adv
  GHC.Read.readListDefault @ XBarType.Adv $dRead
  = XBarType.$fReadAdv_$sreadListDefault
"SPEC/XBarType readListDefault @ AdvBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                     XBarType.AdvBar
  GHC.Read.readListDefault @ XBarType.AdvBar $dRead
  = XBarType.$fReadAdvBar_$sreadListDefault
"SPEC/XBarType readListDefault @ AgrO" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                   XBarType.AgrO
  GHC.Read.readListDefault @ XBarType.AgrO $dRead
  = XBarType.$fReadAgrO_$sreadListDefault
"SPEC/XBarType readListDefault @ AgrOBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      XBarType.AgrOBar
  GHC.Read.readListDefault @ XBarType.AgrOBar $dRead
  = XBarType.$fReadAgrOBar_$sreadListDefault
"SPEC/XBarType readListDefault @ AgrOP" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                    XBarType.AgrOP
  GHC.Read.readListDefault @ XBarType.AgrOP $dRead
  = XBarType.$fReadAgrOP_$sreadListDefault
"SPEC/XBarType readListDefault @ AgrS" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                   XBarType.AgrS
  GHC.Read.readListDefault @ XBarType.AgrS $dRead
  = XBarType.$fReadAgrS_$sreadListDefault
"SPEC/XBarType readListDefault @ AgrSBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      XBarType.AgrSBar
  GHC.Read.readListDefault @ XBarType.AgrSBar $dRead
  = XBarType.$fReadAgrSBar_$sreadListDefault
"SPEC/XBarType readListDefault @ AgrSP" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                    XBarType.AgrSP
  GHC.Read.readListDefault @ XBarType.AgrSP $dRead
  = XBarType.$fReadAgrSP_$sreadListDefault
"SPEC/XBarType readListDefault @ Asp" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                  XBarType.Asp
  GHC.Read.readListDefault @ XBarType.Asp $dRead
  = XBarType.$fReadAsp_$sreadListDefault
"SPEC/XBarType readListDefault @ AspBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                     XBarType.AspBar
  GHC.Read.readListDefault @ XBarType.AspBar $dRead
  = XBarType.$fReadAspBar_$sreadListDefault
"SPEC/XBarType readListDefault @ AspP" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                   XBarType.AspP
  GHC.Read.readListDefault @ XBarType.AspP $dRead
  = XBarType.$fReadAspP_$sreadListDefault
"SPEC/XBarType readListDefault @ Comp" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                   XBarType.Comp
  GHC.Read.readListDefault @ XBarType.Comp $dRead
  = XBarType.$fReadComp_$sreadListDefault
"SPEC/XBarType readListDefault @ CompBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      XBarType.CompBar
  GHC.Read.readListDefault @ XBarType.CompBar $dRead
  = XBarType.$fReadCompBar_$sreadListDefault
"SPEC/XBarType readListDefault @ CompP" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                    XBarType.CompP
  GHC.Read.readListDefault @ XBarType.CompP $dRead
  = XBarType.$fReadCompP_$sreadListDefault
"SPEC/XBarType readListDefault @ Conj" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                   XBarType.Conj
  GHC.Read.readListDefault @ XBarType.Conj $dRead
  = XBarType.$fReadConj_$sreadListDefault
"SPEC/XBarType readListDefault @ ConjBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      XBarType.ConjBar
  GHC.Read.readListDefault @ XBarType.ConjBar $dRead
  = XBarType.$fReadConjBar_$sreadListDefault
"SPEC/XBarType readListDefault @ ConjP" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                    XBarType.ConjP
  GHC.Read.readListDefault @ XBarType.ConjP $dRead
  = XBarType.$fReadConjP_$sreadListDefault
"SPEC/XBarType readListDefault @ Det" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                  XBarType.Det
  GHC.Read.readListDefault @ XBarType.Det $dRead
  = XBarType.$fReadDet_$sreadListDefault
"SPEC/XBarType readListDefault @ DetBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                     XBarType.DetBar
  GHC.Read.readListDefault @ XBarType.DetBar $dRead
  = XBarType.$fReadDetBar_$sreadListDefault
"SPEC/XBarType readListDefault @ DetP" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                   XBarType.DetP
  GHC.Read.readListDefault @ XBarType.DetP $dRead
  = XBarType.$fReadDetP_$sreadListDefault
"SPEC/XBarType readListDefault @ LilVerb" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      XBarType.LilVerb
  GHC.Read.readListDefault @ XBarType.LilVerb $dRead
  = XBarType.$fReadLilVerb_$sreadListDefault
"SPEC/XBarType readListDefault @ LilVerbBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                         XBarType.LilVerbBar
  GHC.Read.readListDefault @ XBarType.LilVerbBar $dRead
  = XBarType.$fReadLilVerbBar_$sreadListDefault
"SPEC/XBarType readListDefault @ LilVerbP" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                       XBarType.LilVerbP
  GHC.Read.readListDefault @ XBarType.LilVerbP $dRead
  = XBarType.$fReadLilVerbP_$sreadListDefault
"SPEC/XBarType readListDefault @ Neg" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                  XBarType.Neg
  GHC.Read.readListDefault @ XBarType.Neg $dRead
  = XBarType.$fReadNeg_$sreadListDefault
"SPEC/XBarType readListDefault @ NegBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                     XBarType.NegBar
  GHC.Read.readListDefault @ XBarType.NegBar $dRead
  = XBarType.$fReadNegBar_$sreadListDefault
"SPEC/XBarType readListDefault @ NegP" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                   XBarType.NegP
  GHC.Read.readListDefault @ XBarType.NegP $dRead
  = XBarType.$fReadNegP_$sreadListDefault
"SPEC/XBarType readListDefault @ Noun" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                   XBarType.Noun
  GHC.Read.readListDefault @ XBarType.Noun $dRead
  = XBarType.$fReadNoun_$sreadListDefault
"SPEC/XBarType readListDefault @ NounBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      XBarType.NounBar
  GHC.Read.readListDefault @ XBarType.NounBar $dRead
  = XBarType.$fReadNounBar_$sreadListDefault
"SPEC/XBarType readListDefault @ NounP" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                    XBarType.NounP
  GHC.Read.readListDefault @ XBarType.NounP $dRead
  = XBarType.$fReadNounP_$sreadListDefault
"SPEC/XBarType readListDefault @ Numb" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                   XBarType.Numb
  GHC.Read.readListDefault @ XBarType.Numb $dRead
  = XBarType.$fReadNumb_$sreadListDefault
"SPEC/XBarType readListDefault @ NumbBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      XBarType.NumbBar
  GHC.Read.readListDefault @ XBarType.NumbBar $dRead
  = XBarType.$fReadNumbBar_$sreadListDefault
"SPEC/XBarType readListDefault @ NumbP" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                    XBarType.NumbP
  GHC.Read.readListDefault @ XBarType.NumbP $dRead
  = XBarType.$fReadNumbP_$sreadListDefault
"SPEC/XBarType readListDefault @ Prep" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                   XBarType.Prep
  GHC.Read.readListDefault @ XBarType.Prep $dRead
  = XBarType.$fReadPrep_$sreadListDefault
"SPEC/XBarType readListDefault @ PrepBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      XBarType.PrepBar
  GHC.Read.readListDefault @ XBarType.PrepBar $dRead
  = XBarType.$fReadPrepBar_$sreadListDefault
"SPEC/XBarType readListDefault @ Tense" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                    XBarType.Tense
  GHC.Read.readListDefault @ XBarType.Tense $dRead
  = XBarType.$fReadTense_$sreadListDefault
"SPEC/XBarType readListDefault @ TenseBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                       XBarType.TenseBar
  GHC.Read.readListDefault @ XBarType.TenseBar $dRead
  = XBarType.$fReadTenseBar_$sreadListDefault
"SPEC/XBarType readListDefault @ TenseP" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                     XBarType.TenseP
  GHC.Read.readListDefault @ XBarType.TenseP $dRead
  = XBarType.$fReadTenseP_$sreadListDefault
"SPEC/XBarType readListDefault @ Verb" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                   XBarType.Verb
  GHC.Read.readListDefault @ XBarType.Verb $dRead
  = XBarType.$fReadVerb_$sreadListDefault
"SPEC/XBarType readListDefault @ VerbBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      XBarType.VerbBar
  GHC.Read.readListDefault @ XBarType.VerbBar $dRead
  = XBarType.$fReadVerbBar_$sreadListDefault
"SPEC/XBarType readListDefault @ VerbP" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                    XBarType.VerbP
  GHC.Read.readListDefault @ XBarType.VerbP $dRead
  = XBarType.$fReadVerbP_$sreadListDefault
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

