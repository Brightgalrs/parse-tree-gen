
==================== FINAL INTERFACE ====================
2016-09-10 01:26:13.194314 UTC

interface parse_Iaj1kxNSeaZ4PQxYHNqcNV:ParseTreeGen 7103
  interface hash: c933454fa50f6d2c0000698b878fe70d
  ABI hash: 488e3041134793ab7ac16118c2354d14
  export-list hash: 16f0cbfbc18df2707df2c6542fa145c4
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  ParseTreeGen.loadInputData
  ParseTreeGen.makeTenseP
module dependencies: XBarType
package dependencies: MonadPrompt-1.0.0.5@Monad_5vpMHuuRBzi4bKjpRN3A9L
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      flexible-defaults-0.0.1.2@flexi_70LqvhG3vbS8bRvV8pHtMk
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      monad-loops-0.4.3@monad_LQiHRUYhFhYBU7nOOWDOrb
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L
                      random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW
                      random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr
                      rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG
                      syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE template-haskell-2.10.0.0
                      th-extras-0.0.0.4@thext_LRY1RUMy7ShLl2tqhMyHdO
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source
         syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE:Data.Generics.Instances
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
import  -/  base-4.8.2.0:Control.Monad 480c5067477275068c9b98be08410df9
import  -/  base-4.8.2.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.IO bb5b81adcea33b14bd4abe16d7dde45f
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Read b423b4506a014855edbd329b567629f3
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0248c1e850b7ea124cf7a2e1669ebf67
import  -/  base-4.8.2.0:Text.Read ef0ef92fb7358ae94bab089940adfd2a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  XBarType 758163c563a402958d735624c4f3e249
  exports: 9a6f58c0646d3f3249ba5ed9f479e552
  Adj 81e2b89ae3ded9c727dddfb416822ca4
  AdjBar daae34c8e6a5d64fdf2e47d704145a41
  AdjBar1 1c9c5f5fe69ea8ca5b51e3cfde5403b0
  AdjBar2 7c961ccf1acbf7147424f5ec59e324c6
  AdjBar3 868ca7a711cefc8e5b7d11444186886e
  AdjBar4 f6af8ca7f5a5b7f1743a1f016f0fce76
  AdjP 218d690bd36f6eb99a571fd7017c96b6
  AdjP daae34c8e6a5d64fdf2e47d704145a41
  Adv 5313dbf85de5f50153a0911032dc11c8
  AdvBar 9cd76d4eabcd1cc791d976d71bc3b0d1
  AdvBar 69987230c888871bddf1a4d23423f6b9
  AdvP 080107e2d949a6aaf3703c757fd9cde8
  AdvP daae34c8e6a5d64fdf2e47d704145a41
  Comp 65e1f9bd1bce4595f705963a06136541
  CompBar d65ad460581b0c30917dd7ddb417a7e5
  CompBar 3e0fc170e7b7f803377a33d5beb3e4e7
  CompP 23213171cb6b41cb698672f6bc19b471
  CompP 3e0fc170e7b7f803377a33d5beb3e4e7
  Conj 7124f8563e6ece3f71d22b89782c5f9b
  ConjBar b3133bdb4102e6ce93d6ab45725ed11c
  ConjBar 9e91607c5fea5b754ceda5471029cb22
  ConjP a240fe54107e8c607674751ec54d1d39
  ConjP 1f5ef3d65fca745f4e70f773e640102a
  Det fe0d549108cf7bce62a6d4e68b6213fa
  DetBar a05b606c35fb7d8ea4ed57d8dd28e864
  DetBar daae34c8e6a5d64fdf2e47d704145a41
  DetP 4fc48111d872d352ce3bd182e7361dc1
  DetP daae34c8e6a5d64fdf2e47d704145a41
  NoOpt 7ea2cde688f10bc236801a4e6b023fc2
  Noun 45436846b25a415f5c0a579077a119b3
  NounBar daae34c8e6a5d64fdf2e47d704145a41
  NounBar1 8818c618392d261f2d92c24745265047
  NounBar2 313ed4b264e2bddbfec5a546270834be
  NounBar3 ffa963878533f0aeab657f8034c39933
  NounP 119cb57f33b767f87f07812761b32201
  NounP daae34c8e6a5d64fdf2e47d704145a41
  Prep 4c2700393deacbeda46581b2544ccf54
  PrepBar daae34c8e6a5d64fdf2e47d704145a41
  PrepBar1 13aa9271ea0f69b473ee7abab6b2c074
  PrepBar2 36dc4252c242a30096519aff793c061d
  PrepP 5a498697832aa4005a471306ee67175f
  PrepP daae34c8e6a5d64fdf2e47d704145a41
  Tense 6aff49e622b65d7bf35f81d3ad8deb0c
  Tense 9df32b0968acbe1b183020ea07356353
  TenseBar 8f41868cb4a7e3322aefb5df5d4dadb7
  TenseBar 3e0fc170e7b7f803377a33d5beb3e4e7
  TenseP 3e0fc170e7b7f803377a33d5beb3e4e7
  TenseP1 6d708ec48fb7f63e8c9b35ec362d9dc7
  TenseP2 0ed8d780ce21c897e894aa5334e75612
  Verb 213929e5e19f84ddf0f4fc3e0db0554e
  VerbBar 3e0fc170e7b7f803377a33d5beb3e4e7
  VerbBar1 f1530e53c577d172c66d9a036061260a
  VerbBar2 c66730068a8359fc9ba363d3ac2574a6
  VerbBar3 d513aeeb8ac42cc357bb50cc7e582dad
  VerbBar4 424817bb876dd55a77fcb9175ce123e4
  VerbBar5 ce669019e662de130570593c467986f4
  VerbP f5f4261d0c2e601ef1c4dd04c9bf7614
  VerbP 3e0fc170e7b7f803377a33d5beb3e4e7
  YesOpt a543208aff2d08410dc78758a9b82ffc
import  -/  random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L:Data.Random.Extras 5dc1684f88e3f2655bfb5d7aca60bf5c
import  -/  rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG:Data.RVar 9b7fbdb5f1778e76b8a65f45a17cccb1
4f35d498afd62027f3c17d19c497e01b
  $wmakeTenseP ::
    ParseTreeGen.InputData
    -> GHC.Prim.Int# -> Data.RVar.RVar XBarType.TenseP
  {- Arity: 2, Strictness: <L,U(U,U,U,U,U,U,U,U)><L,U>, Inline: [0],
     Unfolding: (\ w :: ParseTreeGen.InputData ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 0) of wild {
                   GHC.Types.False
                   -> let {
                        x :: Data.RVar.RVarT
                               Data.Functor.Identity.Identity
                               (Data.RVar.RVarT Data.Functor.Identity.Identity XBarType.TenseP)
                        = let {
                            a12 :: GHC.Prim.Int# = GHC.Prim.-# ww 1
                          } in
                          Data.Random.Extras.choice
                            @ (Data.RVar.RVarT Data.Functor.Identity.Identity XBarType.TenseP)
                            (GHC.Types.:
                               @ (Data.RVar.RVarT Data.Functor.Identity.Identity XBarType.TenseP)
                               (ParseTreeGen.makeTenseP1 w (GHC.Types.I# a12))
                               (GHC.Types.:
                                  @ (Data.RVar.RVarT Data.Functor.Identity.Identity XBarType.TenseP)
                                  (let {
                                     a13 :: GHC.Prim.Int# = GHC.Prim.-# a12 1
                                   } in
                                   let {
                                     a14 :: GHC.Prim.Int# = GHC.Prim.-# a13 1
                                   } in
                                   let {
                                     m1 :: Data.RVar.RVarT
                                             Data.Functor.Identity.Identity XBarType.DetP
                                     = ParseTreeGen.makeDetP w (GHC.Types.I# a14)
                                   } in
                                   let {
                                     m2 :: Data.RVar.RVarT
                                             Data.Functor.Identity.Identity XBarType.Conj
                                     = case w of wild1 { ParseTreeGen.InputData ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                                       Data.Random.Extras.choice @ XBarType.Conj ds7 }
                                   } in
                                   let {
                                     m3 :: Data.RVar.RVarT
                                             Data.Functor.Identity.Identity XBarType.DetP
                                     = ParseTreeGen.makeDetP w (GHC.Types.I# (GHC.Prim.-# a14 1))
                                   } in
                                   let {
                                     m4 :: Data.RVar.RVarT
                                             Data.Functor.Identity.Identity XBarType.VerbBar
                                     = ParseTreeGen.$wmakeVerbBar
                                         w
                                         (GHC.Prim.-# (GHC.Prim.-# a13 1) 1)
                                   } in
                                   (\ @ b1
                                      eta :: XBarType.TenseP -> b1
                                      eta1 :: forall a15.
                                              Control.Monad.Prompt.Lift
                                                Data.Random.Source.Internal.Prim.Prim
                                                Data.Functor.Identity.Identity
                                                a15
                                              -> (a15 -> b1) -> b1 ->
                                    m1
                                      `cast`
                                    (Trans
                                         (Trans
                                              (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                              (Control.Monad.Prompt.NTCo:PromptT[0]
                                                   <Data.Random.Source.Internal.Prim.Prim>_R
                                                   <Data.Functor.Identity.Identity>_R) <XBarType.DetP>_N)
                                         (Control.Monad.Prompt.NTCo:Prompt[0]
                                              <Control.Monad.Prompt.Lift
                                                 Data.Random.Source.Internal.Prim.Prim
                                                 Data.Functor.Identity.Identity>_R
                                              <XBarType.DetP>_R))
                                      @ b1
                                      (\ x1 :: XBarType.DetP ->
                                       case x1 of x2 { XBarType.DetP ipv ->
                                       m2
                                         `cast`
                                       (Trans
                                            (Trans
                                                 (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                                 (Control.Monad.Prompt.NTCo:PromptT[0]
                                                      <Data.Random.Source.Internal.Prim.Prim>_R
                                                      <Data.Functor.Identity.Identity>_R) <XBarType.Conj>_N)
                                            (Control.Monad.Prompt.NTCo:Prompt[0]
                                                 <Control.Monad.Prompt.Lift
                                                    Data.Random.Source.Internal.Prim.Prim
                                                    Data.Functor.Identity.Identity>_R
                                                 <XBarType.Conj>_R))
                                         @ b1
                                         (\ x3 :: XBarType.Conj ->
                                          case x3 of x4 { XBarType.Conj ipv1 ->
                                          m3
                                            `cast`
                                          (Trans
                                               (Trans
                                                    (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                                    (Control.Monad.Prompt.NTCo:PromptT[0]
                                                         <Data.Random.Source.Internal.Prim.Prim>_R
                                                         <Data.Functor.Identity.Identity>_R) <XBarType.DetP>_N)
                                               (Control.Monad.Prompt.NTCo:Prompt[0]
                                                    <Control.Monad.Prompt.Lift
                                                       Data.Random.Source.Internal.Prim.Prim
                                                       Data.Functor.Identity.Identity>_R
                                                    <XBarType.DetP>_R))
                                            @ b1
                                            (\ x5 :: XBarType.DetP ->
                                             case x5 of x6 { XBarType.DetP ipv2 ->
                                             let {
                                               a15 :: XBarType.ConjBar {- Strictness: m -}
                                               = XBarType.ConjBar x4 x6
                                             } in
                                             let {
                                               a16 :: XBarType.ConjP {- Strictness: m -}
                                               = XBarType.ConjP x2 a15
                                             } in
                                             ParseTreeGen.makeTenseP_m1
                                               `cast`
                                             (Trans
                                                  (Trans
                                                       (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                                       (Control.Monad.Prompt.NTCo:PromptT[0]
                                                            <Data.Random.Source.Internal.Prim.Prim>_R
                                                            <Data.Functor.Identity.Identity>_R) <XBarType.Tense>_N)
                                                  (Control.Monad.Prompt.NTCo:Prompt[0]
                                                       <Control.Monad.Prompt.Lift
                                                          Data.Random.Source.Internal.Prim.Prim
                                                          Data.Functor.Identity.Identity>_R
                                                       <XBarType.Tense>_R))
                                               @ b1
                                               (\ x7 :: XBarType.Tense ->
                                                case x7 of x8 { XBarType.Tense ipv3 ->
                                                m4
                                                  `cast`
                                                (Trans
                                                     (Trans
                                                          (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                                          (Control.Monad.Prompt.NTCo:PromptT[0]
                                                               <Data.Random.Source.Internal.Prim.Prim>_R
                                                               <Data.Functor.Identity.Identity>_R) <XBarType.VerbBar>_N)
                                                     (Control.Monad.Prompt.NTCo:Prompt[0]
                                                          <Control.Monad.Prompt.Lift
                                                             Data.Random.Source.Internal.Prim.Prim
                                                             Data.Functor.Identity.Identity>_R
                                                          <XBarType.VerbBar>_R))
                                                  @ b1
                                                  (\ x9 :: XBarType.VerbBar ->
                                                   case x9 of x10 { DEFAULT ->
                                                   eta
                                                     (XBarType.TenseP2
                                                        a16
                                                        (XBarType.TenseBar
                                                           x8
                                                           (XBarType.VerbP x10))) })
                                                  eta1 })
                                               eta1 })
                                            eta1 })
                                         eta1 })
                                      eta1)
                                     `cast`
                                   (Trans
                                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                                  <Control.Monad.Prompt.Lift
                                                     Data.Random.Source.Internal.Prim.Prim
                                                     Data.Functor.Identity.Identity>_R
                                                  <XBarType.TenseP>_R))
                                        (Trans
                                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                                       <Data.Functor.Identity.Identity>_R))
                                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <XBarType.TenseP>_N)))
                                  (GHC.Types.[]
                                     @ (Data.RVar.RVarT
                                          Data.Functor.Identity.Identity XBarType.TenseP))))
                      } in
                      (\ @ b1
                         eta2 :: XBarType.TenseP -> b1
                         eta3 :: forall a12.
                                 Control.Monad.Prompt.Lift
                                   Data.Random.Source.Internal.Prim.Prim
                                   Data.Functor.Identity.Identity
                                   a12
                                 -> (a12 -> b1) -> b1 ->
                       x `cast`
                       (Trans
                            (Trans
                                 (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                 (Control.Monad.Prompt.NTCo:PromptT[0]
                                      <Data.Random.Source.Internal.Prim.Prim>_R
                                      <Data.Functor.Identity.Identity>_R) <Data.RVar.RVarT
                                                                             Data.Functor.Identity.Identity
                                                                             XBarType.TenseP>_N)
                            (Control.Monad.Prompt.NTCo:Prompt[0]
                                 <Control.Monad.Prompt.Lift
                                    Data.Random.Source.Internal.Prim.Prim
                                    Data.Functor.Identity.Identity>_R
                                 <Data.RVar.RVarT
                                    Data.Functor.Identity.Identity XBarType.TenseP>_R))
                         @ b1
                         (\ x1 :: Data.RVar.RVarT
                                    Data.Functor.Identity.Identity XBarType.TenseP ->
                          x1
                            `cast`
                          (Trans
                               (Trans
                                    (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                    (Control.Monad.Prompt.NTCo:PromptT[0]
                                         <Data.Random.Source.Internal.Prim.Prim>_R
                                         <Data.Functor.Identity.Identity>_R) <XBarType.TenseP>_N)
                               (Control.Monad.Prompt.NTCo:Prompt[0]
                                    <Control.Monad.Prompt.Lift
                                       Data.Random.Source.Internal.Prim.Prim
                                       Data.Functor.Identity.Identity>_R
                                    <XBarType.TenseP>_R))
                            @ b1
                            eta2
                            eta3)
                         eta3)
                        `cast`
                      (Trans
                           (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                     <Control.Monad.Prompt.Lift
                                        Data.Random.Source.Internal.Prim.Prim
                                        Data.Functor.Identity.Identity>_R
                                     <XBarType.TenseP>_R))
                           (Trans
                                (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                          <Data.Random.Source.Internal.Prim.Prim>_R
                                          <Data.Functor.Identity.Identity>_R))
                                (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <XBarType.TenseP>_N))
                   GHC.Types.True
                   -> let {
                        x :: Data.RVar.RVarT
                               Data.Functor.Identity.Identity
                               (Data.RVar.RVarT Data.Functor.Identity.Identity XBarType.TenseP)
                        = Data.Random.Extras.choice
                            @ (Data.RVar.RVarT Data.Functor.Identity.Identity XBarType.TenseP)
                            (GHC.Types.:
                               @ (Data.RVar.RVarT Data.Functor.Identity.Identity XBarType.TenseP)
                               (ParseTreeGen.makeTenseP1 w ParseTreeGen.makeTenseP2)
                               (GHC.Types.[]
                                  @ (Data.RVar.RVarT
                                       Data.Functor.Identity.Identity XBarType.TenseP)))
                      } in
                      (\ @ b1
                         eta2 :: XBarType.TenseP -> b1
                         eta3 :: forall a12.
                                 Control.Monad.Prompt.Lift
                                   Data.Random.Source.Internal.Prim.Prim
                                   Data.Functor.Identity.Identity
                                   a12
                                 -> (a12 -> b1) -> b1 ->
                       x `cast`
                       (Trans
                            (Trans
                                 (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                 (Control.Monad.Prompt.NTCo:PromptT[0]
                                      <Data.Random.Source.Internal.Prim.Prim>_R
                                      <Data.Functor.Identity.Identity>_R) <Data.RVar.RVarT
                                                                             Data.Functor.Identity.Identity
                                                                             XBarType.TenseP>_N)
                            (Control.Monad.Prompt.NTCo:Prompt[0]
                                 <Control.Monad.Prompt.Lift
                                    Data.Random.Source.Internal.Prim.Prim
                                    Data.Functor.Identity.Identity>_R
                                 <Data.RVar.RVarT
                                    Data.Functor.Identity.Identity XBarType.TenseP>_R))
                         @ b1
                         (\ x1 :: Data.RVar.RVarT
                                    Data.Functor.Identity.Identity XBarType.TenseP ->
                          x1
                            `cast`
                          (Trans
                               (Trans
                                    (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                    (Control.Monad.Prompt.NTCo:PromptT[0]
                                         <Data.Random.Source.Internal.Prim.Prim>_R
                                         <Data.Functor.Identity.Identity>_R) <XBarType.TenseP>_N)
                               (Control.Monad.Prompt.NTCo:Prompt[0]
                                    <Control.Monad.Prompt.Lift
                                       Data.Random.Source.Internal.Prim.Prim
                                       Data.Functor.Identity.Identity>_R
                                    <XBarType.TenseP>_R))
                            @ b1
                            eta2
                            eta3)
                         eta3)
                        `cast`
                      (Trans
                           (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                     <Control.Monad.Prompt.Lift
                                        Data.Random.Source.Internal.Prim.Prim
                                        Data.Functor.Identity.Identity>_R
                                     <XBarType.TenseP>_R))
                           (Trans
                                (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                          <Data.Random.Source.Internal.Prim.Prim>_R
                                          <Data.Functor.Identity.Identity>_R))
                                (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <XBarType.TenseP>_N)) }) -}
b8f4f0a34e8422bf03262122500bc15d
  $wmakeVerbBar ::
    ParseTreeGen.InputData
    -> GHC.Prim.Int# -> Data.RVar.RVar XBarType.VerbBar
  {- Arity: 2, Strictness: <L,U(U,U,U,U,U,U,U,U)><L,U>,
     Inline: [0] -}
04dfadcefaab164ee684e435f540e475
  data InputData
    = InputData {iNoun :: [XBarType.Noun],
                 iVerb :: [XBarType.Verb],
                 iAdj :: [XBarType.Adj],
                 iAdv :: [XBarType.Adv],
                 iPrep :: [XBarType.Prep],
                 iDet :: [XBarType.Det],
                 iComp :: [XBarType.Comp],
                 iConj :: [XBarType.Conj]}
ae3fc18e4759a9e4f013d09011868042
  iAdj :: ParseTreeGen.InputData -> [XBarType.Adj]
  RecSel ParseTreeGen.InputData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLL),1*U(A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: ParseTreeGen.InputData ->
                 case ds of wild { ParseTreeGen.InputData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds3 }) -}
49ff75b80425156f2e262d653406802b
  iAdv :: ParseTreeGen.InputData -> [XBarType.Adv]
  RecSel ParseTreeGen.InputData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLL),1*U(A,A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: ParseTreeGen.InputData ->
                 case ds of wild { ParseTreeGen.InputData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds4 }) -}
cb660b1d56a664f6a5a7885f6fcccf13
  iComp :: ParseTreeGen.InputData -> [XBarType.Comp]
  RecSel ParseTreeGen.InputData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSL),1*U(A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: ParseTreeGen.InputData ->
                 case ds of wild { ParseTreeGen.InputData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds7 }) -}
d39293c331f5cdc9736dbec7599d4cc8
  iConj :: ParseTreeGen.InputData -> [XBarType.Conj]
  RecSel ParseTreeGen.InputData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLS),1*U(A,A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: ParseTreeGen.InputData ->
                 case ds of wild { ParseTreeGen.InputData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds8 }) -}
1aa95743a09733f5cc5fd848190f4842
  iDet :: ParseTreeGen.InputData -> [XBarType.Det]
  RecSel ParseTreeGen.InputData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLL),1*U(A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: ParseTreeGen.InputData ->
                 case ds of wild { ParseTreeGen.InputData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds6 }) -}
0525c1bfc1e4a8333f01d7aa652418d3
  iNoun :: ParseTreeGen.InputData -> [XBarType.Noun]
  RecSel ParseTreeGen.InputData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),1*U(1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: ParseTreeGen.InputData ->
                 case ds of wild { ParseTreeGen.InputData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds1 }) -}
81721b194cb45f4a8478f969e76cb497
  iPrep :: ParseTreeGen.InputData -> [XBarType.Prep]
  RecSel ParseTreeGen.InputData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLL),1*U(A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: ParseTreeGen.InputData ->
                 case ds of wild { ParseTreeGen.InputData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds5 }) -}
9cf5121317d08bffb24ca81cdc901e20
  iVerb :: ParseTreeGen.InputData -> [XBarType.Verb]
  RecSel ParseTreeGen.InputData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLL),1*U(A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: ParseTreeGen.InputData ->
                 case ds of wild { ParseTreeGen.InputData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds2 }) -}
f244dabe577873185a668be4a7349a13
  loadInputData :: GHC.Types.IO ParseTreeGen.InputData
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                ParseTreeGen.loadInputData1
                  `cast`
                (Sym (GHC.Types.NTCo:IO[0] <ParseTreeGen.InputData>_R)) -}
2e15c4a4cab224299efd992bc94cd9be
  loadInputData1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ParseTreeGen.InputData #)
  {- Arity: 1, Strictness: <L,U> -}
01abb69059a10010e9c562da281b15d1
  makeDetP ::
    ParseTreeGen.InputData
    -> GHC.Types.Int -> Data.RVar.RVar XBarType.DetP
  {- Arity: 2, Strictness: <L,U(U,A,U,U,U,U,A,A)><L,1*U(U)> -}
2d60e8da3eac049b371ca10df02e00d4
  makeTenseP ::
    ParseTreeGen.InputData
    -> GHC.Types.Int -> Data.RVar.RVar XBarType.TenseP
  {- Arity: 2, Strictness: <L,U(U,U,U,U,U,U,U,U)><S,1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: ParseTreeGen.InputData w1 :: GHC.Types.Int ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 ParseTreeGen.$wmakeTenseP w ww1 }) -}
9672cd9be1a1e24639bafbb9f0acf06d
  makeTenseP1 ::
    ParseTreeGen.InputData
    -> GHC.Types.Int -> Data.RVar.RVar XBarType.TenseP
  {- Arity: 2, Strictness: <L,U(U,U,U,U,U,U,U,U)><L,1*U(U)>,
     Unfolding: (\ idata :: ParseTreeGen.InputData n :: GHC.Types.Int ->
                 let {
                   i :: GHC.Types.Int
                   = case n of wild { GHC.Types.I# x ->
                     GHC.Types.I# (GHC.Prim.-# x 1) }
                 } in
                 let {
                   m1 :: Data.RVar.RVarT Data.Functor.Identity.Identity XBarType.DetP
                   = ParseTreeGen.makeDetP idata i
                 } in
                 let {
                   m2 :: Data.RVar.RVarT
                           Data.Functor.Identity.Identity XBarType.VerbBar
                   = case i of wild { GHC.Types.I# x ->
                     ParseTreeGen.$wmakeVerbBar
                       idata
                       (GHC.Prim.-# (GHC.Prim.-# x 1) 1) }
                 } in
                 (\ @ b1
                    eta :: XBarType.TenseP -> b1
                    eta1 :: forall a12.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a12
                            -> (a12 -> b1) -> b1 ->
                  m1
                    `cast`
                  (Trans
                       (Trans
                            (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                            (Control.Monad.Prompt.NTCo:PromptT[0]
                                 <Data.Random.Source.Internal.Prim.Prim>_R
                                 <Data.Functor.Identity.Identity>_R) <XBarType.DetP>_N)
                       (Control.Monad.Prompt.NTCo:Prompt[0]
                            <Control.Monad.Prompt.Lift
                               Data.Random.Source.Internal.Prim.Prim
                               Data.Functor.Identity.Identity>_R
                            <XBarType.DetP>_R))
                    @ b1
                    (\ x :: XBarType.DetP ->
                     case x of x1 { XBarType.DetP ipv ->
                     ParseTreeGen.makeTenseP_m1
                       `cast`
                     (Trans
                          (Trans
                               (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                               (Control.Monad.Prompt.NTCo:PromptT[0]
                                    <Data.Random.Source.Internal.Prim.Prim>_R
                                    <Data.Functor.Identity.Identity>_R) <XBarType.Tense>_N)
                          (Control.Monad.Prompt.NTCo:Prompt[0]
                               <Control.Monad.Prompt.Lift
                                  Data.Random.Source.Internal.Prim.Prim
                                  Data.Functor.Identity.Identity>_R
                               <XBarType.Tense>_R))
                       @ b1
                       (\ x2 :: XBarType.Tense ->
                        case x2 of x3 { XBarType.Tense ipv1 ->
                        m2
                          `cast`
                        (Trans
                             (Trans
                                  (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                  (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R) <XBarType.VerbBar>_N)
                             (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <XBarType.VerbBar>_R))
                          @ b1
                          (\ x4 :: XBarType.VerbBar ->
                           case x4 of x5 { DEFAULT ->
                           eta
                             (XBarType.TenseP1 x1 (XBarType.TenseBar x3 (XBarType.VerbP x5))) })
                          eta1 })
                       eta1 })
                    eta1)
                   `cast`
                 (Trans
                      (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                <Control.Monad.Prompt.Lift
                                   Data.Random.Source.Internal.Prim.Prim
                                   Data.Functor.Identity.Identity>_R
                                <XBarType.TenseP>_R))
                      (Trans
                           (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                     <Data.Random.Source.Internal.Prim.Prim>_R
                                     <Data.Functor.Identity.Identity>_R))
                           (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <XBarType.TenseP>_N))) -}
2962256ed0259950d06afd5b886b42ac
  makeTenseP2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
1121bb0efd895ae1d4ffd25852c2677f
  makeTenseP3 :: [XBarType.Tense]
  {- Unfolding: (GHC.Types.:
                   @ XBarType.Tense
                   ParseTreeGen.makeTenseP4
                   (GHC.Types.[] @ XBarType.Tense)) -}
a43e5b78ea0a2c2a25d362d0520c9945
  makeTenseP4 :: XBarType.Tense
  {- Unfolding: (XBarType.Tense ParseTreeGen.makeTenseP5) -}
f37af2c669e675825154db00e286c206
  makeTenseP5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "-ed"#) -}
e72f5361736ab7c395a4d5a96fce1d9a
  makeTenseP_m1 ::
    Data.RVar.RVarT Data.Functor.Identity.Identity XBarType.Tense
  {- Unfolding: (Data.Random.Extras.choice
                   @ XBarType.Tense
                   ParseTreeGen.makeTenseP3) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

