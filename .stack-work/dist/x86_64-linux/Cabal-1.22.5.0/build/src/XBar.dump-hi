
==================== FINAL INTERFACE ====================
2016-09-08 00:22:41.764071 UTC

interface parse_Iaj1kxNSeaZ4PQxYHNqcNV:XBar 7103
  interface hash: c8b08b40df21d5c241bca2af1a93ebd0
  ABI hash: a76a167c8b61bf1e3fce6df3e6816646
  export-list hash: ac5c2e2e6bd2d3552868c6580e63504c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  XBar.loadInputData
  XBar.makeTenseP
  XBar.parseTenseP
module dependencies: XBarType
package dependencies: MonadPrompt-1.0.0.5@Monad_5vpMHuuRBzi4bKjpRN3A9L
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      flexible-defaults-0.0.1.2@flexi_70LqvhG3vbS8bRvV8pHtMk
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      monad-loops-0.4.3@monad_LQiHRUYhFhYBU7nOOWDOrb
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L
                      random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW
                      random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr
                      rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG
                      syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE template-haskell-2.10.0.0
                      th-extras-0.0.0.4@thext_LRY1RUMy7ShLl2tqhMyHdO
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source
         syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE:Data.Generics.Instances
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
import  -/  base-4.8.2.0:Control.Monad 480c5067477275068c9b98be08410df9
import  -/  base-4.8.2.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.IO bb5b81adcea33b14bd4abe16d7dde45f
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Read b423b4506a014855edbd329b567629f3
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0248c1e850b7ea124cf7a2e1669ebf67
import  -/  base-4.8.2.0:Text.Read ef0ef92fb7358ae94bab089940adfd2a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  XBarType f2420abe35160feeec7d06e9f040ff7b
  exports: cdfa8791cd1b5c57acf699a4767e732e
  Adj 089610700439ad05b501b77ba813ddc6
  Adj 2511599010f4679fd1f96a068a337fc9
  AdjBar 9c36599f599b1f15a98473bd1aeb6160
  AdjBar1 ecd26ca6daf8ba8129baa38363f423b7
  AdjBar2 a15fa5f6ecde92b85a5c9f8ca29ff3d6
  AdjBar3 fdfb790c6f0cb8cbd8934cc259042b71
  AdjBar4 0dc94a1d9499eb7054c8942d93d3e907
  AdjP bddbd09a5af49a0e25ba0ea0162371fa
  AdjP 9c36599f599b1f15a98473bd1aeb6160
  Adv e8ad1c93c141437b64cb8e04155f2e08
  Adv ba5a5c8a5ee08a1d21e0367a08f8d6f3
  AdvBar 77f0cb02dae05fcf2a6de9acb7c0ef73
  AdvBar 5f5402ea3488a02305311952da350e18
  AdvP 7c3748397d05b4075f1cca84d0b65d13
  AdvP 2faa469c8fb423c31bc29646e7fcc4f1
  Comp 1bdb444a0937de3989c8465624c7669a
  Comp bea2d20556a8dd0cb79e972c0036a427
  CompBar d468079eeb0e0a08db3dbd0927626435
  CompBar f03d435ec2815854b9543cc49e4f904e
  CompP 7503ccafb8ce43d638e2c68b69ca0c18
  CompP f03d435ec2815854b9543cc49e4f904e
  Det a8bf04eefd3209f19386555eb9f8785e
  Det a2df5da8581f4264e89bd095eb23cf16
  DetBar b1c54860b43abbc723dd6d51579900d6
  DetBar 9c36599f599b1f15a98473bd1aeb6160
  DetP 1625dd68c9ae43315faef24aeab03e17
  DetP 9c36599f599b1f15a98473bd1aeb6160
  NoOpt 11bdab405e9e5d62b0a418b86d74ca9d
  Noun a10b9f24f22e66b9e84d9a70bac4f523
  Noun c4ab97a1c22ab1b333e9bdbbc82aa539
  NounBar 9c36599f599b1f15a98473bd1aeb6160
  NounBar1 0dce193010a0acd8f24eb21bfa0246c0
  NounBar2 26b133c833137bb8310a5619c177172b
  NounBar3 827914cf80e3001dfd3dad664e0d9ed5
  NounP ae0550e46987013fbfc6e7549a2534a9
  NounP 9c36599f599b1f15a98473bd1aeb6160
  Prep a8d73ef1ed0a596bcfc3c27a5c9fa6d6
  Prep 8c1d889e39382c3655d129e2aaef7a8d
  PrepBar 9c36599f599b1f15a98473bd1aeb6160
  PrepBar1 10c614f718626c115e72b492fb3663a9
  PrepBar2 5886c6e9e80eb50100424f90181e9e08
  PrepP a490ee285b4f3480f4160bf964a6957a
  PrepP 9c36599f599b1f15a98473bd1aeb6160
  Tense c68ef0d1352eec8b3e7e7bda0077c36e
  Tense 7c356c671eb8a60eb0712b04868ae12c
  TenseBar 4e943c837c763f632ce9a159c1b36203
  TenseBar f03d435ec2815854b9543cc49e4f904e
  TenseP c8bdacdb20191899c94756dddeb90ce1
  TenseP f03d435ec2815854b9543cc49e4f904e
  Verb 66d8d6a18ba8ebf5d6aa6003dad7e1da
  Verb 5bcdc0bf65976e0efbd79945f96ac234
  VerbBar f03d435ec2815854b9543cc49e4f904e
  VerbBar1 d401c5f1451a9d807b7e9d3e6f2c0172
  VerbBar2 0e3235b9e9b54879fe85ba98a79889fa
  VerbBar3 f743dc017acb35b11f0eaa380b722815
  VerbBar4 267a48a8c54edd797f8a4141031936df
  VerbBar5 1da5f10319ad0e589e112258b3ccda88
  VerbP 7199e16a05fef93b89f4730cb51acb3e
  VerbP f03d435ec2815854b9543cc49e4f904e
  YesOpt 4cd1d82bcb9b01ca0d24023159a7f43c
import  -/  random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L:Data.Random.Extras 5dc1684f88e3f2655bfb5d7aca60bf5c
import  -/  rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG:Data.RVar 9b7fbdb5f1778e76b8a65f45a17cccb1
d7f4c97792fabc1fe3014d2ff67f56a1
  $wmakeVerbBar ::
    XBar.InputData -> GHC.Prim.Int# -> Data.RVar.RVar XBarType.VerbBar
  {- Arity: 2, Strictness: <L,U(U,U,U,U,U,U,U)><L,U>, Inline: [0] -}
01265b32ac564d63fd774981e6d1206e
  $wparseDetP ::
    XBarType.Optional XBarType.Det -> XBarType.NounP -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(1*U)>,
     Inline: [0],
     Unfolding: (\ ww :: XBarType.Optional XBarType.Det
                   ww1 :: XBarType.NounP ->
                 case ww of wild {
                   XBarType.YesOpt det
                   -> case det of wild1 { XBarType.Det str ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        str
                        (GHC.CString.unpackAppendCString#
                           " "#
                           (case ww1 of wild2 { XBarType.NounP nounbar ->
                            XBar.parseNounBar nounbar })) }
                   XBarType.NoOpt
                   -> case ww1 of wild1 { XBarType.NounP nounbar ->
                      XBar.parseNounBar nounbar } }) -}
e318ba1fb16c6e316f85c7bac0e0f9b5
  $wparseTenseP ::
    XBarType.Optional XBarType.Det
    -> XBarType.NounP -> XBarType.TenseBar -> [GHC.Types.Char]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(1*U)><L,1*U(1*U(1*U),1*U(1*U))>,
     Inline: [0],
     Unfolding: (\ ww :: XBarType.Optional XBarType.Det
                   ww1 :: XBarType.NounP
                   ww2 :: XBarType.TenseBar ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (XBar.$wparseDetP ww ww1)
                   (GHC.CString.unpackAppendCString#
                      " "#
                      (case ww2 of wild { XBarType.TenseBar tense verbp ->
                       case tense of wild1 { XBarType.Tense str ->
                       GHC.Base.++
                         @ GHC.Types.Char
                         str
                         (GHC.CString.unpackAppendCString#
                            " "#
                            (case verbp of wild2 { XBarType.VerbP verbbar ->
                             XBar.parseVerbBar verbbar })) } }))) -}
b726599dd3741cb486cf5fbef7710b06
  data InputData
    = InputData {iNoun :: [XBarType.Noun],
                 iVerb :: [XBarType.Verb],
                 iAdj :: [XBarType.Adj],
                 iAdv :: [XBarType.Adv],
                 iPrep :: [XBarType.Prep],
                 iDet :: [XBarType.Det],
                 iComp :: [XBarType.Comp]}
f2095f681f8502eacd2d1b52877c0004
  iAdj :: XBar.InputData -> [XBarType.Adj]
  RecSel XBar.InputData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLL),1*U(A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: XBar.InputData ->
                 case ds of wild { XBar.InputData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds3 }) -}
9092bb958405712765cd9c023465d216
  iAdv :: XBar.InputData -> [XBarType.Adv]
  RecSel XBar.InputData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLL),1*U(A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: XBar.InputData ->
                 case ds of wild { XBar.InputData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds4 }) -}
23747a79f5e5c131132dc1129c7acde8
  iComp :: XBar.InputData -> [XBarType.Comp]
  RecSel XBar.InputData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLS),1*U(A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: XBar.InputData ->
                 case ds of wild { XBar.InputData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds7 }) -}
aa008fcbf2590b171690d1f0bc3e22d7
  iDet :: XBar.InputData -> [XBarType.Det]
  RecSel XBar.InputData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: XBar.InputData ->
                 case ds of wild { XBar.InputData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds6 }) -}
f2233e318de350ae44d83800ca6afef0
  iNoun :: XBar.InputData -> [XBarType.Noun]
  RecSel XBar.InputData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLL),1*U(1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: XBar.InputData ->
                 case ds of wild { XBar.InputData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds1 }) -}
5dd9d7ae2a33baa6e4353702bc4eaa6b
  iPrep :: XBar.InputData -> [XBarType.Prep]
  RecSel XBar.InputData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLL),1*U(A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: XBar.InputData ->
                 case ds of wild { XBar.InputData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds5 }) -}
67d1c3d835d3fc0539ac7a79b529b5f2
  iVerb :: XBar.InputData -> [XBarType.Verb]
  RecSel XBar.InputData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: XBar.InputData ->
                 case ds of wild { XBar.InputData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds2 }) -}
7e847e0ccc6d8c1383c824d3043a731a
  loadInputData :: GHC.Types.IO XBar.InputData
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                XBar.loadInputData1
                  `cast`
                (Sym (GHC.Types.NTCo:IO[0] <XBar.InputData>_R)) -}
98116f3f3c9dcc42f74cfd3ff7c0d53c
  loadInputData1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, XBar.InputData #)
  {- Arity: 1, Strictness: <L,U> -}
d4beeabd32c5e759075b230c393d9206
  makeDetP ::
    XBar.InputData -> GHC.Types.Int -> Data.RVar.RVar XBarType.DetP
  {- Arity: 2, Strictness: <L,U(U,A,U,U,U,U,A)><L,1*U(U)> -}
5d0f1b2e7657039f0986b7ba225cad4c
  makeTenseP ::
    XBar.InputData -> GHC.Types.Int -> Data.RVar.RVar XBarType.TenseP
  {- Arity: 2, Strictness: <L,U(U,U,U,U,U,U,U)><L,1*U(U)>,
     Unfolding: (\ idata :: XBar.InputData n :: GHC.Types.Int ->
                 let {
                   i :: GHC.Types.Int
                   = case n of wild { GHC.Types.I# x ->
                     GHC.Types.I# (GHC.Prim.-# x 1) }
                 } in
                 let {
                   m1 :: Data.RVar.RVarT Data.Functor.Identity.Identity XBarType.DetP
                   = XBar.makeDetP idata i
                 } in
                 let {
                   m2 :: Data.RVar.RVarT
                           Data.Functor.Identity.Identity XBarType.VerbBar
                   = case i of wild { GHC.Types.I# x ->
                     XBar.$wmakeVerbBar idata (GHC.Prim.-# (GHC.Prim.-# x 1) 1) }
                 } in
                 (\ @ b1
                    eta :: XBarType.TenseP -> b1
                    eta1 :: forall a11.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a11
                            -> (a11 -> b1) -> b1 ->
                  m1
                    `cast`
                  (Trans
                       (Trans
                            (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                            (Control.Monad.Prompt.NTCo:PromptT[0]
                                 <Data.Random.Source.Internal.Prim.Prim>_R
                                 <Data.Functor.Identity.Identity>_R) <XBarType.DetP>_N)
                       (Control.Monad.Prompt.NTCo:Prompt[0]
                            <Control.Monad.Prompt.Lift
                               Data.Random.Source.Internal.Prim.Prim
                               Data.Functor.Identity.Identity>_R
                            <XBarType.DetP>_R))
                    @ b1
                    (\ x :: XBarType.DetP ->
                     case x of x1 { XBarType.DetP ipv ->
                     XBar.makeTenseP_m1
                       `cast`
                     (Trans
                          (Trans
                               (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                               (Control.Monad.Prompt.NTCo:PromptT[0]
                                    <Data.Random.Source.Internal.Prim.Prim>_R
                                    <Data.Functor.Identity.Identity>_R) <XBarType.Tense>_N)
                          (Control.Monad.Prompt.NTCo:Prompt[0]
                               <Control.Monad.Prompt.Lift
                                  Data.Random.Source.Internal.Prim.Prim
                                  Data.Functor.Identity.Identity>_R
                               <XBarType.Tense>_R))
                       @ b1
                       (\ x2 :: XBarType.Tense ->
                        case x2 of x3 { XBarType.Tense ipv1 ->
                        m2
                          `cast`
                        (Trans
                             (Trans
                                  (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                  (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R) <XBarType.VerbBar>_N)
                             (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <XBarType.VerbBar>_R))
                          @ b1
                          (\ x4 :: XBarType.VerbBar ->
                           case x4 of x5 { DEFAULT ->
                           eta
                             (XBarType.TenseP x1 (XBarType.TenseBar x3 (XBarType.VerbP x5))) })
                          eta1 })
                       eta1 })
                    eta1)
                   `cast`
                 (Trans
                      (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                <Control.Monad.Prompt.Lift
                                   Data.Random.Source.Internal.Prim.Prim
                                   Data.Functor.Identity.Identity>_R
                                <XBarType.TenseP>_R))
                      (Trans
                           (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                     <Data.Random.Source.Internal.Prim.Prim>_R
                                     <Data.Functor.Identity.Identity>_R))
                           (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <XBarType.TenseP>_N))) -}
c4ea451c10175a37319ca360bf272023
  makeTenseP1 :: [XBarType.Tense]
  {- Unfolding: (GHC.Types.:
                   @ XBarType.Tense
                   XBar.makeTenseP2
                   (GHC.Types.[] @ XBarType.Tense)) -}
dcb87c64aa03206737516c3180371f5c
  makeTenseP2 :: XBarType.Tense
  {- Unfolding: (XBarType.Tense XBar.makeTenseP3) -}
d53bef922746aee9f59a17dc675d54e1
  makeTenseP3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "-ed"#) -}
d57943b864717bc5d940909e2ea16619
  makeTenseP_m1 ::
    Data.RVar.RVarT Data.Functor.Identity.Identity XBarType.Tense
  {- Unfolding: (Data.Random.Extras.choice
                   @ XBarType.Tense
                   XBar.makeTenseP1) -}
35d4189237224b1c1347daa222a5bb6e
  parseNounBar :: XBarType.NounBar -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
2537520316c64fa2f7e178c706753e5b
  parseTenseP :: XBarType.TenseP -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S(SL))L),U(1*U(1*U(1*U,1*U(1*U))),1*U(1*U(1*U),1*U(1*U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: XBarType.TenseP ->
                 case w of ww { XBarType.TenseP ww1 ww2 ->
                 case ww1 of ww3 { XBarType.DetP ww4 ->
                 case ww4 of ww5 { XBarType.DetBar ww6 ww7 ->
                 XBar.$wparseTenseP ww6 ww7 ww2 } } }) -}
833abaf4386682fcc7c6fe0d50132f5b
  parseVerbBar :: XBarType.VerbBar -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

